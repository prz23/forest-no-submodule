var searchIndex = JSON.parse('{\
"actor":{"doc":"","i":[[17,"EPOCH_DURATION_SECONDS","actor","Duration of each tipset epoch.",null,null],[17,"EXPECTED_LEADERS_PER_EPOCH","","The expected number of block producers in each epoch.",null,null],[14,"actor_error","","Convenience macro for generating Actor Errors",null,null],[3,"ActorError","","The error type that gets returned by actor method calls.",null,null],[3,"ActorState","","State of all actor implementations",null,null],[12,"code","","",0,null],[12,"state","","",0,null],[12,"sequence","","",0,null],[12,"balance","","",0,null],[6,"DealID","","Deal identifier used in market and miner actors",null,null],[4,"ExitCode","","ExitCode defines the exit code from the VM execution",null,null],[13,"Ok","","",1,null],[13,"SysErrSenderInvalid","","Indicates failure to find an actor in the state tree.",1,null],[13,"SysErrSenderStateInvalid","","Indicates failure to find the code for an actor.",1,null],[13,"SysErrInvalidMethod","","Indicates failure to find a method in an actor.",1,null],[13,"SysErrInvalidParameters","","Indicates syntactically invalid parameters for a method.",1,null],[13,"SysErrInvalidReceiver","","Indicates a message sender has insufficient funds for a…",1,null],[13,"SysErrInsufficientFunds","","Indicates a message invocation out of sequence.",1,null],[13,"SysErrOutOfGas","","Indicates message execution (including subcalls) used more…",1,null],[13,"SysErrForbidden","","Indicates a message execution is forbidden for the caller.",1,null],[13,"SysErrorIllegalActor","","Indicates actor code performed a disallowed operation.…",1,null],[13,"SysErrorIllegalArgument","","Indicates an invalid argument passed to a runtime method.",1,null],[13,"SysErrSerialization","","Indicates  an object failed to de/serialize for storage.",1,null],[13,"SysErrorReserved1","","Reserved exit codes, do not use.",1,null],[13,"SysErrorReserved2","","",1,null],[13,"SysErrorReserved3","","",1,null],[13,"SysErrInternal","","Indicates something broken within the VM.",1,null],[13,"ErrIllegalArgument","","Indicates a method parameter is invalid.",1,null],[13,"ErrNotFound","","Indicates a requested resource does not exist.",1,null],[13,"ErrForbidden","","Indicates an action is disallowed.",1,null],[13,"ErrInsufficientFunds","","Indicates a balance of funds is insufficient.",1,null],[13,"ErrIllegalState","","Indicates an actor\'s internal state is invalid.",1,null],[13,"ErrSerialization","","Indicates de/serialization failure within actor code.",1,null],[13,"ErrTooManyProveCommits","","Power actor specific exit code.",1,null],[13,"ErrPlaceholder","","",1,null],[3,"Serialized","","Serialized bytes to be used as parameters into actor methods",null,null],[6,"TokenAmount","","",null,null],[3,"SYSTEM_ACTOR_CODE_ID","","",null,null],[3,"INIT_ACTOR_CODE_ID","","",null,null],[3,"CRON_ACTOR_CODE_ID","","",null,null],[3,"ACCOUNT_ACTOR_CODE_ID","","",null,null],[3,"POWER_ACTOR_CODE_ID","","",null,null],[3,"MINER_ACTOR_CODE_ID","","",null,null],[3,"MARKET_ACTOR_CODE_ID","","",null,null],[3,"PAYCH_ACTOR_CODE_ID","","",null,null],[3,"MULTISIG_ACTOR_CODE_ID","","",null,null],[3,"REWARD_ACTOR_CODE_ID","","",null,null],[3,"VERIFREG_ACTOR_CODE_ID","","",null,null],[3,"CHAOS_ACTOR_CODE_ID","","",null,null],[3,"CALLER_TYPES_SIGNABLE","","",null,null],[3,"SYSTEM_ACTOR_ADDR","","",null,null],[3,"INIT_ACTOR_ADDR","","",null,null],[3,"REWARD_ACTOR_ADDR","","",null,null],[3,"CRON_ACTOR_ADDR","","",null,null],[3,"STORAGE_POWER_ACTOR_ADDR","","",null,null],[3,"STORAGE_MARKET_ACTOR_ADDR","","",null,null],[3,"VERIFIED_REGISTRY_ACTOR_ADDR","","",null,null],[3,"CHAOS_ACTOR_ADDR","","",null,null],[3,"BURNT_FUNDS_ACTOR_ADDR","","Distinguished AccountActor that is the destination of all…",null,null],[3,"QUALITY_BASE_MULTIPLIER","","Quality multiplier for committed capacity (no deals) in a…",null,null],[3,"DEAL_WEIGHT_MULTIPLIER","","Quality multiplier for unverified deals in a sector",null,null],[3,"VERIFIED_DEAL_WEIGHT_MULTIPLIER","","Quality multiplier for verified deals in a sector",null,null],[3,"BalanceTable","","Balance table which handles getting and updating token…",null,null],[3,"Multimap","","Multimap stores multiple values per key in a Hamt of Amts.…",null,null],[3,"Set","","Set is a Hamt with empty values for the purpose of acting…",null,null],[3,"SetMultimap","","SetMultimap is a hamt with values that are also a hamt but…",null,null],[3,"TOTAL_FILECOIN","","The maximum supply of Filecoin that will ever exist (in…",null,null],[5,"is_builtin_actor","","Returns true if the code `Cid` belongs to a builtin actor.",null,[[["cid",3]]]],[5,"is_singleton_actor","","Returns true if the code belongs to a singleton actor.",null,[[["cid",3]]]],[5,"is_principal","","",null,[[["cid",3]]]],[5,"make_map","","Create a hamt configured with constant bit width.",null,[[],["map",6]]],[5,"make_map_with_root","","Create a map with a root cid.",null,[[["cid",3]],[["result",4],["map",6],["hamterror",4]]]],[5,"u64_key","","",null,[[],["byteskey",3]]],[5,"parse_uint_key","","",null,[[],[["uvarinterror",4],["result",4]]]],[11,"new","","Initializes a new empty balance table",2,[[]]],[11,"from_root","","Initializes a balance table from a root Cid",2,[[["cid",3]],[["error",4],["result",4]]]],[11,"root","","Retrieve root from balance table",2,[[],[["error",4],["cid",3],["result",4]]]],[11,"get","","Gets token amount for given address in balance table",2,[[["address",3]],[["tokenamount",6],["box",3],["result",4]]]],[11,"has","","Checks if a balance for an address exists",2,[[["address",3]],[["error",4],["result",4]]]],[11,"set","","Sets the balance for the address, overwriting previous value",2,[[["tokenamount",6],["address",3]],[["result",4],["error",4]]]],[11,"add","","Adds token amount to previously initialized account.",2,[[["address",3],["tokenamount",6]],[["result",4],["box",3]]]],[11,"add_create","","Adds an amount to a balance. Creates entry if not exists",2,[[["tokenamount",6],["address",3]],[["result",4],["box",3]]]],[11,"subtract_with_minimum","","Subtracts up to the specified amount from a balance,…",2,[[["address",3],["tokenamount",6]],[["tokenamount",6],["box",3],["result",4]]]],[11,"must_subtract","","Subtracts value from a balance, and errors if full amount…",2,[[["address",3],["tokenamount",6]],[["result",4],["box",3]]]],[11,"total","","Returns total balance held by this balance table",2,[[],[["tokenamount",6],["box",3],["result",4]]]],[11,"new","","Initializes a new empty multimap.",3,[[]]],[11,"from_root","","Initializes a multimap from a root Cid",3,[[["cid",3]],[["error",4],["result",4]]]],[11,"root","","Retrieve root from the multimap.",3,[[],[["error",4],["cid",3],["result",4]]]],[11,"add","","Adds a value for a key.",3,[[["byteskey",3]],[["result",4],["box",3]]]],[11,"get","","Gets the Array of value type `V` using the multimap store.",3,[[],[["option",4],["result",4],["box",3]]]],[11,"remove_all","","Removes all values for a key.",3,[[],[["result",4],["box",3]]]],[11,"for_each","","Iterates through all values in the array at a given key.",3,[[],[["result",4],["box",3]]]],[11,"for_all","","Iterates through all arrays in the multimap",3,[[],[["result",4],["box",3]]]],[11,"new","","Initializes a new empty Set.",4,[[]]],[11,"from_root","","Initializes a Set from a root Cid.",4,[[["cid",3]],[["error",4],["result",4]]]],[11,"root","","Retrieve root from the Set.",4,[[],[["error",4],["cid",3],["result",4]]]],[11,"put","","Adds key to the set.",4,[[["byteskey",3]],[["result",4],["error",4]]]],[11,"has","","Checks if key exists in the set.",4,[[],[["error",4],["result",4]]]],[11,"delete","","Deletes key from set.",4,[[],[["result",4],["error",4]]]],[11,"for_each","","Iterates through all keys in the set.",4,[[],[["result",4],["box",3]]]],[11,"collect_keys","","Collects all keys from the set into a vector.",4,[[],[["error",4],["result",4],["vec",3]]]],[11,"new","","Initializes a new empty SetMultimap.",5,[[]]],[11,"from_root","","Initializes a SetMultimap from a root Cid.",5,[[["cid",3]],[["error",4],["result",4]]]],[11,"root","","Retrieve root from the SetMultimap.",5,[[],[["error",4],["cid",3],["result",4]]]],[11,"put","","Puts the DealID in the hash set of the key.",5,[[["dealid",6],["chainepoch",6]],[["result",4],["box",3]]]],[11,"put_many","","Puts slice of DealIDs in the hash set of the key.",5,[[["chainepoch",6]],[["result",4],["box",3]]]],[11,"get","","Gets the set at the given index of the `SetMultimap`",5,[[["chainepoch",6]],[["result",4],["option",4],["box",3]]]],[11,"remove","","Removes a DealID from a key hash set.",5,[[["dealid",6],["chainepoch",6]],[["result",4],["box",3]]]],[11,"remove_all","","Removes set at index.",5,[[["chainepoch",6]],[["result",4],["box",3]]]],[11,"for_each","","Iterates through keys and converts them to a DealID to…",5,[[["chainepoch",6]],[["result",4],["box",3]]]],[0,"account","","",null,null],[3,"State","actor::account","State includes the address for the actor",null,null],[12,"address","","",6,null],[3,"Actor","","Account Actor",null,null],[4,"Method","","Account actor methods available",null,null],[13,"Constructor","","",7,null],[13,"PubkeyAddress","","",7,null],[0,"cron","actor","",null,null],[3,"Entry","actor::cron","",null,null],[12,"receiver","","The actor to call (ID address)",8,null],[12,"method_num","","The method number to call (must accept empty parameters)",8,null],[3,"State","","Cron actor state which holds entries to call during epoch…",null,null],[12,"entries","","Entries is a set of actors (and corresponding methods) to…",9,null],[3,"ConstructorParams","","Constructor parameters for Cron actor, contains entries of…",null,null],[12,"entries","","Entries is a set of actors (and corresponding methods) to…",10,null],[3,"Actor","","Cron actor",null,null],[4,"Method","","Cron actor methods available",null,null],[13,"Constructor","","",11,null],[13,"EpochTick","","",11,null],[0,"init","actor","",null,null],[3,"State","actor::init","State is reponsible for creating",null,null],[12,"address_map","","",12,null],[12,"next_id","","",12,null],[12,"network_name","","",12,null],[3,"ConstructorParams","","Init actor Constructor parameters",null,null],[12,"network_name","","",13,null],[3,"ExecParams","","Init actor Exec Params",null,null],[12,"code_cid","","",14,null],[12,"constructor_params","","",14,null],[3,"ExecReturn","","Init actor Exec Return value",null,null],[12,"id_address","","ID based address for created actor",15,null],[12,"robust_address","","Reorg safe address for actor",15,null],[3,"Actor","","Init actor",null,null],[4,"Method","","Init actor methods available",null,null],[13,"Constructor","","",16,null],[13,"Exec","","",16,null],[0,"market","actor","",null,null],[3,"DealProposal","actor::market","Note: Deal Collateral is only released and returned to…",null,null],[12,"piece_cid","","",17,null],[12,"piece_size","","",17,null],[12,"verified_deal","","",17,null],[12,"client","","",17,null],[12,"provider","","",17,null],[12,"label","","Arbitrary client chosen label to apply to the deal",17,null],[12,"start_epoch","","",17,null],[12,"end_epoch","","",17,null],[12,"storage_price_per_epoch","","",17,null],[12,"provider_collateral","","",17,null],[12,"client_collateral","","",17,null],[3,"ClientDealProposal","","ClientDealProposal is a DealProposal signed by a client",null,null],[12,"proposal","","",18,null],[12,"client_signature","","",18,null],[3,"DealState","","",null,null],[12,"sector_start_epoch","","",19,null],[12,"last_updated_epoch","","",19,null],[12,"slash_epoch","","",19,null],[3,"State","","Market actor state",null,null],[12,"proposals","","Amt<DealID, DealProposal>",20,null],[12,"states","","Amt<DealID, DealState>",20,null],[12,"pending_proposals","","PendingProposals tracks dealProposals that have not yet…",20,null],[12,"escrow_table","","Total amount held in escrow, indexed by actor address…",20,null],[12,"locked_table","","Amount locked, indexed by actor address. Note: the amounts…",20,null],[12,"next_id","","Deal id state sequential incrementer",20,null],[12,"deal_ops_by_epoch","","Metadata cached for efficient iteration over deals.…",20,null],[12,"last_cron","","",20,null],[12,"total_client_locked_colateral","","Total Client Collateral that is locked -> unlocked when…",20,null],[12,"total_provider_locked_colateral","","Total Provider Collateral that is locked -> unlocked when…",20,null],[12,"total_client_storage_fee","","Total storage fee that is locked in escrow -> unlocked…",20,null],[3,"WithdrawBalanceParams","","",null,null],[12,"provider_or_client","","",21,null],[12,"amount","","",21,null],[3,"OnMinerSectorsTerminateParams","","",null,null],[12,"epoch","","",22,null],[12,"deal_ids","","",22,null],[3,"OnMinerSectorsTerminateParamsRef","","",null,null],[12,"epoch","","",23,null],[12,"deal_ids","","",23,null],[3,"PublishStorageDealsParams","","",null,null],[12,"deals","","",24,null],[3,"PublishStorageDealsReturn","","",null,null],[12,"ids","","",25,null],[3,"VerifyDealsForActivationParams","","",null,null],[12,"deal_ids","","",26,null],[12,"sector_expiry","","",26,null],[12,"sector_start","","",26,null],[3,"VerifyDealsForActivationParamsRef","","",null,null],[12,"deal_ids","","",27,null],[12,"sector_expiry","","",27,null],[12,"sector_start","","",27,null],[3,"VerifyDealsForActivationReturn","","",null,null],[12,"deal_weight","","",28,null],[12,"verified_deal_weight","","",28,null],[3,"ActivateDealsParams","","",null,null],[12,"deal_ids","","",29,null],[12,"sector_expiry","","",29,null],[3,"ComputeDataCommitmentParams","","",null,null],[12,"deal_ids","","",30,null],[12,"sector_type","","",30,null],[3,"ComputeDataCommitmentParamsRef","","",null,null],[12,"deal_ids","","",31,null],[12,"sector_type","","",31,null],[3,"Actor","","Market Actor",null,null],[4,"Method","","Market actor methods available",null,null],[13,"Constructor","","",32,null],[13,"AddBalance","","",32,null],[13,"WithdrawBalance","","",32,null],[13,"PublishStorageDeals","","",32,null],[13,"VerifyDealsForActivation","","",32,null],[13,"ActivateDeals","","",32,null],[13,"OnMinerSectorsTerminate","","",32,null],[13,"ComputeDataCommitment","","",32,null],[13,"CronTick","","",32,null],[5,"validate_deals_for_activation","","Validates a collection of deal dealProposals for…",null,[[["address",3],["state",3],["chainepoch",6]],[["box",3],["result",4]]]],[6,"DealArray","","A specialization of a array to deals.",null,null],[6,"DealMetaArray","","A specialization of a array to deals.",null,null],[17,"PIECE_CID_PREFIX","","Cid prefix for piece Cids",null,null],[0,"miner","actor","",null,null],[3,"BitFieldQueue","actor::miner","Wrapper for working with an AMT[ChainEpoch]*Bitfield…",null,null],[12,"amt","","",33,null],[3,"Deadlines","","Deadlines contains Deadline objects, describing the…",null,null],[12,"due","","",34,null],[3,"Deadline","","Deadline holds the state for all sectors due at a specific…",null,null],[12,"partitions","","Partitions in this deadline, in order. The keys of this…",35,null],[12,"expirations_epochs","","Maps epochs to partitions that may have sectors that…",35,null],[12,"post_submissions","","Partitions numbers with PoSt submissions since the proving…",35,null],[12,"early_terminations","","Partitions with sectors that terminated early.",35,null],[12,"live_sectors","","The number of non-terminated sectors in this deadline…",35,null],[12,"total_sectors","","The total number of sectors in this deadline (incl dead).",35,null],[12,"faulty_power","","Memoized sum of faulty power in partitions.",35,null],[3,"PoStResult","","",null,null],[12,"new_faulty_power","","",36,null],[12,"retracted_recovery_power","","",36,null],[12,"recovered_power","","",36,null],[12,"sectors","","A bitfield of all sectors in the proven partitions.",36,null],[12,"ignored_sectors","","A subset of `sectors` that should be ignored.",36,null],[3,"DeadlineInfo","","Deadline calculations with respect to a current epoch.…",null,null],[12,"current_epoch","","Epoch at which this info was calculated.",37,null],[12,"period_start","","First epoch of the proving period (<= CurrentEpoch).",37,null],[12,"index","","Current deadline index, in [0..WPoStProvingPeriodDeadlines).",37,null],[12,"open","","First epoch from which a proof may be submitted (>=…",37,null],[12,"close","","First epoch from which a proof may no longer be submitted…",37,null],[12,"challenge","","Epoch at which to sample the chain for challenge (< Open).",37,null],[12,"fault_cutoff","","First epoch at which a fault declaration is rejected (<…",37,null],[3,"ExpirationSet","","ExpirationSet is a collection of sector numbers that are…",null,null],[12,"on_time_sectors","","Sectors expiring \\\"on time\\\" at the end of their committed…",38,null],[12,"early_sectors","","Sectors expiring \\\"early\\\" due to being faulty for too long",38,null],[12,"on_time_pledge","","Pledge total for the on-time sectors",38,null],[12,"active_power","","Power that is currently active (not faulty)",38,null],[12,"faulty_power","","Power that is currently faulty",38,null],[3,"ExpirationQueue","","A queue of expiration sets by epoch, representing the…",null,null],[12,"amt","","",39,null],[12,"quant","","",39,null],[3,"Partition","","",null,null],[12,"sectors","","Sector numbers in this partition, including faulty and…",40,null],[12,"faults","","Subset of sectors detected/declared faulty and not yet…",40,null],[12,"recoveries","","Subset of faulty sectors expected to recover on next PoSt…",40,null],[12,"terminated","","Subset of sectors terminated but not yet removed from…",40,null],[12,"expirations_epochs","","Maps epochs sectors that expire in or before that epoch.…",40,null],[12,"early_terminated","","Subset of terminated that were before their committed…",40,null],[12,"live_power","","Power of not-yet-terminated sectors (incl faulty).",40,null],[12,"faulty_power","","Power of currently-faulty sectors. FaultyPower <= LivePower.",40,null],[12,"recovering_power","","Power of expected-to-recover sectors. RecoveringPower <=…",40,null],[3,"PowerPair","","",null,null],[12,"raw","","",41,null],[12,"qa","","",41,null],[3,"VestSpec","","Specification for a linear vesting schedule.",null,null],[12,"initial_delay","","",42,null],[12,"vest_period","","",42,null],[12,"step_duration","","",42,null],[12,"quantization","","",42,null],[3,"QuantSpec","","A spec for quantization.",null,null],[12,"unit","","The unit of quantization",43,null],[12,"offset","","The offset from zero from which to base the modulus",43,null],[3,"DeadlineSectorMap","","Maps deadlines to partition maps.",null,null],[3,"PartitionSectorMap","","Maps partitions to sector bitfields.",null,null],[3,"Sectors","","",null,null],[12,"amt","","",44,null],[3,"State","","Balance of Miner Actor should be greater than or equal to…",null,null],[12,"info","","Contains static info about this miner",45,null],[12,"pre_commit_deposits","","Total funds locked as pre_commit_deposit",45,null],[12,"locked_funds","","Total rewards and added funds locked in vesting table",45,null],[12,"vesting_funds","","VestingFunds (Vesting Funds schedule for the miner).",45,null],[12,"initial_pledge_requirement","","Sum of initial pledge requirements of all active sectors",45,null],[12,"pre_committed_sectors","","Sectors that have been pre-committed but not yet proven.…",45,null],[12,"pre_committed_sectors_expiry","","PreCommittedSectorsExpiry maintains the state required to…",45,null],[12,"allocated_sectors","","Allocated sector IDs. Sector IDs can never be reused once…",45,null],[12,"sectors","","Information for all proven and not-yet-garbage-collected…",45,null],[12,"proving_period_start","","The first epoch in this miner\'s current proving period.…",45,null],[12,"current_deadline","","Index of the deadline within the proving period beginning…",45,null],[12,"deadlines","","The sector numbers due for PoSt at each deadline in the…",45,null],[12,"early_terminations","","Deadlines with outstanding fees for early sector…",45,null],[3,"MinerInfo","","Static information about miner",null,null],[12,"owner","","Account that owns this miner",46,null],[12,"worker","","Worker account for this miner This will be the key that is…",46,null],[12,"control_addresses","","Additional addresses that are permitted to submit messages…",46,null],[12,"pending_worker_key","","Optional worker key to update at an epoch",46,null],[12,"peer_id","","Libp2p identity that should be used when connecting to…",46,null],[12,"multi_address","","Vector of byte arrays representing Libp2p multi-addresses…",46,null],[12,"seal_proof_type","","The proof type used by this miner for sealing sectors.",46,null],[12,"sector_size","","Amount of space in each sector committed to the network by…",46,null],[12,"window_post_partition_sectors","","The number of sectors in each Window PoSt partition…",46,null],[3,"TerminationResult","","",null,null],[12,"sectors","","Sectors maps epochs at which sectors expired, to bitfields…",47,null],[12,"partitions_processed","","",47,null],[12,"sectors_processed","","",47,null],[3,"MinerConstructorParams","","Storage miner actor constructor params are defined here so…",null,null],[12,"owner","","",48,null],[12,"worker","","",48,null],[12,"control_addresses","","",48,null],[12,"seal_proof_type","","",48,null],[12,"peer_id","","",48,null],[12,"multi_addresses","","",48,null],[3,"CronEventPayload","","",null,null],[12,"event_type","","",49,null],[3,"PartitionKey","","",null,null],[12,"deadline","","",50,null],[12,"partition","","",50,null],[3,"GetControlAddressesReturn","","",null,null],[12,"owner","","",51,null],[12,"worker","","",51,null],[12,"control_addresses","","",51,null],[3,"ChangeWorkerAddressParams","","",null,null],[12,"new_worker","","",52,null],[12,"new_control_addresses","","",52,null],[3,"ChangePeerIDParams","","",null,null],[12,"new_id","","",53,null],[3,"ChangeMultiaddrsParams","","",null,null],[12,"new_multi_addrs","","",54,null],[3,"ConfirmSectorProofsParams","","",null,null],[12,"sectors","","",55,null],[3,"PoStPartition","","",null,null],[12,"index","","Partitions are numbered per-deadline, from zero.",56,null],[12,"skipped","","Sectors skipped while proving that weren\'t already…",56,null],[3,"SubmitWindowedPoStParams","","Information submitted by a miner to provide a Window PoSt.",null,null],[12,"deadline","","The deadline index which the submission targets.",57,null],[12,"partitions","","The partitions being proven.",57,null],[12,"proofs","","Array of proofs, one per distinct registered proof type…",57,null],[12,"chain_commit_epoch","","The epoch at which these proofs is being committed to a…",57,null],[12,"chain_commit_rand","","The ticket randomness on the chain at the…",57,null],[3,"ProveCommitSectorParams","","",null,null],[12,"sector_number","","",58,null],[12,"proof","","",58,null],[3,"CheckSectorProvenParams","","",null,null],[12,"sector_number","","",59,null],[3,"ExtendSectorExpirationParams","","",null,null],[12,"extensions","","",60,null],[3,"ExpirationExtension","","",null,null],[12,"deadline","","",61,null],[12,"partition","","",61,null],[12,"sectors","","",61,null],[12,"new_expiration","","",61,null],[3,"TerminateSectorsParams","","",null,null],[12,"terminations","","",62,null],[3,"TerminationDeclaration","","",null,null],[12,"deadline","","",63,null],[12,"partition","","",63,null],[12,"sectors","","",63,null],[3,"TerminateSectorsReturn","","",null,null],[12,"done","","",64,null],[3,"DeclareFaultsParams","","",null,null],[12,"faults","","",65,null],[3,"FaultDeclaration","","",null,null],[12,"deadline","","The deadline to which the faulty sectors are assigned, in…",66,null],[12,"partition","","Partition index within the deadline containing the faulty…",66,null],[12,"sectors","","Sectors in the partition being declared faulty.",66,null],[3,"DeclareFaultsRecoveredParams","","",null,null],[12,"recoveries","","",67,null],[3,"RecoveryDeclaration","","",null,null],[12,"deadline","","The deadline to which the recovered sectors are assigned,…",68,null],[12,"partition","","Partition index within the deadline containing the…",68,null],[12,"sectors","","Sectors in the partition being declared recovered.",68,null],[3,"CompactPartitionsParams","","",null,null],[12,"deadline","","",69,null],[12,"partitions","","",69,null],[3,"CompactSectorNumbersParams","","",null,null],[12,"mask_sector_numbers","","",70,null],[3,"ReportConsensusFaultParams","","",null,null],[12,"header1","","",71,null],[12,"header2","","",71,null],[12,"header_extra","","",71,null],[3,"WithdrawBalanceParams","","",null,null],[12,"amount_requested","","",72,null],[3,"WorkerKeyChange","","",null,null],[12,"new_worker","","Must be an ID address",73,null],[12,"effective_at","","",73,null],[3,"SectorPreCommitInfo","","",null,null],[12,"seal_proof","","",74,null],[12,"sector_number","","",74,null],[12,"sealed_cid","","CommR",74,null],[12,"seal_rand_epoch","","",74,null],[12,"deal_ids","","",74,null],[12,"expiration","","",74,null],[12,"replace_capacity","","Whether to replace a \\\"committed capacity\\\" no-deal sector…",74,null],[12,"replace_sector_deadline","","The committed capacity sector to replace, and its…",74,null],[12,"replace_sector_partition","","",74,null],[12,"replace_sector_number","","",74,null],[3,"SectorPreCommitOnChainInfo","","Information stored on-chain for a pre-committed sector.",null,null],[12,"info","","",75,null],[12,"pre_commit_deposit","","",75,null],[12,"pre_commit_epoch","","",75,null],[12,"deal_weight","","Integral of active deals over sector lifetime, 0 if…",75,null],[12,"verified_deal_weight","","Integral of active verified deals over sector lifetime",75,null],[3,"SectorOnChainInfo","","Information stored on-chain for a proven sector.",null,null],[12,"sector_number","","",76,null],[12,"seal_proof","","The seal proof type implies the PoSt proofs",76,null],[12,"sealed_cid","","CommR",76,null],[12,"deal_ids","","",76,null],[12,"activation","","Epoch during which the sector proof was accepted",76,null],[12,"expiration","","Epoch during which the sector expires",76,null],[12,"deal_weight","","Integral of active deals over sector lifetime",76,null],[12,"verified_deal_weight","","Integral of active verified deals over sector lifetime",76,null],[12,"initial_pledge","","Pledge collected to commit this sector",76,null],[12,"expected_day_reward","","Expected one day projection of reward for sector computed…",76,null],[12,"expected_storage_pledge","","Expected twenty day projection of reward for sector…",76,null],[3,"ChainSectorInfo","","",null,null],[12,"info","","",77,null],[12,"id","","",77,null],[3,"Fault","","",null,null],[12,"miner","","",78,null],[12,"fault","","",78,null],[3,"VestingFund","","",null,null],[12,"epoch","","",79,null],[12,"amount","","",79,null],[3,"VestingFunds","","Represents the vesting table state for the miner. It is a…",null,null],[12,"funds","","",80,null],[3,"Actor","","Miner Actor",null,null],[4,"Method","","Storage Miner actor methods available",null,null],[13,"Constructor","","",81,null],[13,"ControlAddresses","","",81,null],[13,"ChangeWorkerAddress","","",81,null],[13,"ChangePeerID","","",81,null],[13,"SubmitWindowedPoSt","","",81,null],[13,"PreCommitSector","","",81,null],[13,"ProveCommitSector","","",81,null],[13,"ExtendSectorExpiration","","",81,null],[13,"TerminateSectors","","",81,null],[13,"DeclareFaults","","",81,null],[13,"DeclareFaultsRecovered","","",81,null],[13,"OnDeferredCronEvent","","",81,null],[13,"CheckSectorProven","","",81,null],[13,"AddLockedFund","","",81,null],[13,"ReportConsensusFault","","",81,null],[13,"WithdrawBalance","","",81,null],[13,"ConfirmSectorProofsValid","","",81,null],[13,"ChangeMultiaddrs","","",81,null],[13,"CompactPartitions","","",81,null],[13,"CompactSectorNumbers","","",81,null],[5,"assign_deadlines","","",null,[[["sectoronchaininfo",3],["vec",3]],[["vec",3],["vec",3]]]],[5,"deadline_is_mutable","","Returns true if the deadline at the given index is…",null,[[["chainepoch",6]]]],[5,"expected_reward_for_power","","This is the BR(t) value of the given sector for the…",null,[[["storagepower",6],["filterestimate",3],["chainepoch",6]],["tokenamount",6]]],[5,"pledge_penalty_for_declared_fault","","",null,[[["storagepower",6],["filterestimate",3]],["tokenamount",6]]],[5,"pledge_penalty_for_undeclared_fault","","This is the SP(t) penalty for a newly faulty sector that…",null,[[["storagepower",6],["filterestimate",3]],["tokenamount",6]]],[5,"pledge_penalty_for_termination","","Penalty to locked pledge collateral for the termination of…",null,[[["tokenamount",6],["filterestimate",3],["storagepower",6],["chainepoch",6]],["tokenamount",6]]],[5,"pre_commit_deposit_for_power","","Computes the PreCommit Deposit given sector qa weight and…",null,[[["storagepower",6],["filterestimate",3]],["tokenamount",6]]],[5,"initial_pledge_for_power","","",null,[[["storagepower",6],["tokenamount",6],["filterestimate",3]],["tokenamount",6]]],[5,"load_partitions_sectors_max","","The maximum number of partitions that may be required to…",null,[[]]],[5,"check_supported_proof_types","","List of proof types which can be used when creating new…",null,[[["registeredsealproof",4]]]],[5,"max_seal_duration","","Maximum duration to allow for the sealing process for seal…",null,[[["registeredsealproof",4]],[["option",4],["chainepoch",6]]]],[5,"qa_power_for_weight","","Returns the power for a sector size and weight.",null,[[["sectorsize",4],["bigint",3],["chainepoch",6]],["storagepower",6]]],[5,"qa_power_for_sector","","Returns the quality-adjusted power for a sector.",null,[[["sectorsize",4],["sectoronchaininfo",3]],["storagepower",6]]],[5,"deal_per_sector_limit","","Determine maximum number of deal miner\'s sector can hold",null,[[["sectorsize",4]]]],[5,"reward_for_consensus_slash_report","","",null,[[["tokenamount",6],["chainepoch",6]],["tokenamount",6]]],[6,"CronEvent","","",null,null],[17,"PRE_COMMIT_DEPOSIT_FACTOR","","",null,null],[17,"INITIAL_PLEDGE_FACTOR","","",null,null],[17,"PRE_COMMIT_DEPOSIT_PROJECTION_PERIOD","","",null,null],[17,"INITIAL_PLEDGE_PROJECTION_PERIOD","","",null,null],[17,"DECLARED_FAULT_FACTOR_NUM","","",null,null],[17,"DECLARED_FAULT_FACTOR_DENOM","","",null,null],[17,"DECLARED_FAULT_PROJECTION_PERIOD","","",null,null],[17,"UNDECLARED_FAULT_PROJECTION_PERIOD","","",null,null],[17,"TERMINATION_LIFETIME_CAP","","",null,null],[17,"WPOST_PROVING_PERIOD","","The period over which all a miner\'s active sectors will be…",null,null],[17,"WPOST_CHALLENGE_WINDOW","","The duration of a deadline\'s challenge window, the period…",null,null],[17,"WPOST_PERIOD_DEADLINES","","The number of non-overlapping PoSt deadlines in each…",null,null],[17,"WPOST_MAX_CHAIN_COMMIT_AGE","","The maximum distance back that a valid Window PoSt must…",null,null],[17,"SECTORS_MAX","","",null,null],[17,"ADDRESSED_PARTITIONS_MAX","","",null,null],[17,"ADDRESSED_SECTORS_MAX","","",null,null],[17,"NEW_SECTORS_PER_PERIOD_MAX","","The maximum number of new sectors that may be staged by a…",null,null],[17,"CHAIN_FINALITY","","Epochs after which chain state is final.",null,null],[17,"SEALED_CID_PREFIX","","",null,null],[17,"PRE_COMMIT_CHALLENGE_DELAY","","Number of epochs between publishing the precommit and when…",null,null],[17,"ELECTION_LOOKBACK","","Lookback from the current epoch for state view for leader…",null,null],[17,"WPOST_CHALLENGE_LOOKBACK","","Lookback from the deadline\'s challenge window opening from…",null,null],[17,"FAULT_DECLARATION_CUTOFF","","Minimum period before a deadline\'s challenge window opens…",null,null],[17,"FAULT_MAX_AGE","","The maximum age of a fault before the sector is terminated.",null,null],[17,"WORKER_KEY_CHANGE_DELAY","","Staging period for a miner worker key change. Finality is…",null,null],[17,"MIN_SECTOR_EXPIRATION","","Minimum number of epochs past the current epoch a sector…",null,null],[17,"MAX_SECTOR_EXPIRATION_EXTENSION","","Maximum number of epochs past the current epoch a sector…",null,null],[17,"DEAL_LIMIT_DENOMINATOR","","Ratio of sector size to maximum deals per sector. The…",null,null],[17,"PLEDGE_VESTING_SPEC","","",null,null],[17,"REWARD_VESTING_SPEC","","",null,null],[17,"NO_QUANTIZATION","","",null,null],[17,"CRON_EVENT_WORKER_KEY_CHANGE","","",null,null],[17,"CRON_EVENT_PROVING_DEADLINE","","",null,null],[17,"CRON_EVENT_PROCESS_EARLY_TERMINATIONS","","",null,null],[0,"multisig","actor","",null,null],[3,"State","actor::multisig","Multisig actor state",null,null],[12,"signers","","",82,null],[12,"num_approvals_threshold","","",82,null],[12,"next_tx_id","","",82,null],[12,"initial_balance","","",82,null],[12,"start_epoch","","",82,null],[12,"unlock_duration","","",82,null],[12,"pending_txs","","",82,null],[3,"TxnID","","Transaction ID type",null,null],[12,"0","","",83,null],[3,"Transaction","","Transaction type used in multisig actor",null,null],[12,"to","","",84,null],[12,"value","","",84,null],[12,"method","","",84,null],[12,"params","","",84,null],[12,"approved","","",84,null],[3,"ProposalHashData","","Data for a BLAKE2B-256 to be attached to methods…",null,null],[12,"requester","","",85,null],[12,"to","","",85,null],[12,"value","","",85,null],[12,"method","","",85,null],[12,"params","","",85,null],[3,"ConstructorParams","","Constructor parameters for multisig actor.",null,null],[12,"signers","","",86,null],[12,"num_approvals_threshold","","",86,null],[12,"unlock_duration","","",86,null],[3,"ProposeParams","","Propose method call parameters.",null,null],[12,"to","","",87,null],[12,"value","","",87,null],[12,"method","","",87,null],[12,"params","","",87,null],[3,"ProposeReturn","","Propose method call return.",null,null],[12,"txn_id","","TxnID is the ID of the proposed transaction.",88,null],[12,"applied","","Applied indicates if the transaction was applied as…",88,null],[12,"code","","Code is the exitcode of the transaction, if Applied is…",88,null],[12,"ret","","Ret is the return value of the transaction, if Applied is…",88,null],[3,"TxnIDParams","","Parameters for approve and cancel multisig functions.",null,null],[12,"id","","",89,null],[12,"proposal_hash","","Optional hash of proposal to ensure an operation can only…",89,null],[3,"ApproveReturn","","Parameters for approve and cancel multisig functions.",null,null],[12,"applied","","Applied indicates if the transaction was applied as…",90,null],[12,"code","","Code is the exitcode of the transaction, if Applied is…",90,null],[12,"ret","","Ret is the return value of the transaction, if Applied is…",90,null],[3,"AddSignerParams","","Add signer params.",null,null],[12,"signer","","",91,null],[12,"increase","","",91,null],[3,"RemoveSignerParams","","Remove signer params.",null,null],[12,"signer","","",92,null],[12,"decrease","","",92,null],[3,"SwapSignerParams","","Swap signer multisig method params",null,null],[12,"from","","",93,null],[12,"to","","",93,null],[3,"ChangeNumApprovalsThresholdParams","","Propose method call parameters",null,null],[12,"new_threshold","","",94,null],[3,"Actor","","Multisig Actor",null,null],[4,"Method","","Multisig actor methods available",null,null],[13,"Constructor","","",95,null],[13,"Propose","","",95,null],[13,"Approve","","",95,null],[13,"Cancel","","",95,null],[13,"AddSigner","","",95,null],[13,"RemoveSigner","","",95,null],[13,"SwapSigner","","",95,null],[13,"ChangeNumApprovalsThreshold","","",95,null],[0,"network","actor","",null,null],[17,"EPOCH_DURATION_SECONDS","actor::network","Duration of each tipset epoch.",null,null],[17,"EXPECTED_LEADERS_PER_EPOCH","","The expected number of block producers in each epoch.",null,null],[3,"QUALITY_BASE_MULTIPLIER","","Quality multiplier for committed capacity (no deals) in a…",null,null],[3,"DEAL_WEIGHT_MULTIPLIER","","Quality multiplier for unverified deals in a sector",null,null],[3,"VERIFIED_DEAL_WEIGHT_MULTIPLIER","","Quality multiplier for verified deals in a sector",null,null],[17,"SECONDS_IN_HOUR","","",null,null],[17,"SECONDS_IN_DAY","","",null,null],[17,"SECONDS_IN_YEAR","","",null,null],[17,"EPOCHS_IN_HOUR","","",null,null],[17,"EPOCHS_IN_DAY","","",null,null],[17,"EPOCHS_IN_YEAR","","",null,null],[17,"SECTOR_QUALITY_PRECISION","","Precision used for making QA power calculations",null,null],[0,"paych","actor","",null,null],[3,"LaneState","actor::paych","The Lane state tracks the latest (highest) voucher nonce…",null,null],[12,"redeemed","","",96,null],[12,"nonce","","",96,null],[3,"Merge","","Specifies which `lane`s to be merged with what `nonce` on…",null,null],[12,"lane","","",97,null],[12,"nonce","","",97,null],[3,"State","","A given payment channel actor is established by `from` to…",null,null],[12,"from","","Channel owner, who has funded the actor.",98,null],[12,"to","","Recipient of payouts from channel.",98,null],[12,"to_send","","Amount successfully redeemed through the payment channel,…",98,null],[12,"settling_at","","Height at which the channel can be collected.",98,null],[12,"min_settle_height","","Height before which the channel `ToSend` cannot be…",98,null],[12,"lane_states","","Collections of lane states for the channel, maintained in…",98,null],[3,"ConstructorParams","","Constructor parameters for payment channel actor",null,null],[12,"from","","",99,null],[12,"to","","",99,null],[3,"SignedVoucher","","A voucher is sent by `from` to `to` off-chain in order to…",null,null],[12,"channel_addr","","ChannelAddr is the address of the payment channel this…",100,null],[12,"time_lock_min","","Min epoch before which the voucher cannot be redeemed",100,null],[12,"time_lock_max","","Max epoch beyond which the voucher cannot be redeemed set…",100,null],[12,"secret_pre_image","","(optional) Used by `to` to validate",100,null],[12,"extra","","(optional) Specified by `from` to add a verification…",100,null],[12,"lane","","Specifies which lane the Voucher merges into (will be…",100,null],[12,"nonce","","Set by `from` to prevent redemption of stale vouchers on a…",100,null],[12,"amount","","Amount voucher can be redeemed for",100,null],[12,"min_settle_height","","(optional) Can extend channel min_settle_height if needed",100,null],[12,"merges","","(optional) Set of lanes to be merged into `lane`",100,null],[12,"signature","","Sender\'s signature over the voucher (sign on none)",100,null],[3,"ModVerifyParams","","Modular Verification method",null,null],[12,"actor","","",101,null],[12,"method","","",101,null],[12,"data","","",101,null],[3,"PaymentVerifyParams","","Payment Verification parameters",null,null],[12,"extra","","",102,null],[12,"proof","","",102,null],[3,"UpdateChannelStateParams","","",null,null],[12,"sv","","",103,null],[12,"secret","","",103,null],[12,"proof","","",103,null],[3,"Actor","","Payment Channel actor",null,null],[4,"Method","","Payment Channel actor methods available",null,null],[13,"Constructor","","",104,null],[13,"UpdateChannelState","","",104,null],[13,"Settle","","",104,null],[13,"Collect","","",104,null],[17,"MAX_LANE","","Maximum number of lanes in a channel",null,null],[17,"SETTLE_DELAY","","",null,null],[0,"power","actor","",null,null],[3,"CONSENSUS_MINER_MIN_POWER","actor::power","Minimum power of an individual miner to meet the threshold…",null,null],[3,"State","","Storage power actor state",null,null],[12,"total_raw_byte_power","","",105,null],[12,"total_bytes_committed","","",105,null],[12,"total_quality_adj_power","","",105,null],[12,"total_qa_bytes_committed","","",105,null],[12,"total_pledge_collateral","","",105,null],[12,"this_epoch_raw_byte_power","","",105,null],[12,"this_epoch_quality_adj_power","","",105,null],[12,"this_epoch_pledge_collateral","","",105,null],[12,"this_epoch_qa_power_smoothed","","",105,null],[12,"miner_count","","",105,null],[12,"miner_above_min_power_count","","Number of miners having proven the minimum consensus power.",105,null],[12,"cron_event_queue","","A queue of events to be triggered by cron, indexed by epoch.",105,null],[12,"first_cron_epoch","","First epoch in which a cron task may be stored. Cron will…",105,null],[12,"last_processed_cron_epoch","","Last epoch power cron tick has been processed.",105,null],[12,"claims","","Claimed power for each miner.",105,null],[12,"proof_validation_batch","","",105,null],[3,"Claim","","",null,null],[12,"raw_byte_power","","Sum of raw byte power for a miner\'s sectors.",106,null],[12,"quality_adj_power","","Sum of quality adjusted power for a miner\'s sectors.",106,null],[3,"CronEvent","","",null,null],[12,"miner_addr","","",107,null],[12,"callback_payload","","",107,null],[3,"CreateMinerParams","","",null,null],[12,"owner","","",108,null],[12,"worker","","",108,null],[12,"seal_proof_type","","",108,null],[12,"peer","","",108,null],[12,"multiaddrs","","",108,null],[3,"CreateMinerReturn","","",null,null],[12,"id_address","","Canonical ID-based address for the actor.",109,null],[12,"robust_address","","Re-org safe address for created actor.",109,null],[3,"UpdateClaimedPowerParams","","",null,null],[12,"raw_byte_delta","","",110,null],[12,"quality_adjusted_delta","","",110,null],[3,"EnrollCronEventParams","","",null,null],[12,"event_epoch","","",111,null],[12,"payload","","",111,null],[3,"SectorStorageWeightDesc","","",null,null],[12,"sector_size","","",112,null],[12,"duration","","",112,null],[12,"deal_weight","","",112,null],[12,"verified_deal_weight","","",112,null],[3,"ReportConsensusFaultParams","","",null,null],[12,"block_header_1","","",113,null],[12,"block_header_2","","",113,null],[12,"block_header_extra","","",113,null],[3,"CurrentTotalPowerReturn","","",null,null],[12,"raw_byte_power","","",114,null],[12,"quality_adj_power","","",114,null],[12,"pledge_collateral","","",114,null],[12,"quality_adj_power_smoothed","","",114,null],[3,"Actor","","Storage Power Actor",null,null],[4,"Method","","Storage power actor methods available",null,null],[13,"Constructor","","Constructor for Storage Power Actor",115,null],[13,"CreateMiner","","",115,null],[13,"UpdateClaimedPower","","",115,null],[13,"EnrollCronEvent","","",115,null],[13,"OnEpochTickEnd","","",115,null],[13,"UpdatePledgeTotal","","",115,null],[13,"OnConsensusFault","","",115,null],[13,"SubmitPoRepForBulkVerify","","",115,null],[13,"CurrentTotalPower","","",115,null],[5,"get_claim","","Gets claim from claims map by address",null,[[["map",6],["address",3]],[["option",4],["box",3],["result",4]]]],[5,"set_claim","","",null,[[["address",3],["claim",3],["map",6]],[["result",4],["box",3]]]],[6,"SectorTermination","","",null,null],[17,"CONSENSUS_MINER_MIN_MINERS","","Minimum power of an individual miner to meet the threshold…",null,null],[17,"MAX_MINER_PROVE_COMMITS_PER_EPOCH","","Maximum number of prove commits a miner can submit in one…",null,null],[17,"SECTOR_TERMINATION_EXPIRED","","Implicit termination after all deals expire",null,null],[17,"SECTOR_TERMINATION_MANUAL","","Unscheduled explicit termination by the miner",null,null],[17,"SECTOR_TERMINATION_FAULTY","","Implicit termination due to unrecovered fault",null,null],[0,"reward","actor","",null,null],[3,"BASELINE_EXPONENT","actor::reward","Floor(e^(ln[1 + 200%] / epochsInYear) * 2^128 Q.128…",null,null],[3,"BASELINE_INITIAL_VALUE","","1EiB",null,null],[3,"INIT_BASELINE_POWER","","1EiB",null,null],[3,"Reward","","",null,null],[12,"vesting_function","","",116,null],[12,"start_epoch","","",116,null],[12,"end_epoch","","",116,null],[12,"value","","",116,null],[12,"amount_withdrawn","","",116,null],[3,"State","","Reward actor state",null,null],[12,"cumsum_baseline","","Target CumsumRealized needs to reach for…",117,null],[12,"cumsum_realized","","CumsumRealized is cumulative sum of network power capped…",117,null],[12,"effective_network_time","","Ceiling of real effective network time `theta` based on…",117,null],[12,"effective_baseline_power","","EffectiveBaselinePower is the baseline power at the…",117,null],[12,"this_epoch_reward","","The reward to be paid in per WinCount to block producers.…",117,null],[12,"this_epoch_reward_smoothed","","Smoothed `this_epoch_reward`.",117,null],[12,"this_epoch_baseline_power","","The baseline power the network is targeting at st.Epoch.",117,null],[12,"epoch","","Epoch tracks for which epoch the Reward was computed.",117,null],[12,"total_mined","","TotalMined tracks the total FIL awared to block miners.",117,null],[3,"AwardBlockRewardParams","","",null,null],[12,"miner","","",118,null],[12,"penalty","","",118,null],[12,"gas_reward","","",118,null],[12,"win_count","","",118,null],[3,"ThisEpochRewardReturn","","",null,null],[12,"this_epoch_reward","","",119,null],[12,"this_epoch_reward_smoothed","","",119,null],[12,"this_epoch_baseline_power","","",119,null],[3,"Actor","","Reward Actor",null,null],[4,"VestingFunction","","Defines vestion function type for reward actor.",null,null],[13,"None","","",120,null],[13,"Linear","","",120,null],[4,"Method","","Reward actor methods available",null,null],[13,"Constructor","","",121,null],[13,"AwardBlockReward","","",121,null],[13,"ThisEpochReward","","",121,null],[13,"UpdateNetworkKPI","","",121,null],[17,"TOKEN_PRECISION","","Number of token units in an abstract \\\"FIL\\\" token. The…",null,null],[0,"system","actor","",null,null],[3,"State","actor::system","System actor state.",null,null],[3,"Actor","","System actor.",null,null],[4,"Method","","System actor methods.",null,null],[13,"Constructor","","",122,null],[0,"verifreg","actor","",null,null],[3,"State","actor::verifreg","",null,null],[12,"root_key","","",123,null],[12,"verifiers","","",123,null],[12,"verified_clients","","",123,null],[3,"MINIMUM_VERIFIED_DEAL_SIZE","","",null,null],[3,"VerifierParams","","",null,null],[12,"address","","",124,null],[12,"allowance","","",124,null],[3,"BytesParams","","",null,null],[12,"address","","Address of verified client.",125,null],[12,"deal_size","","Number of bytes to use.",125,null],[3,"Actor","","",null,null],[4,"Method","","Account actor methods available",null,null],[13,"Constructor","","",126,null],[13,"AddVerifier","","",126,null],[13,"RemoveVerifier","","",126,null],[13,"AddVerifiedClient","","",126,null],[13,"UseBytes","","",126,null],[13,"RestoreBytes","","",126,null],[6,"AddVerifierParams","","",null,null],[6,"AddVerifierClientParams","","",null,null],[6,"DataCap","","DataCap is an integer number of bytes. We can introduce…",null,null],[6,"UseBytesParams","","",null,null],[6,"RestoreBytesParams","","",null,null],[0,"chaos","actor","",null,null],[3,"State","actor::chaos","",null,null],[12,"value","","",127,null],[12,"unmarshallable","","",127,null],[3,"CreateActorArgs","","CreateActorArgs are the arguments to CreateActor.",null,null],[12,"undef_cid","","",128,null],[12,"cid","","",128,null],[12,"undef_address","","",128,null],[12,"address","","",128,null],[3,"ResolveAddressResponse","","Holds the response of a call to runtime.ResolveAddress",null,null],[12,"address","","",129,null],[12,"success","","",129,null],[3,"SendArgs","","",null,null],[12,"to","","",130,null],[12,"value","","",130,null],[12,"method","","",130,null],[12,"params","","",130,null],[3,"SendReturn","","",null,null],[12,"return_value","","",131,null],[12,"code","","",131,null],[3,"MutateStateArgs","","",null,null],[12,"value","","",132,null],[12,"branch","","",132,null],[3,"AbortWithArgs","","",null,null],[12,"code","","",133,null],[12,"message","","",133,null],[12,"uncontrolled","","",133,null],[3,"InspectRuntimeReturn","","",null,null],[12,"caller","","",134,null],[12,"receiver","","",134,null],[12,"value_received","","",134,null],[12,"curr_epoch","","",134,null],[12,"current_balance","","",134,null],[12,"state","","",134,null],[3,"CallerValidationArgs","","",null,null],[12,"branch","","",135,null],[12,"addrs","","",135,null],[12,"types","","",135,null],[3,"Actor","","Chaos Actor",null,null],[4,"Method","","Chaos actor methods available",null,null],[13,"Constructor","","",136,null],[13,"CallerValidation","","",136,null],[13,"CreateActor","","",136,null],[13,"ResolveAddress","","",136,null],[13,"DeleteActor","","",136,null],[13,"Send","","",136,null],[13,"MutateState","","",136,null],[13,"AbortWith","","",136,null],[13,"InspectRuntime","","",136,null],[0,"math","actor","",null,null],[5,"poly_val","actor::math","polyval evaluates a polynomial given by coefficients `p`…",null,[[["bigint",3]],["bigint",3]]],[5,"poly_parse","","",null,[[],[["parsebiginterror",3],["vec",3],["result",4]]]],[17,"PRECISION","","",null,null],[0,"smooth","actor","",null,null],[3,"FilterEstimate","actor::smooth","",null,null],[12,"position","","",137,null],[12,"velocity","","",137,null],[3,"AlphaBetaFilter","","",null,null],[3,"NUM","","",null,null],[3,"DENOM","","",null,null],[3,"DEFAULT_ALPHA","","",null,null],[3,"DEFAULT_BETA","","",null,null],[3,"LN_2","","",null,null],[3,"EPSILON","","",null,null],[5,"extrapolated_cum_sum_of_ratio","","Extrapolate the CumSumRatio given two filters.",null,[[["filterestimate",3],["chainepoch",6]],["bigint",3]]],[5,"ln","","The natural log of Q.128 x.",null,[[["bigint",3]],["bigint",3]]],[6,"Map","actor","Map type to be used within actors. The underlying type is…",null,null],[17,"FIRST_NON_SINGLETON_ADDR","","Defines first available ID address after builtin actors",null,null],[17,"SECONDS_IN_HOUR","","",null,null],[17,"SECONDS_IN_DAY","","",null,null],[17,"SECONDS_IN_YEAR","","",null,null],[17,"EPOCHS_IN_HOUR","","",null,null],[17,"EPOCHS_IN_DAY","","",null,null],[17,"EPOCHS_IN_YEAR","","",null,null],[17,"SECTOR_QUALITY_PRECISION","","Precision used for making QA power calculations",null,null],[8,"ActorDowncast","","Trait to allow multiple error types to be able to be…",null,null],[10,"downcast_default","","Downcast a dynamic std Error into an `ActorError`. If the…",138,[[["exitcode",4]],["actorerror",3]]],[10,"downcast_fatal","","Downcast a dynamic std Error into an `ActorError`. If the…",138,[[],["actorerror",3]]],[10,"downcast_wrap","","Wrap the error with a message, without overwriting an exit…",138,[[],[["stderror",8],["box",3]]]],[11,"from","","",139,[[]]],[11,"into","","",139,[[]]],[11,"to_owned","","",139,[[]]],[11,"clone_into","","",139,[[]]],[11,"to_string","","",139,[[],["string",3]]],[11,"borrow","","",139,[[]]],[11,"borrow_mut","","",139,[[]]],[11,"try_from","","",139,[[],["result",4]]],[11,"try_into","","",139,[[],["result",4]]],[11,"type_id","","",139,[[],["typeid",3]]],[11,"vzip","","",139,[[]]],[11,"as_fail","","",139,[[],["fail",8]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"equivalent","","",0,[[]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"equivalent","","",1,[[]]],[11,"vzip","","",1,[[]]],[11,"from","","",140,[[]]],[11,"into","","",140,[[]]],[11,"to_owned","","",140,[[]]],[11,"clone_into","","",140,[[]]],[11,"borrow","","",140,[[]]],[11,"borrow_mut","","",140,[[]]],[11,"try_from","","",140,[[],["result",4]]],[11,"try_into","","",140,[[],["result",4]]],[11,"type_id","","",140,[[],["typeid",3]]],[11,"equivalent","","",140,[[]]],[11,"vzip","","",140,[[]]],[11,"get_hash","","",140,[[]]],[11,"from","","",141,[[]]],[11,"into","","",141,[[]]],[11,"borrow","","",141,[[]]],[11,"borrow_mut","","",141,[[]]],[11,"try_from","","",141,[[],["result",4]]],[11,"try_into","","",141,[[],["result",4]]],[11,"type_id","","",141,[[],["typeid",3]]],[11,"vzip","","",141,[[]]],[11,"from","","",142,[[]]],[11,"into","","",142,[[]]],[11,"borrow","","",142,[[]]],[11,"borrow_mut","","",142,[[]]],[11,"try_from","","",142,[[],["result",4]]],[11,"try_into","","",142,[[],["result",4]]],[11,"type_id","","",142,[[],["typeid",3]]],[11,"vzip","","",142,[[]]],[11,"from","","",143,[[]]],[11,"into","","",143,[[]]],[11,"borrow","","",143,[[]]],[11,"borrow_mut","","",143,[[]]],[11,"try_from","","",143,[[],["result",4]]],[11,"try_into","","",143,[[],["result",4]]],[11,"type_id","","",143,[[],["typeid",3]]],[11,"vzip","","",143,[[]]],[11,"from","","",144,[[]]],[11,"into","","",144,[[]]],[11,"borrow","","",144,[[]]],[11,"borrow_mut","","",144,[[]]],[11,"try_from","","",144,[[],["result",4]]],[11,"try_into","","",144,[[],["result",4]]],[11,"type_id","","",144,[[],["typeid",3]]],[11,"vzip","","",144,[[]]],[11,"from","","",145,[[]]],[11,"into","","",145,[[]]],[11,"borrow","","",145,[[]]],[11,"borrow_mut","","",145,[[]]],[11,"try_from","","",145,[[],["result",4]]],[11,"try_into","","",145,[[],["result",4]]],[11,"type_id","","",145,[[],["typeid",3]]],[11,"vzip","","",145,[[]]],[11,"from","","",146,[[]]],[11,"into","","",146,[[]]],[11,"borrow","","",146,[[]]],[11,"borrow_mut","","",146,[[]]],[11,"try_from","","",146,[[],["result",4]]],[11,"try_into","","",146,[[],["result",4]]],[11,"type_id","","",146,[[],["typeid",3]]],[11,"vzip","","",146,[[]]],[11,"from","","",147,[[]]],[11,"into","","",147,[[]]],[11,"borrow","","",147,[[]]],[11,"borrow_mut","","",147,[[]]],[11,"try_from","","",147,[[],["result",4]]],[11,"try_into","","",147,[[],["result",4]]],[11,"type_id","","",147,[[],["typeid",3]]],[11,"vzip","","",147,[[]]],[11,"from","","",148,[[]]],[11,"into","","",148,[[]]],[11,"borrow","","",148,[[]]],[11,"borrow_mut","","",148,[[]]],[11,"try_from","","",148,[[],["result",4]]],[11,"try_into","","",148,[[],["result",4]]],[11,"type_id","","",148,[[],["typeid",3]]],[11,"vzip","","",148,[[]]],[11,"from","","",149,[[]]],[11,"into","","",149,[[]]],[11,"borrow","","",149,[[]]],[11,"borrow_mut","","",149,[[]]],[11,"try_from","","",149,[[],["result",4]]],[11,"try_into","","",149,[[],["result",4]]],[11,"type_id","","",149,[[],["typeid",3]]],[11,"vzip","","",149,[[]]],[11,"from","","",150,[[]]],[11,"into","","",150,[[]]],[11,"borrow","","",150,[[]]],[11,"borrow_mut","","",150,[[]]],[11,"try_from","","",150,[[],["result",4]]],[11,"try_into","","",150,[[],["result",4]]],[11,"type_id","","",150,[[],["typeid",3]]],[11,"vzip","","",150,[[]]],[11,"from","","",151,[[]]],[11,"into","","",151,[[]]],[11,"borrow","","",151,[[]]],[11,"borrow_mut","","",151,[[]]],[11,"try_from","","",151,[[],["result",4]]],[11,"try_into","","",151,[[],["result",4]]],[11,"type_id","","",151,[[],["typeid",3]]],[11,"vzip","","",151,[[]]],[11,"from","","",152,[[]]],[11,"into","","",152,[[]]],[11,"borrow","","",152,[[]]],[11,"borrow_mut","","",152,[[]]],[11,"try_from","","",152,[[],["result",4]]],[11,"try_into","","",152,[[],["result",4]]],[11,"type_id","","",152,[[],["typeid",3]]],[11,"vzip","","",152,[[]]],[11,"from","","",153,[[]]],[11,"into","","",153,[[]]],[11,"borrow","","",153,[[]]],[11,"borrow_mut","","",153,[[]]],[11,"try_from","","",153,[[],["result",4]]],[11,"try_into","","",153,[[],["result",4]]],[11,"type_id","","",153,[[],["typeid",3]]],[11,"vzip","","",153,[[]]],[11,"from","","",154,[[]]],[11,"into","","",154,[[]]],[11,"borrow","","",154,[[]]],[11,"borrow_mut","","",154,[[]]],[11,"try_from","","",154,[[],["result",4]]],[11,"try_into","","",154,[[],["result",4]]],[11,"type_id","","",154,[[],["typeid",3]]],[11,"vzip","","",154,[[]]],[11,"from","","",155,[[]]],[11,"into","","",155,[[]]],[11,"borrow","","",155,[[]]],[11,"borrow_mut","","",155,[[]]],[11,"try_from","","",155,[[],["result",4]]],[11,"try_into","","",155,[[],["result",4]]],[11,"type_id","","",155,[[],["typeid",3]]],[11,"vzip","","",155,[[]]],[11,"from","","",156,[[]]],[11,"into","","",156,[[]]],[11,"borrow","","",156,[[]]],[11,"borrow_mut","","",156,[[]]],[11,"try_from","","",156,[[],["result",4]]],[11,"try_into","","",156,[[],["result",4]]],[11,"type_id","","",156,[[],["typeid",3]]],[11,"vzip","","",156,[[]]],[11,"from","","",157,[[]]],[11,"into","","",157,[[]]],[11,"borrow","","",157,[[]]],[11,"borrow_mut","","",157,[[]]],[11,"try_from","","",157,[[],["result",4]]],[11,"try_into","","",157,[[],["result",4]]],[11,"type_id","","",157,[[],["typeid",3]]],[11,"vzip","","",157,[[]]],[11,"from","","",158,[[]]],[11,"into","","",158,[[]]],[11,"borrow","","",158,[[]]],[11,"borrow_mut","","",158,[[]]],[11,"try_from","","",158,[[],["result",4]]],[11,"try_into","","",158,[[],["result",4]]],[11,"type_id","","",158,[[],["typeid",3]]],[11,"vzip","","",158,[[]]],[11,"from","","",159,[[]]],[11,"into","","",159,[[]]],[11,"borrow","","",159,[[]]],[11,"borrow_mut","","",159,[[]]],[11,"try_from","","",159,[[],["result",4]]],[11,"try_into","","",159,[[],["result",4]]],[11,"type_id","","",159,[[],["typeid",3]]],[11,"vzip","","",159,[[]]],[11,"from","","",160,[[]]],[11,"into","","",160,[[]]],[11,"borrow","","",160,[[]]],[11,"borrow_mut","","",160,[[]]],[11,"try_from","","",160,[[],["result",4]]],[11,"try_into","","",160,[[],["result",4]]],[11,"type_id","","",160,[[],["typeid",3]]],[11,"vzip","","",160,[[]]],[11,"from","","",161,[[]]],[11,"into","","",161,[[]]],[11,"borrow","","",161,[[]]],[11,"borrow_mut","","",161,[[]]],[11,"try_from","","",161,[[],["result",4]]],[11,"try_into","","",161,[[],["result",4]]],[11,"type_id","","",161,[[],["typeid",3]]],[11,"vzip","","",161,[[]]],[11,"from","","",162,[[]]],[11,"into","","",162,[[]]],[11,"borrow","","",162,[[]]],[11,"borrow_mut","","",162,[[]]],[11,"try_from","","",162,[[],["result",4]]],[11,"try_into","","",162,[[],["result",4]]],[11,"type_id","","",162,[[],["typeid",3]]],[11,"vzip","","",162,[[]]],[11,"from","","",163,[[]]],[11,"into","","",163,[[]]],[11,"borrow","","",163,[[]]],[11,"borrow_mut","","",163,[[]]],[11,"try_from","","",163,[[],["result",4]]],[11,"try_into","","",163,[[],["result",4]]],[11,"type_id","","",163,[[],["typeid",3]]],[11,"vzip","","",163,[[]]],[11,"from","","",164,[[]]],[11,"into","","",164,[[]]],[11,"borrow","","",164,[[]]],[11,"borrow_mut","","",164,[[]]],[11,"try_from","","",164,[[],["result",4]]],[11,"try_into","","",164,[[],["result",4]]],[11,"type_id","","",164,[[],["typeid",3]]],[11,"vzip","","",164,[[]]],[11,"from","","",165,[[]]],[11,"into","","",165,[[]]],[11,"borrow","","",165,[[]]],[11,"borrow_mut","","",165,[[]]],[11,"try_from","","",165,[[],["result",4]]],[11,"try_into","","",165,[[],["result",4]]],[11,"type_id","","",165,[[],["typeid",3]]],[11,"vzip","","",165,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"vzip","","",5,[[]]],[11,"from","","",166,[[]]],[11,"into","","",166,[[]]],[11,"borrow","","",166,[[]]],[11,"borrow_mut","","",166,[[]]],[11,"try_from","","",166,[[],["result",4]]],[11,"try_into","","",166,[[],["result",4]]],[11,"type_id","","",166,[[],["typeid",3]]],[11,"vzip","","",166,[[]]],[11,"from","actor::account","",167,[[]]],[11,"into","","",167,[[]]],[11,"borrow","","",167,[[]]],[11,"borrow_mut","","",167,[[]]],[11,"try_from","","",167,[[],["result",4]]],[11,"try_into","","",167,[[],["result",4]]],[11,"type_id","","",167,[[],["typeid",3]]],[11,"vzip","","",167,[[]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"vzip","","",7,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"vzip","","",6,[[]]],[11,"from","actor::cron","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"vzip","","",10,[[]]],[11,"from","","",168,[[]]],[11,"into","","",168,[[]]],[11,"borrow","","",168,[[]]],[11,"borrow_mut","","",168,[[]]],[11,"try_from","","",168,[[],["result",4]]],[11,"try_into","","",168,[[],["result",4]]],[11,"type_id","","",168,[[],["typeid",3]]],[11,"vzip","","",168,[[]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"vzip","","",11,[[]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"vzip","","",9,[[]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"vzip","","",8,[[]]],[11,"from","actor::init","",169,[[]]],[11,"into","","",169,[[]]],[11,"borrow","","",169,[[]]],[11,"borrow_mut","","",169,[[]]],[11,"try_from","","",169,[[],["result",4]]],[11,"try_into","","",169,[[],["result",4]]],[11,"type_id","","",169,[[],["typeid",3]]],[11,"vzip","","",169,[[]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"vzip","","",16,[[]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"vzip","","",12,[[]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"vzip","","",13,[[]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"vzip","","",14,[[]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"vzip","","",15,[[]]],[11,"from","actor::market","",170,[[]]],[11,"into","","",170,[[]]],[11,"borrow","","",170,[[]]],[11,"borrow_mut","","",170,[[]]],[11,"try_from","","",170,[[],["result",4]]],[11,"try_into","","",170,[[],["result",4]]],[11,"type_id","","",170,[[],["typeid",3]]],[11,"vzip","","",170,[[]]],[11,"from","","",32,[[]]],[11,"into","","",32,[[]]],[11,"borrow","","",32,[[]]],[11,"borrow_mut","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"try_into","","",32,[[],["result",4]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"vzip","","",32,[[]]],[11,"from","","",17,[[]]],[11,"into","","",17,[[]]],[11,"to_owned","","",17,[[]]],[11,"clone_into","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"vzip","","",17,[[]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"to_owned","","",18,[[]]],[11,"clone_into","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"vzip","","",18,[[]]],[11,"from","","",19,[[]]],[11,"into","","",19,[[]]],[11,"to_owned","","",19,[[]]],[11,"clone_into","","",19,[[]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"vzip","","",19,[[]]],[11,"from","","",20,[[]]],[11,"into","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"vzip","","",20,[[]]],[11,"from","","",21,[[]]],[11,"into","","",21,[[]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"vzip","","",21,[[]]],[11,"from","","",22,[[]]],[11,"into","","",22,[[]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"vzip","","",22,[[]]],[11,"from","","",23,[[]]],[11,"into","","",23,[[]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"vzip","","",23,[[]]],[11,"from","","",24,[[]]],[11,"into","","",24,[[]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"vzip","","",24,[[]]],[11,"from","","",25,[[]]],[11,"into","","",25,[[]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"vzip","","",25,[[]]],[11,"from","","",26,[[]]],[11,"into","","",26,[[]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"vzip","","",26,[[]]],[11,"from","","",27,[[]]],[11,"into","","",27,[[]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"vzip","","",27,[[]]],[11,"from","","",28,[[]]],[11,"into","","",28,[[]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"vzip","","",28,[[]]],[11,"from","","",29,[[]]],[11,"into","","",29,[[]]],[11,"borrow","","",29,[[]]],[11,"borrow_mut","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"try_into","","",29,[[],["result",4]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"vzip","","",29,[[]]],[11,"from","","",30,[[]]],[11,"into","","",30,[[]]],[11,"borrow","","",30,[[]]],[11,"borrow_mut","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"try_into","","",30,[[],["result",4]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"vzip","","",30,[[]]],[11,"from","","",31,[[]]],[11,"into","","",31,[[]]],[11,"borrow","","",31,[[]]],[11,"borrow_mut","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"try_into","","",31,[[],["result",4]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"vzip","","",31,[[]]],[11,"from","actor::miner","",171,[[]]],[11,"into","","",171,[[]]],[11,"borrow","","",171,[[]]],[11,"borrow_mut","","",171,[[]]],[11,"try_from","","",171,[[],["result",4]]],[11,"try_into","","",171,[[],["result",4]]],[11,"type_id","","",171,[[],["typeid",3]]],[11,"vzip","","",171,[[]]],[11,"from","","",81,[[]]],[11,"into","","",81,[[]]],[11,"borrow","","",81,[[]]],[11,"borrow_mut","","",81,[[]]],[11,"try_from","","",81,[[],["result",4]]],[11,"try_into","","",81,[[],["result",4]]],[11,"type_id","","",81,[[],["typeid",3]]],[11,"vzip","","",81,[[]]],[11,"from","","",33,[[]]],[11,"into","","",33,[[]]],[11,"borrow","","",33,[[]]],[11,"borrow_mut","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"try_into","","",33,[[],["result",4]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"vzip","","",33,[[]]],[11,"from","","",34,[[]]],[11,"into","","",34,[[]]],[11,"borrow","","",34,[[]]],[11,"borrow_mut","","",34,[[]]],[11,"try_from","","",34,[[],["result",4]]],[11,"try_into","","",34,[[],["result",4]]],[11,"type_id","","",34,[[],["typeid",3]]],[11,"vzip","","",34,[[]]],[11,"from","","",35,[[]]],[11,"into","","",35,[[]]],[11,"borrow","","",35,[[]]],[11,"borrow_mut","","",35,[[]]],[11,"try_from","","",35,[[],["result",4]]],[11,"try_into","","",35,[[],["result",4]]],[11,"type_id","","",35,[[],["typeid",3]]],[11,"vzip","","",35,[[]]],[11,"from","","",36,[[]]],[11,"into","","",36,[[]]],[11,"borrow","","",36,[[]]],[11,"borrow_mut","","",36,[[]]],[11,"try_from","","",36,[[],["result",4]]],[11,"try_into","","",36,[[],["result",4]]],[11,"type_id","","",36,[[],["typeid",3]]],[11,"vzip","","",36,[[]]],[11,"from","","",37,[[]]],[11,"into","","",37,[[]]],[11,"borrow","","",37,[[]]],[11,"borrow_mut","","",37,[[]]],[11,"try_from","","",37,[[],["result",4]]],[11,"try_into","","",37,[[],["result",4]]],[11,"type_id","","",37,[[],["typeid",3]]],[11,"vzip","","",37,[[]]],[11,"from","","",38,[[]]],[11,"into","","",38,[[]]],[11,"to_owned","","",38,[[]]],[11,"clone_into","","",38,[[]]],[11,"borrow","","",38,[[]]],[11,"borrow_mut","","",38,[[]]],[11,"try_from","","",38,[[],["result",4]]],[11,"try_into","","",38,[[],["result",4]]],[11,"type_id","","",38,[[],["typeid",3]]],[11,"vzip","","",38,[[]]],[11,"from","","",39,[[]]],[11,"into","","",39,[[]]],[11,"borrow","","",39,[[]]],[11,"borrow_mut","","",39,[[]]],[11,"try_from","","",39,[[],["result",4]]],[11,"try_into","","",39,[[],["result",4]]],[11,"type_id","","",39,[[],["typeid",3]]],[11,"vzip","","",39,[[]]],[11,"from","","",40,[[]]],[11,"into","","",40,[[]]],[11,"to_owned","","",40,[[]]],[11,"clone_into","","",40,[[]]],[11,"borrow","","",40,[[]]],[11,"borrow_mut","","",40,[[]]],[11,"try_from","","",40,[[],["result",4]]],[11,"try_into","","",40,[[],["result",4]]],[11,"type_id","","",40,[[],["typeid",3]]],[11,"vzip","","",40,[[]]],[11,"from","","",41,[[]]],[11,"into","","",41,[[]]],[11,"to_owned","","",41,[[]]],[11,"clone_into","","",41,[[]]],[11,"borrow","","",41,[[]]],[11,"borrow_mut","","",41,[[]]],[11,"try_from","","",41,[[],["result",4]]],[11,"try_into","","",41,[[],["result",4]]],[11,"type_id","","",41,[[],["typeid",3]]],[11,"equivalent","","",41,[[]]],[11,"vzip","","",41,[[]]],[11,"from","","",42,[[]]],[11,"into","","",42,[[]]],[11,"borrow","","",42,[[]]],[11,"borrow_mut","","",42,[[]]],[11,"try_from","","",42,[[],["result",4]]],[11,"try_into","","",42,[[],["result",4]]],[11,"type_id","","",42,[[],["typeid",3]]],[11,"vzip","","",42,[[]]],[11,"from","","",43,[[]]],[11,"into","","",43,[[]]],[11,"to_owned","","",43,[[]]],[11,"clone_into","","",43,[[]]],[11,"borrow","","",43,[[]]],[11,"borrow_mut","","",43,[[]]],[11,"try_from","","",43,[[],["result",4]]],[11,"try_into","","",43,[[],["result",4]]],[11,"type_id","","",43,[[],["typeid",3]]],[11,"vzip","","",43,[[]]],[11,"from","","",172,[[]]],[11,"into","","",172,[[]]],[11,"borrow","","",172,[[]]],[11,"borrow_mut","","",172,[[]]],[11,"try_from","","",172,[[],["result",4]]],[11,"try_into","","",172,[[],["result",4]]],[11,"type_id","","",172,[[],["typeid",3]]],[11,"vzip","","",172,[[]]],[11,"from","","",173,[[]]],[11,"into","","",173,[[]]],[11,"borrow","","",173,[[]]],[11,"borrow_mut","","",173,[[]]],[11,"try_from","","",173,[[],["result",4]]],[11,"try_into","","",173,[[],["result",4]]],[11,"type_id","","",173,[[],["typeid",3]]],[11,"vzip","","",173,[[]]],[11,"from","","",44,[[]]],[11,"into","","",44,[[]]],[11,"borrow","","",44,[[]]],[11,"borrow_mut","","",44,[[]]],[11,"try_from","","",44,[[],["result",4]]],[11,"try_into","","",44,[[],["result",4]]],[11,"type_id","","",44,[[],["typeid",3]]],[11,"vzip","","",44,[[]]],[11,"from","","",45,[[]]],[11,"into","","",45,[[]]],[11,"borrow","","",45,[[]]],[11,"borrow_mut","","",45,[[]]],[11,"try_from","","",45,[[],["result",4]]],[11,"try_into","","",45,[[],["result",4]]],[11,"type_id","","",45,[[],["typeid",3]]],[11,"vzip","","",45,[[]]],[11,"from","","",46,[[]]],[11,"into","","",46,[[]]],[11,"borrow","","",46,[[]]],[11,"borrow_mut","","",46,[[]]],[11,"try_from","","",46,[[],["result",4]]],[11,"try_into","","",46,[[],["result",4]]],[11,"type_id","","",46,[[],["typeid",3]]],[11,"vzip","","",46,[[]]],[11,"from","","",47,[[]]],[11,"into","","",47,[[]]],[11,"borrow","","",47,[[]]],[11,"borrow_mut","","",47,[[]]],[11,"try_from","","",47,[[],["result",4]]],[11,"try_into","","",47,[[],["result",4]]],[11,"type_id","","",47,[[],["typeid",3]]],[11,"vzip","","",47,[[]]],[11,"from","","",48,[[]]],[11,"into","","",48,[[]]],[11,"borrow","","",48,[[]]],[11,"borrow_mut","","",48,[[]]],[11,"try_from","","",48,[[],["result",4]]],[11,"try_into","","",48,[[],["result",4]]],[11,"type_id","","",48,[[],["typeid",3]]],[11,"vzip","","",48,[[]]],[11,"from","","",49,[[]]],[11,"into","","",49,[[]]],[11,"borrow","","",49,[[]]],[11,"borrow_mut","","",49,[[]]],[11,"try_from","","",49,[[],["result",4]]],[11,"try_into","","",49,[[],["result",4]]],[11,"type_id","","",49,[[],["typeid",3]]],[11,"vzip","","",49,[[]]],[11,"from","","",50,[[]]],[11,"into","","",50,[[]]],[11,"borrow","","",50,[[]]],[11,"borrow_mut","","",50,[[]]],[11,"try_from","","",50,[[],["result",4]]],[11,"try_into","","",50,[[],["result",4]]],[11,"type_id","","",50,[[],["typeid",3]]],[11,"vzip","","",50,[[]]],[11,"from","","",51,[[]]],[11,"into","","",51,[[]]],[11,"borrow","","",51,[[]]],[11,"borrow_mut","","",51,[[]]],[11,"try_from","","",51,[[],["result",4]]],[11,"try_into","","",51,[[],["result",4]]],[11,"type_id","","",51,[[],["typeid",3]]],[11,"vzip","","",51,[[]]],[11,"from","","",52,[[]]],[11,"into","","",52,[[]]],[11,"borrow","","",52,[[]]],[11,"borrow_mut","","",52,[[]]],[11,"try_from","","",52,[[],["result",4]]],[11,"try_into","","",52,[[],["result",4]]],[11,"type_id","","",52,[[],["typeid",3]]],[11,"vzip","","",52,[[]]],[11,"from","","",53,[[]]],[11,"into","","",53,[[]]],[11,"borrow","","",53,[[]]],[11,"borrow_mut","","",53,[[]]],[11,"try_from","","",53,[[],["result",4]]],[11,"try_into","","",53,[[],["result",4]]],[11,"type_id","","",53,[[],["typeid",3]]],[11,"vzip","","",53,[[]]],[11,"from","","",54,[[]]],[11,"into","","",54,[[]]],[11,"borrow","","",54,[[]]],[11,"borrow_mut","","",54,[[]]],[11,"try_from","","",54,[[],["result",4]]],[11,"try_into","","",54,[[],["result",4]]],[11,"type_id","","",54,[[],["typeid",3]]],[11,"vzip","","",54,[[]]],[11,"from","","",55,[[]]],[11,"into","","",55,[[]]],[11,"borrow","","",55,[[]]],[11,"borrow_mut","","",55,[[]]],[11,"try_from","","",55,[[],["result",4]]],[11,"try_into","","",55,[[],["result",4]]],[11,"type_id","","",55,[[],["typeid",3]]],[11,"vzip","","",55,[[]]],[11,"from","","",56,[[]]],[11,"into","","",56,[[]]],[11,"borrow","","",56,[[]]],[11,"borrow_mut","","",56,[[]]],[11,"try_from","","",56,[[],["result",4]]],[11,"try_into","","",56,[[],["result",4]]],[11,"type_id","","",56,[[],["typeid",3]]],[11,"vzip","","",56,[[]]],[11,"from","","",57,[[]]],[11,"into","","",57,[[]]],[11,"borrow","","",57,[[]]],[11,"borrow_mut","","",57,[[]]],[11,"try_from","","",57,[[],["result",4]]],[11,"try_into","","",57,[[],["result",4]]],[11,"type_id","","",57,[[],["typeid",3]]],[11,"vzip","","",57,[[]]],[11,"from","","",58,[[]]],[11,"into","","",58,[[]]],[11,"borrow","","",58,[[]]],[11,"borrow_mut","","",58,[[]]],[11,"try_from","","",58,[[],["result",4]]],[11,"try_into","","",58,[[],["result",4]]],[11,"type_id","","",58,[[],["typeid",3]]],[11,"vzip","","",58,[[]]],[11,"from","","",59,[[]]],[11,"into","","",59,[[]]],[11,"borrow","","",59,[[]]],[11,"borrow_mut","","",59,[[]]],[11,"try_from","","",59,[[],["result",4]]],[11,"try_into","","",59,[[],["result",4]]],[11,"type_id","","",59,[[],["typeid",3]]],[11,"vzip","","",59,[[]]],[11,"from","","",60,[[]]],[11,"into","","",60,[[]]],[11,"borrow","","",60,[[]]],[11,"borrow_mut","","",60,[[]]],[11,"try_from","","",60,[[],["result",4]]],[11,"try_into","","",60,[[],["result",4]]],[11,"type_id","","",60,[[],["typeid",3]]],[11,"vzip","","",60,[[]]],[11,"from","","",61,[[]]],[11,"into","","",61,[[]]],[11,"borrow","","",61,[[]]],[11,"borrow_mut","","",61,[[]]],[11,"try_from","","",61,[[],["result",4]]],[11,"try_into","","",61,[[],["result",4]]],[11,"type_id","","",61,[[],["typeid",3]]],[11,"vzip","","",61,[[]]],[11,"from","","",62,[[]]],[11,"into","","",62,[[]]],[11,"borrow","","",62,[[]]],[11,"borrow_mut","","",62,[[]]],[11,"try_from","","",62,[[],["result",4]]],[11,"try_into","","",62,[[],["result",4]]],[11,"type_id","","",62,[[],["typeid",3]]],[11,"vzip","","",62,[[]]],[11,"from","","",63,[[]]],[11,"into","","",63,[[]]],[11,"borrow","","",63,[[]]],[11,"borrow_mut","","",63,[[]]],[11,"try_from","","",63,[[],["result",4]]],[11,"try_into","","",63,[[],["result",4]]],[11,"type_id","","",63,[[],["typeid",3]]],[11,"vzip","","",63,[[]]],[11,"from","","",64,[[]]],[11,"into","","",64,[[]]],[11,"borrow","","",64,[[]]],[11,"borrow_mut","","",64,[[]]],[11,"try_from","","",64,[[],["result",4]]],[11,"try_into","","",64,[[],["result",4]]],[11,"type_id","","",64,[[],["typeid",3]]],[11,"vzip","","",64,[[]]],[11,"from","","",65,[[]]],[11,"into","","",65,[[]]],[11,"borrow","","",65,[[]]],[11,"borrow_mut","","",65,[[]]],[11,"try_from","","",65,[[],["result",4]]],[11,"try_into","","",65,[[],["result",4]]],[11,"type_id","","",65,[[],["typeid",3]]],[11,"vzip","","",65,[[]]],[11,"from","","",66,[[]]],[11,"into","","",66,[[]]],[11,"borrow","","",66,[[]]],[11,"borrow_mut","","",66,[[]]],[11,"try_from","","",66,[[],["result",4]]],[11,"try_into","","",66,[[],["result",4]]],[11,"type_id","","",66,[[],["typeid",3]]],[11,"vzip","","",66,[[]]],[11,"from","","",67,[[]]],[11,"into","","",67,[[]]],[11,"borrow","","",67,[[]]],[11,"borrow_mut","","",67,[[]]],[11,"try_from","","",67,[[],["result",4]]],[11,"try_into","","",67,[[],["result",4]]],[11,"type_id","","",67,[[],["typeid",3]]],[11,"vzip","","",67,[[]]],[11,"from","","",68,[[]]],[11,"into","","",68,[[]]],[11,"borrow","","",68,[[]]],[11,"borrow_mut","","",68,[[]]],[11,"try_from","","",68,[[],["result",4]]],[11,"try_into","","",68,[[],["result",4]]],[11,"type_id","","",68,[[],["typeid",3]]],[11,"vzip","","",68,[[]]],[11,"from","","",69,[[]]],[11,"into","","",69,[[]]],[11,"borrow","","",69,[[]]],[11,"borrow_mut","","",69,[[]]],[11,"try_from","","",69,[[],["result",4]]],[11,"try_into","","",69,[[],["result",4]]],[11,"type_id","","",69,[[],["typeid",3]]],[11,"vzip","","",69,[[]]],[11,"from","","",70,[[]]],[11,"into","","",70,[[]]],[11,"borrow","","",70,[[]]],[11,"borrow_mut","","",70,[[]]],[11,"try_from","","",70,[[],["result",4]]],[11,"try_into","","",70,[[],["result",4]]],[11,"type_id","","",70,[[],["typeid",3]]],[11,"vzip","","",70,[[]]],[11,"from","","",71,[[]]],[11,"into","","",71,[[]]],[11,"borrow","","",71,[[]]],[11,"borrow_mut","","",71,[[]]],[11,"try_from","","",71,[[],["result",4]]],[11,"try_into","","",71,[[],["result",4]]],[11,"type_id","","",71,[[],["typeid",3]]],[11,"vzip","","",71,[[]]],[11,"from","","",72,[[]]],[11,"into","","",72,[[]]],[11,"borrow","","",72,[[]]],[11,"borrow_mut","","",72,[[]]],[11,"try_from","","",72,[[],["result",4]]],[11,"try_into","","",72,[[],["result",4]]],[11,"type_id","","",72,[[],["typeid",3]]],[11,"vzip","","",72,[[]]],[11,"from","","",73,[[]]],[11,"into","","",73,[[]]],[11,"borrow","","",73,[[]]],[11,"borrow_mut","","",73,[[]]],[11,"try_from","","",73,[[],["result",4]]],[11,"try_into","","",73,[[],["result",4]]],[11,"type_id","","",73,[[],["typeid",3]]],[11,"vzip","","",73,[[]]],[11,"from","","",74,[[]]],[11,"into","","",74,[[]]],[11,"to_owned","","",74,[[]]],[11,"clone_into","","",74,[[]]],[11,"borrow","","",74,[[]]],[11,"borrow_mut","","",74,[[]]],[11,"try_from","","",74,[[],["result",4]]],[11,"try_into","","",74,[[],["result",4]]],[11,"type_id","","",74,[[],["typeid",3]]],[11,"vzip","","",74,[[]]],[11,"from","","",75,[[]]],[11,"into","","",75,[[]]],[11,"to_owned","","",75,[[]]],[11,"clone_into","","",75,[[]]],[11,"borrow","","",75,[[]]],[11,"borrow_mut","","",75,[[]]],[11,"try_from","","",75,[[],["result",4]]],[11,"try_into","","",75,[[],["result",4]]],[11,"type_id","","",75,[[],["typeid",3]]],[11,"vzip","","",75,[[]]],[11,"from","","",76,[[]]],[11,"into","","",76,[[]]],[11,"to_owned","","",76,[[]]],[11,"clone_into","","",76,[[]]],[11,"borrow","","",76,[[]]],[11,"borrow_mut","","",76,[[]]],[11,"try_from","","",76,[[],["result",4]]],[11,"try_into","","",76,[[],["result",4]]],[11,"type_id","","",76,[[],["typeid",3]]],[11,"vzip","","",76,[[]]],[11,"from","","",77,[[]]],[11,"into","","",77,[[]]],[11,"to_owned","","",77,[[]]],[11,"clone_into","","",77,[[]]],[11,"borrow","","",77,[[]]],[11,"borrow_mut","","",77,[[]]],[11,"try_from","","",77,[[],["result",4]]],[11,"try_into","","",77,[[],["result",4]]],[11,"type_id","","",77,[[],["typeid",3]]],[11,"vzip","","",77,[[]]],[11,"from","","",78,[[]]],[11,"into","","",78,[[]]],[11,"to_owned","","",78,[[]]],[11,"clone_into","","",78,[[]]],[11,"borrow","","",78,[[]]],[11,"borrow_mut","","",78,[[]]],[11,"try_from","","",78,[[],["result",4]]],[11,"try_into","","",78,[[],["result",4]]],[11,"type_id","","",78,[[],["typeid",3]]],[11,"vzip","","",78,[[]]],[11,"from","","",79,[[]]],[11,"into","","",79,[[]]],[11,"borrow","","",79,[[]]],[11,"borrow_mut","","",79,[[]]],[11,"try_from","","",79,[[],["result",4]]],[11,"try_into","","",79,[[],["result",4]]],[11,"type_id","","",79,[[],["typeid",3]]],[11,"vzip","","",79,[[]]],[11,"from","","",80,[[]]],[11,"into","","",80,[[]]],[11,"borrow","","",80,[[]]],[11,"borrow_mut","","",80,[[]]],[11,"try_from","","",80,[[],["result",4]]],[11,"try_into","","",80,[[],["result",4]]],[11,"type_id","","",80,[[],["typeid",3]]],[11,"vzip","","",80,[[]]],[11,"from","actor::multisig","",174,[[]]],[11,"into","","",174,[[]]],[11,"borrow","","",174,[[]]],[11,"borrow_mut","","",174,[[]]],[11,"try_from","","",174,[[],["result",4]]],[11,"try_into","","",174,[[],["result",4]]],[11,"type_id","","",174,[[],["typeid",3]]],[11,"vzip","","",174,[[]]],[11,"from","","",95,[[]]],[11,"into","","",95,[[]]],[11,"borrow","","",95,[[]]],[11,"borrow_mut","","",95,[[]]],[11,"try_from","","",95,[[],["result",4]]],[11,"try_into","","",95,[[],["result",4]]],[11,"type_id","","",95,[[],["typeid",3]]],[11,"vzip","","",95,[[]]],[11,"from","","",82,[[]]],[11,"into","","",82,[[]]],[11,"to_owned","","",82,[[]]],[11,"clone_into","","",82,[[]]],[11,"borrow","","",82,[[]]],[11,"borrow_mut","","",82,[[]]],[11,"try_from","","",82,[[],["result",4]]],[11,"try_into","","",82,[[],["result",4]]],[11,"type_id","","",82,[[],["typeid",3]]],[11,"vzip","","",82,[[]]],[11,"from","","",83,[[]]],[11,"into","","",83,[[]]],[11,"to_owned","","",83,[[]]],[11,"clone_into","","",83,[[]]],[11,"borrow","","",83,[[]]],[11,"borrow_mut","","",83,[[]]],[11,"try_from","","",83,[[],["result",4]]],[11,"try_into","","",83,[[],["result",4]]],[11,"type_id","","",83,[[],["typeid",3]]],[11,"vzip","","",83,[[]]],[11,"from","","",84,[[]]],[11,"into","","",84,[[]]],[11,"to_owned","","",84,[[]]],[11,"clone_into","","",84,[[]]],[11,"borrow","","",84,[[]]],[11,"borrow_mut","","",84,[[]]],[11,"try_from","","",84,[[],["result",4]]],[11,"try_into","","",84,[[],["result",4]]],[11,"type_id","","",84,[[],["typeid",3]]],[11,"vzip","","",84,[[]]],[11,"from","","",85,[[]]],[11,"into","","",85,[[]]],[11,"borrow","","",85,[[]]],[11,"borrow_mut","","",85,[[]]],[11,"try_from","","",85,[[],["result",4]]],[11,"try_into","","",85,[[],["result",4]]],[11,"type_id","","",85,[[],["typeid",3]]],[11,"vzip","","",85,[[]]],[11,"from","","",86,[[]]],[11,"into","","",86,[[]]],[11,"borrow","","",86,[[]]],[11,"borrow_mut","","",86,[[]]],[11,"try_from","","",86,[[],["result",4]]],[11,"try_into","","",86,[[],["result",4]]],[11,"type_id","","",86,[[],["typeid",3]]],[11,"vzip","","",86,[[]]],[11,"from","","",87,[[]]],[11,"into","","",87,[[]]],[11,"borrow","","",87,[[]]],[11,"borrow_mut","","",87,[[]]],[11,"try_from","","",87,[[],["result",4]]],[11,"try_into","","",87,[[],["result",4]]],[11,"type_id","","",87,[[],["typeid",3]]],[11,"vzip","","",87,[[]]],[11,"from","","",88,[[]]],[11,"into","","",88,[[]]],[11,"borrow","","",88,[[]]],[11,"borrow_mut","","",88,[[]]],[11,"try_from","","",88,[[],["result",4]]],[11,"try_into","","",88,[[],["result",4]]],[11,"type_id","","",88,[[],["typeid",3]]],[11,"vzip","","",88,[[]]],[11,"from","","",89,[[]]],[11,"into","","",89,[[]]],[11,"borrow","","",89,[[]]],[11,"borrow_mut","","",89,[[]]],[11,"try_from","","",89,[[],["result",4]]],[11,"try_into","","",89,[[],["result",4]]],[11,"type_id","","",89,[[],["typeid",3]]],[11,"vzip","","",89,[[]]],[11,"from","","",90,[[]]],[11,"into","","",90,[[]]],[11,"borrow","","",90,[[]]],[11,"borrow_mut","","",90,[[]]],[11,"try_from","","",90,[[],["result",4]]],[11,"try_into","","",90,[[],["result",4]]],[11,"type_id","","",90,[[],["typeid",3]]],[11,"vzip","","",90,[[]]],[11,"from","","",91,[[]]],[11,"into","","",91,[[]]],[11,"borrow","","",91,[[]]],[11,"borrow_mut","","",91,[[]]],[11,"try_from","","",91,[[],["result",4]]],[11,"try_into","","",91,[[],["result",4]]],[11,"type_id","","",91,[[],["typeid",3]]],[11,"vzip","","",91,[[]]],[11,"from","","",92,[[]]],[11,"into","","",92,[[]]],[11,"borrow","","",92,[[]]],[11,"borrow_mut","","",92,[[]]],[11,"try_from","","",92,[[],["result",4]]],[11,"try_into","","",92,[[],["result",4]]],[11,"type_id","","",92,[[],["typeid",3]]],[11,"vzip","","",92,[[]]],[11,"from","","",93,[[]]],[11,"into","","",93,[[]]],[11,"borrow","","",93,[[]]],[11,"borrow_mut","","",93,[[]]],[11,"try_from","","",93,[[],["result",4]]],[11,"try_into","","",93,[[],["result",4]]],[11,"type_id","","",93,[[],["typeid",3]]],[11,"vzip","","",93,[[]]],[11,"from","","",94,[[]]],[11,"into","","",94,[[]]],[11,"borrow","","",94,[[]]],[11,"borrow_mut","","",94,[[]]],[11,"try_from","","",94,[[],["result",4]]],[11,"try_into","","",94,[[],["result",4]]],[11,"type_id","","",94,[[],["typeid",3]]],[11,"vzip","","",94,[[]]],[11,"from","actor::paych","",175,[[]]],[11,"into","","",175,[[]]],[11,"borrow","","",175,[[]]],[11,"borrow_mut","","",175,[[]]],[11,"try_from","","",175,[[],["result",4]]],[11,"try_into","","",175,[[],["result",4]]],[11,"type_id","","",175,[[],["typeid",3]]],[11,"vzip","","",175,[[]]],[11,"from","","",104,[[]]],[11,"into","","",104,[[]]],[11,"borrow","","",104,[[]]],[11,"borrow_mut","","",104,[[]]],[11,"try_from","","",104,[[],["result",4]]],[11,"try_into","","",104,[[],["result",4]]],[11,"type_id","","",104,[[],["typeid",3]]],[11,"vzip","","",104,[[]]],[11,"from","","",98,[[]]],[11,"into","","",98,[[]]],[11,"borrow","","",98,[[]]],[11,"borrow_mut","","",98,[[]]],[11,"try_from","","",98,[[],["result",4]]],[11,"try_into","","",98,[[],["result",4]]],[11,"type_id","","",98,[[],["typeid",3]]],[11,"vzip","","",98,[[]]],[11,"from","","",96,[[]]],[11,"into","","",96,[[]]],[11,"to_owned","","",96,[[]]],[11,"clone_into","","",96,[[]]],[11,"borrow","","",96,[[]]],[11,"borrow_mut","","",96,[[]]],[11,"try_from","","",96,[[],["result",4]]],[11,"try_into","","",96,[[],["result",4]]],[11,"type_id","","",96,[[],["typeid",3]]],[11,"vzip","","",96,[[]]],[11,"from","","",97,[[]]],[11,"into","","",97,[[]]],[11,"to_owned","","",97,[[]]],[11,"clone_into","","",97,[[]]],[11,"borrow","","",97,[[]]],[11,"borrow_mut","","",97,[[]]],[11,"try_from","","",97,[[],["result",4]]],[11,"try_into","","",97,[[],["result",4]]],[11,"type_id","","",97,[[],["typeid",3]]],[11,"vzip","","",97,[[]]],[11,"from","","",99,[[]]],[11,"into","","",99,[[]]],[11,"borrow","","",99,[[]]],[11,"borrow_mut","","",99,[[]]],[11,"try_from","","",99,[[],["result",4]]],[11,"try_into","","",99,[[],["result",4]]],[11,"type_id","","",99,[[],["typeid",3]]],[11,"vzip","","",99,[[]]],[11,"from","","",100,[[]]],[11,"into","","",100,[[]]],[11,"to_owned","","",100,[[]]],[11,"clone_into","","",100,[[]]],[11,"borrow","","",100,[[]]],[11,"borrow_mut","","",100,[[]]],[11,"try_from","","",100,[[],["result",4]]],[11,"try_into","","",100,[[],["result",4]]],[11,"type_id","","",100,[[],["typeid",3]]],[11,"vzip","","",100,[[]]],[11,"from","","",101,[[]]],[11,"into","","",101,[[]]],[11,"to_owned","","",101,[[]]],[11,"clone_into","","",101,[[]]],[11,"borrow","","",101,[[]]],[11,"borrow_mut","","",101,[[]]],[11,"try_from","","",101,[[],["result",4]]],[11,"try_into","","",101,[[],["result",4]]],[11,"type_id","","",101,[[],["typeid",3]]],[11,"vzip","","",101,[[]]],[11,"from","","",102,[[]]],[11,"into","","",102,[[]]],[11,"borrow","","",102,[[]]],[11,"borrow_mut","","",102,[[]]],[11,"try_from","","",102,[[],["result",4]]],[11,"try_into","","",102,[[],["result",4]]],[11,"type_id","","",102,[[],["typeid",3]]],[11,"vzip","","",102,[[]]],[11,"from","","",103,[[]]],[11,"into","","",103,[[]]],[11,"borrow","","",103,[[]]],[11,"borrow_mut","","",103,[[]]],[11,"try_from","","",103,[[],["result",4]]],[11,"try_into","","",103,[[],["result",4]]],[11,"type_id","","",103,[[],["typeid",3]]],[11,"vzip","","",103,[[]]],[11,"from","actor::power","",176,[[]]],[11,"into","","",176,[[]]],[11,"borrow","","",176,[[]]],[11,"borrow_mut","","",176,[[]]],[11,"try_from","","",176,[[],["result",4]]],[11,"try_into","","",176,[[],["result",4]]],[11,"type_id","","",176,[[],["typeid",3]]],[11,"vzip","","",176,[[]]],[11,"from","","",115,[[]]],[11,"into","","",115,[[]]],[11,"borrow","","",115,[[]]],[11,"borrow_mut","","",115,[[]]],[11,"try_from","","",115,[[],["result",4]]],[11,"try_into","","",115,[[],["result",4]]],[11,"type_id","","",115,[[],["typeid",3]]],[11,"vzip","","",115,[[]]],[11,"from","","",177,[[]]],[11,"into","","",177,[[]]],[11,"borrow","","",177,[[]]],[11,"borrow_mut","","",177,[[]]],[11,"try_from","","",177,[[],["result",4]]],[11,"try_into","","",177,[[],["result",4]]],[11,"type_id","","",177,[[],["typeid",3]]],[11,"vzip","","",177,[[]]],[11,"from","","",105,[[]]],[11,"into","","",105,[[]]],[11,"borrow","","",105,[[]]],[11,"borrow_mut","","",105,[[]]],[11,"try_from","","",105,[[],["result",4]]],[11,"try_into","","",105,[[],["result",4]]],[11,"type_id","","",105,[[],["typeid",3]]],[11,"vzip","","",105,[[]]],[11,"from","","",106,[[]]],[11,"into","","",106,[[]]],[11,"to_owned","","",106,[[]]],[11,"clone_into","","",106,[[]]],[11,"borrow","","",106,[[]]],[11,"borrow_mut","","",106,[[]]],[11,"try_from","","",106,[[],["result",4]]],[11,"try_into","","",106,[[],["result",4]]],[11,"type_id","","",106,[[],["typeid",3]]],[11,"vzip","","",106,[[]]],[11,"from","","",107,[[]]],[11,"into","","",107,[[]]],[11,"to_owned","","",107,[[]]],[11,"clone_into","","",107,[[]]],[11,"borrow","","",107,[[]]],[11,"borrow_mut","","",107,[[]]],[11,"try_from","","",107,[[],["result",4]]],[11,"try_into","","",107,[[],["result",4]]],[11,"type_id","","",107,[[],["typeid",3]]],[11,"vzip","","",107,[[]]],[11,"from","","",108,[[]]],[11,"into","","",108,[[]]],[11,"borrow","","",108,[[]]],[11,"borrow_mut","","",108,[[]]],[11,"try_from","","",108,[[],["result",4]]],[11,"try_into","","",108,[[],["result",4]]],[11,"type_id","","",108,[[],["typeid",3]]],[11,"vzip","","",108,[[]]],[11,"from","","",109,[[]]],[11,"into","","",109,[[]]],[11,"borrow","","",109,[[]]],[11,"borrow_mut","","",109,[[]]],[11,"try_from","","",109,[[],["result",4]]],[11,"try_into","","",109,[[],["result",4]]],[11,"type_id","","",109,[[],["typeid",3]]],[11,"vzip","","",109,[[]]],[11,"from","","",110,[[]]],[11,"into","","",110,[[]]],[11,"borrow","","",110,[[]]],[11,"borrow_mut","","",110,[[]]],[11,"try_from","","",110,[[],["result",4]]],[11,"try_into","","",110,[[],["result",4]]],[11,"type_id","","",110,[[],["typeid",3]]],[11,"vzip","","",110,[[]]],[11,"from","","",111,[[]]],[11,"into","","",111,[[]]],[11,"borrow","","",111,[[]]],[11,"borrow_mut","","",111,[[]]],[11,"try_from","","",111,[[],["result",4]]],[11,"try_into","","",111,[[],["result",4]]],[11,"type_id","","",111,[[],["typeid",3]]],[11,"vzip","","",111,[[]]],[11,"from","","",112,[[]]],[11,"into","","",112,[[]]],[11,"to_owned","","",112,[[]]],[11,"clone_into","","",112,[[]]],[11,"borrow","","",112,[[]]],[11,"borrow_mut","","",112,[[]]],[11,"try_from","","",112,[[],["result",4]]],[11,"try_into","","",112,[[],["result",4]]],[11,"type_id","","",112,[[],["typeid",3]]],[11,"vzip","","",112,[[]]],[11,"from","","",113,[[]]],[11,"into","","",113,[[]]],[11,"borrow","","",113,[[]]],[11,"borrow_mut","","",113,[[]]],[11,"try_from","","",113,[[],["result",4]]],[11,"try_into","","",113,[[],["result",4]]],[11,"type_id","","",113,[[],["typeid",3]]],[11,"vzip","","",113,[[]]],[11,"from","","",114,[[]]],[11,"into","","",114,[[]]],[11,"borrow","","",114,[[]]],[11,"borrow_mut","","",114,[[]]],[11,"try_from","","",114,[[],["result",4]]],[11,"try_into","","",114,[[],["result",4]]],[11,"type_id","","",114,[[],["typeid",3]]],[11,"vzip","","",114,[[]]],[11,"from","actor::reward","",178,[[]]],[11,"into","","",178,[[]]],[11,"borrow","","",178,[[]]],[11,"borrow_mut","","",178,[[]]],[11,"try_from","","",178,[[],["result",4]]],[11,"try_into","","",178,[[],["result",4]]],[11,"type_id","","",178,[[],["typeid",3]]],[11,"vzip","","",178,[[]]],[11,"from","","",121,[[]]],[11,"into","","",121,[[]]],[11,"borrow","","",121,[[]]],[11,"borrow_mut","","",121,[[]]],[11,"try_from","","",121,[[],["result",4]]],[11,"try_into","","",121,[[],["result",4]]],[11,"type_id","","",121,[[],["typeid",3]]],[11,"vzip","","",121,[[]]],[11,"from","","",179,[[]]],[11,"into","","",179,[[]]],[11,"borrow","","",179,[[]]],[11,"borrow_mut","","",179,[[]]],[11,"try_from","","",179,[[],["result",4]]],[11,"try_into","","",179,[[],["result",4]]],[11,"type_id","","",179,[[],["typeid",3]]],[11,"vzip","","",179,[[]]],[11,"from","","",180,[[]]],[11,"into","","",180,[[]]],[11,"borrow","","",180,[[]]],[11,"borrow_mut","","",180,[[]]],[11,"try_from","","",180,[[],["result",4]]],[11,"try_into","","",180,[[],["result",4]]],[11,"type_id","","",180,[[],["typeid",3]]],[11,"vzip","","",180,[[]]],[11,"from","","",181,[[]]],[11,"into","","",181,[[]]],[11,"borrow","","",181,[[]]],[11,"borrow_mut","","",181,[[]]],[11,"try_from","","",181,[[],["result",4]]],[11,"try_into","","",181,[[],["result",4]]],[11,"type_id","","",181,[[],["typeid",3]]],[11,"vzip","","",181,[[]]],[11,"from","","",117,[[]]],[11,"into","","",117,[[]]],[11,"borrow","","",117,[[]]],[11,"borrow_mut","","",117,[[]]],[11,"try_from","","",117,[[],["result",4]]],[11,"try_into","","",117,[[],["result",4]]],[11,"type_id","","",117,[[],["typeid",3]]],[11,"vzip","","",117,[[]]],[11,"from","","",116,[[]]],[11,"into","","",116,[[]]],[11,"to_owned","","",116,[[]]],[11,"clone_into","","",116,[[]]],[11,"borrow","","",116,[[]]],[11,"borrow_mut","","",116,[[]]],[11,"try_from","","",116,[[],["result",4]]],[11,"try_into","","",116,[[],["result",4]]],[11,"type_id","","",116,[[],["typeid",3]]],[11,"vzip","","",116,[[]]],[11,"from","","",120,[[]]],[11,"into","","",120,[[]]],[11,"to_owned","","",120,[[]]],[11,"clone_into","","",120,[[]]],[11,"borrow","","",120,[[]]],[11,"borrow_mut","","",120,[[]]],[11,"try_from","","",120,[[],["result",4]]],[11,"try_into","","",120,[[],["result",4]]],[11,"type_id","","",120,[[],["typeid",3]]],[11,"vzip","","",120,[[]]],[11,"from","","",118,[[]]],[11,"into","","",118,[[]]],[11,"to_owned","","",118,[[]]],[11,"clone_into","","",118,[[]]],[11,"borrow","","",118,[[]]],[11,"borrow_mut","","",118,[[]]],[11,"try_from","","",118,[[],["result",4]]],[11,"try_into","","",118,[[],["result",4]]],[11,"type_id","","",118,[[],["typeid",3]]],[11,"vzip","","",118,[[]]],[11,"from","","",119,[[]]],[11,"into","","",119,[[]]],[11,"to_owned","","",119,[[]]],[11,"clone_into","","",119,[[]]],[11,"borrow","","",119,[[]]],[11,"borrow_mut","","",119,[[]]],[11,"try_from","","",119,[[],["result",4]]],[11,"try_into","","",119,[[],["result",4]]],[11,"type_id","","",119,[[],["typeid",3]]],[11,"vzip","","",119,[[]]],[11,"from","actor::system","",182,[[]]],[11,"into","","",182,[[]]],[11,"borrow","","",182,[[]]],[11,"borrow_mut","","",182,[[]]],[11,"try_from","","",182,[[],["result",4]]],[11,"try_into","","",182,[[],["result",4]]],[11,"type_id","","",182,[[],["typeid",3]]],[11,"vzip","","",182,[[]]],[11,"from","","",183,[[]]],[11,"into","","",183,[[]]],[11,"borrow","","",183,[[]]],[11,"borrow_mut","","",183,[[]]],[11,"try_from","","",183,[[],["result",4]]],[11,"try_into","","",183,[[],["result",4]]],[11,"type_id","","",183,[[],["typeid",3]]],[11,"vzip","","",183,[[]]],[11,"from","","",122,[[]]],[11,"into","","",122,[[]]],[11,"borrow","","",122,[[]]],[11,"borrow_mut","","",122,[[]]],[11,"try_from","","",122,[[],["result",4]]],[11,"try_into","","",122,[[],["result",4]]],[11,"type_id","","",122,[[],["typeid",3]]],[11,"vzip","","",122,[[]]],[11,"from","actor::verifreg","",184,[[]]],[11,"into","","",184,[[]]],[11,"borrow","","",184,[[]]],[11,"borrow_mut","","",184,[[]]],[11,"try_from","","",184,[[],["result",4]]],[11,"try_into","","",184,[[],["result",4]]],[11,"type_id","","",184,[[],["typeid",3]]],[11,"vzip","","",184,[[]]],[11,"from","","",126,[[]]],[11,"into","","",126,[[]]],[11,"borrow","","",126,[[]]],[11,"borrow_mut","","",126,[[]]],[11,"try_from","","",126,[[],["result",4]]],[11,"try_into","","",126,[[],["result",4]]],[11,"type_id","","",126,[[],["typeid",3]]],[11,"vzip","","",126,[[]]],[11,"from","","",123,[[]]],[11,"into","","",123,[[]]],[11,"borrow","","",123,[[]]],[11,"borrow_mut","","",123,[[]]],[11,"try_from","","",123,[[],["result",4]]],[11,"try_into","","",123,[[],["result",4]]],[11,"type_id","","",123,[[],["typeid",3]]],[11,"vzip","","",123,[[]]],[11,"from","","",185,[[]]],[11,"into","","",185,[[]]],[11,"borrow","","",185,[[]]],[11,"borrow_mut","","",185,[[]]],[11,"try_from","","",185,[[],["result",4]]],[11,"try_into","","",185,[[],["result",4]]],[11,"type_id","","",185,[[],["typeid",3]]],[11,"vzip","","",185,[[]]],[11,"from","","",124,[[]]],[11,"into","","",124,[[]]],[11,"to_owned","","",124,[[]]],[11,"clone_into","","",124,[[]]],[11,"borrow","","",124,[[]]],[11,"borrow_mut","","",124,[[]]],[11,"try_from","","",124,[[],["result",4]]],[11,"try_into","","",124,[[],["result",4]]],[11,"type_id","","",124,[[],["typeid",3]]],[11,"equivalent","","",124,[[]]],[11,"vzip","","",124,[[]]],[11,"from","","",125,[[]]],[11,"into","","",125,[[]]],[11,"to_owned","","",125,[[]]],[11,"clone_into","","",125,[[]]],[11,"borrow","","",125,[[]]],[11,"borrow_mut","","",125,[[]]],[11,"try_from","","",125,[[],["result",4]]],[11,"try_into","","",125,[[],["result",4]]],[11,"type_id","","",125,[[],["typeid",3]]],[11,"vzip","","",125,[[]]],[11,"from","actor::chaos","",186,[[]]],[11,"into","","",186,[[]]],[11,"borrow","","",186,[[]]],[11,"borrow_mut","","",186,[[]]],[11,"try_from","","",186,[[],["result",4]]],[11,"try_into","","",186,[[],["result",4]]],[11,"type_id","","",186,[[],["typeid",3]]],[11,"vzip","","",186,[[]]],[11,"from","","",136,[[]]],[11,"into","","",136,[[]]],[11,"borrow","","",136,[[]]],[11,"borrow_mut","","",136,[[]]],[11,"try_from","","",136,[[],["result",4]]],[11,"try_into","","",136,[[],["result",4]]],[11,"type_id","","",136,[[],["typeid",3]]],[11,"vzip","","",136,[[]]],[11,"from","","",127,[[]]],[11,"into","","",127,[[]]],[11,"borrow","","",127,[[]]],[11,"borrow_mut","","",127,[[]]],[11,"try_from","","",127,[[],["result",4]]],[11,"try_into","","",127,[[],["result",4]]],[11,"type_id","","",127,[[],["typeid",3]]],[11,"vzip","","",127,[[]]],[11,"from","","",128,[[]]],[11,"into","","",128,[[]]],[11,"borrow","","",128,[[]]],[11,"borrow_mut","","",128,[[]]],[11,"try_from","","",128,[[],["result",4]]],[11,"try_into","","",128,[[],["result",4]]],[11,"type_id","","",128,[[],["typeid",3]]],[11,"vzip","","",128,[[]]],[11,"from","","",129,[[]]],[11,"into","","",129,[[]]],[11,"borrow","","",129,[[]]],[11,"borrow_mut","","",129,[[]]],[11,"try_from","","",129,[[],["result",4]]],[11,"try_into","","",129,[[],["result",4]]],[11,"type_id","","",129,[[],["typeid",3]]],[11,"vzip","","",129,[[]]],[11,"from","","",130,[[]]],[11,"into","","",130,[[]]],[11,"borrow","","",130,[[]]],[11,"borrow_mut","","",130,[[]]],[11,"try_from","","",130,[[],["result",4]]],[11,"try_into","","",130,[[],["result",4]]],[11,"type_id","","",130,[[],["typeid",3]]],[11,"vzip","","",130,[[]]],[11,"from","","",131,[[]]],[11,"into","","",131,[[]]],[11,"borrow","","",131,[[]]],[11,"borrow_mut","","",131,[[]]],[11,"try_from","","",131,[[],["result",4]]],[11,"try_into","","",131,[[],["result",4]]],[11,"type_id","","",131,[[],["typeid",3]]],[11,"vzip","","",131,[[]]],[11,"from","","",132,[[]]],[11,"into","","",132,[[]]],[11,"borrow","","",132,[[]]],[11,"borrow_mut","","",132,[[]]],[11,"try_from","","",132,[[],["result",4]]],[11,"try_into","","",132,[[],["result",4]]],[11,"type_id","","",132,[[],["typeid",3]]],[11,"vzip","","",132,[[]]],[11,"from","","",133,[[]]],[11,"into","","",133,[[]]],[11,"borrow","","",133,[[]]],[11,"borrow_mut","","",133,[[]]],[11,"try_from","","",133,[[],["result",4]]],[11,"try_into","","",133,[[],["result",4]]],[11,"type_id","","",133,[[],["typeid",3]]],[11,"vzip","","",133,[[]]],[11,"from","","",134,[[]]],[11,"into","","",134,[[]]],[11,"borrow","","",134,[[]]],[11,"borrow_mut","","",134,[[]]],[11,"try_from","","",134,[[],["result",4]]],[11,"try_into","","",134,[[],["result",4]]],[11,"type_id","","",134,[[],["typeid",3]]],[11,"vzip","","",134,[[]]],[11,"from","","",135,[[]]],[11,"into","","",135,[[]]],[11,"borrow","","",135,[[]]],[11,"borrow_mut","","",135,[[]]],[11,"try_from","","",135,[[],["result",4]]],[11,"try_into","","",135,[[],["result",4]]],[11,"type_id","","",135,[[],["typeid",3]]],[11,"vzip","","",135,[[]]],[11,"from","actor::smooth","",137,[[]]],[11,"into","","",137,[[]]],[11,"to_owned","","",137,[[]]],[11,"clone_into","","",137,[[]]],[11,"borrow","","",137,[[]]],[11,"borrow_mut","","",137,[[]]],[11,"try_from","","",137,[[],["result",4]]],[11,"try_into","","",137,[[],["result",4]]],[11,"type_id","","",137,[[],["typeid",3]]],[11,"vzip","","",137,[[]]],[11,"from","","",187,[[]]],[11,"into","","",187,[[]]],[11,"borrow","","",187,[[]]],[11,"borrow_mut","","",187,[[]]],[11,"try_from","","",187,[[],["result",4]]],[11,"try_into","","",187,[[],["result",4]]],[11,"type_id","","",187,[[],["typeid",3]]],[11,"vzip","","",187,[[]]],[11,"from","","",188,[[]]],[11,"into","","",188,[[]]],[11,"borrow","","",188,[[]]],[11,"borrow_mut","","",188,[[]]],[11,"try_from","","",188,[[],["result",4]]],[11,"try_into","","",188,[[],["result",4]]],[11,"type_id","","",188,[[],["typeid",3]]],[11,"vzip","","",188,[[]]],[11,"from","","",189,[[]]],[11,"into","","",189,[[]]],[11,"borrow","","",189,[[]]],[11,"borrow_mut","","",189,[[]]],[11,"try_from","","",189,[[],["result",4]]],[11,"try_into","","",189,[[],["result",4]]],[11,"type_id","","",189,[[],["typeid",3]]],[11,"vzip","","",189,[[]]],[11,"from","","",190,[[]]],[11,"into","","",190,[[]]],[11,"borrow","","",190,[[]]],[11,"borrow_mut","","",190,[[]]],[11,"try_from","","",190,[[],["result",4]]],[11,"try_into","","",190,[[],["result",4]]],[11,"type_id","","",190,[[],["typeid",3]]],[11,"vzip","","",190,[[]]],[11,"from","","",191,[[]]],[11,"into","","",191,[[]]],[11,"borrow","","",191,[[]]],[11,"borrow_mut","","",191,[[]]],[11,"try_from","","",191,[[],["result",4]]],[11,"try_into","","",191,[[],["result",4]]],[11,"type_id","","",191,[[],["typeid",3]]],[11,"vzip","","",191,[[]]],[11,"from","","",192,[[]]],[11,"into","","",192,[[]]],[11,"borrow","","",192,[[]]],[11,"borrow_mut","","",192,[[]]],[11,"try_from","","",192,[[],["result",4]]],[11,"try_into","","",192,[[],["result",4]]],[11,"type_id","","",192,[[],["typeid",3]]],[11,"vzip","","",192,[[]]],[11,"from","","",193,[[]]],[11,"into","","",193,[[]]],[11,"borrow","","",193,[[]]],[11,"borrow_mut","","",193,[[]]],[11,"try_from","","",193,[[],["result",4]]],[11,"try_into","","",193,[[],["result",4]]],[11,"type_id","","",193,[[],["typeid",3]]],[11,"vzip","","",193,[[]]],[11,"from","actor","",139,[[["error",3]],["actorerror",3]]],[11,"from","","",0,[[["actorstatejson",3]],["actorstate",3]]],[11,"from","","",139,[[["error",3]],["actorerror",3]]],[11,"eq","","",1,[[["exitcode",4]]]],[11,"eq","","",139,[[["actorerror",3]]]],[11,"ne","","",139,[[["actorerror",3]]]],[11,"eq","","",0,[[["actorstate",3]]]],[11,"ne","","",0,[[["actorstate",3]]]],[11,"eq","","",140,[[["serialized",3]]]],[11,"ne","","",140,[[["serialized",3]]]],[11,"serialize","","",140,[[],["result",4]]],[11,"serialize","","",0,[[],["result",4]]],[11,"serialize","","",1,[[],["result",4]]],[11,"from_i64","","",1,[[],[["option",4],["exitcode",4]]]],[11,"from_u64","","",1,[[],[["option",4],["exitcode",4]]]],[11,"clone","","",140,[[],["serialized",3]]],[11,"clone","","",1,[[],["exitcode",4]]],[11,"clone","","",139,[[],["actorerror",3]]],[11,"clone","","",0,[[],["actorstate",3]]],[11,"fmt","","",1,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",0,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",140,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",139,[[["formatter",3]],[["error",3],["result",4]]]],[11,"deref","","",140,[[]]],[11,"hash","","",140,[[]]],[11,"deserialize","","",1,[[],[["exitcode",4],["result",4]]]],[11,"deserialize","","",0,[[],[["result",4],["actorstate",3]]]],[11,"deserialize","","",140,[[],[["serialized",3],["result",4]]]],[11,"fmt","","",139,[[["formatter",3]],[["error",3],["result",4]]]],[11,"default","","",140,[[],["serialized",3]]],[11,"from","actor::paych","",103,[[["signedvoucher",3]]]],[11,"clone","actor::cron","",8,[[],["entry",3]]],[11,"clone","","",10,[[],["constructorparams",3]]],[11,"clone","actor::market","",17,[[],["dealproposal",3]]],[11,"clone","","",18,[[],["clientdealproposal",3]]],[11,"clone","","",19,[[],["dealstate",3]]],[11,"clone","actor::miner","",38,[[],["expirationset",3]]],[11,"clone","","",40,[[],["partition",3]]],[11,"clone","","",41,[[],["powerpair",3]]],[11,"clone","","",43,[[],["quantspec",3]]],[11,"clone","","",74,[[],["sectorprecommitinfo",3]]],[11,"clone","","",75,[[],["sectorprecommitonchaininfo",3]]],[11,"clone","","",76,[[],["sectoronchaininfo",3]]],[11,"clone","","",77,[[],["chainsectorinfo",3]]],[11,"clone","","",78,[[],["fault",3]]],[11,"clone","actor::multisig","",82,[[],["state",3]]],[11,"clone","","",83,[[],["txnid",3]]],[11,"clone","","",84,[[],["transaction",3]]],[11,"clone","actor::paych","",96,[[],["lanestate",3]]],[11,"clone","","",97,[[],["merge",3]]],[11,"clone","","",100,[[],["signedvoucher",3]]],[11,"clone","","",101,[[],["modverifyparams",3]]],[11,"clone","actor::power","",106,[[],["claim",3]]],[11,"clone","","",107,[[],["cronevent",3]]],[11,"clone","","",112,[[],["sectorstorageweightdesc",3]]],[11,"clone","actor::reward","",120,[[],["vestingfunction",4]]],[11,"clone","","",116,[[],["reward",3]]],[11,"clone","","",118,[[],["awardblockrewardparams",3]]],[11,"clone","","",119,[[],["thisepochrewardreturn",3]]],[11,"clone","actor::verifreg","",124,[[],["verifierparams",3]]],[11,"clone","","",125,[[],["bytesparams",3]]],[11,"clone","actor::smooth","",137,[[],["filterestimate",3]]],[11,"default","actor::cron","",9,[[],["state",3]]],[11,"default","","",10,[[],["constructorparams",3]]],[11,"default","actor::market","",20,[[],["state",3]]],[11,"default","actor::miner","",37,[[],["deadlineinfo",3]]],[11,"default","","",38,[[],["expirationset",3]]],[11,"default","","",41,[[],["powerpair",3]]],[11,"default","","",172,[[],["deadlinesectormap",3]]],[11,"default","","",173,[[],["partitionsectormap",3]]],[11,"default","","",47,[[],["terminationresult",3]]],[11,"default","","",80,[[],["vestingfunds",3]]],[11,"default","actor::multisig","",83,[[],["txnid",3]]],[11,"default","actor::paych","",96,[[],["lanestate",3]]],[11,"default","","",97,[[],["merge",3]]],[11,"default","actor::power","",105,[[],["state",3]]],[11,"default","","",106,[[],["claim",3]]],[11,"default","actor::reward","",117,[[],["state",3]]],[11,"default","actor::system","",182,[[],["state",3]]],[11,"default","actor::chaos","",127,[[],["state",3]]],[11,"default","actor::smooth","",137,[[],["filterestimate",3]]],[11,"eq","actor::cron","",8,[[["entry",3]]]],[11,"ne","","",8,[[["entry",3]]]],[11,"eq","","",10,[[["constructorparams",3]]]],[11,"ne","","",10,[[["constructorparams",3]]]],[11,"eq","actor::market","",17,[[["dealproposal",3]]]],[11,"ne","","",17,[[["dealproposal",3]]]],[11,"eq","","",18,[[["clientdealproposal",3]]]],[11,"ne","","",18,[[["clientdealproposal",3]]]],[11,"eq","","",19,[[["dealstate",3]]]],[11,"ne","","",19,[[["dealstate",3]]]],[11,"eq","actor::miner","",37,[[["deadlineinfo",3]]]],[11,"ne","","",37,[[["deadlineinfo",3]]]],[11,"eq","","",41,[[["powerpair",3]]]],[11,"ne","","",41,[[["powerpair",3]]]],[11,"eq","","",46,[[["minerinfo",3]]]],[11,"ne","","",46,[[["minerinfo",3]]]],[11,"eq","","",73,[[["workerkeychange",3]]]],[11,"ne","","",73,[[["workerkeychange",3]]]],[11,"eq","","",74,[[["sectorprecommitinfo",3]]]],[11,"ne","","",74,[[["sectorprecommitinfo",3]]]],[11,"eq","","",75,[[["sectorprecommitonchaininfo",3]]]],[11,"ne","","",75,[[["sectorprecommitonchaininfo",3]]]],[11,"eq","","",76,[[["sectoronchaininfo",3]]]],[11,"ne","","",76,[[["sectoronchaininfo",3]]]],[11,"eq","","",77,[[["chainsectorinfo",3]]]],[11,"ne","","",77,[[["chainsectorinfo",3]]]],[11,"eq","","",78,[[["fault",3]]]],[11,"ne","","",78,[[["fault",3]]]],[11,"eq","actor::multisig","",84,[[["transaction",3]]]],[11,"ne","","",84,[[["transaction",3]]]],[11,"eq","actor::paych","",96,[[["lanestate",3]]]],[11,"ne","","",96,[[["lanestate",3]]]],[11,"eq","","",97,[[["merge",3]]]],[11,"ne","","",97,[[["merge",3]]]],[11,"eq","","",100,[[["signedvoucher",3]]]],[11,"ne","","",100,[[["signedvoucher",3]]]],[11,"eq","","",101,[[["modverifyparams",3]]]],[11,"ne","","",101,[[["modverifyparams",3]]]],[11,"eq","actor::reward","",120,[[["vestingfunction",4]]]],[11,"eq","","",116,[[["reward",3]]]],[11,"ne","","",116,[[["reward",3]]]],[11,"eq","","",118,[[["awardblockrewardparams",3]]]],[11,"ne","","",118,[[["awardblockrewardparams",3]]]],[11,"eq","","",119,[[["thisepochrewardreturn",3]]]],[11,"ne","","",119,[[["thisepochrewardreturn",3]]]],[11,"eq","actor::verifreg","",124,[[["verifierparams",3]]]],[11,"ne","","",124,[[["verifierparams",3]]]],[11,"eq","","",125,[[["bytesparams",3]]]],[11,"ne","","",125,[[["bytesparams",3]]]],[11,"eq","actor","",4,[[]]],[11,"eq","actor::smooth","",137,[[["filterestimate",3]]]],[11,"ne","","",137,[[["filterestimate",3]]]],[11,"deref","actor","",141,[[],["cid",3]]],[11,"deref","","",142,[[],["cid",3]]],[11,"deref","","",143,[[],["cid",3]]],[11,"deref","","",144,[[],["cid",3]]],[11,"deref","","",145,[[],["cid",3]]],[11,"deref","","",146,[[],["cid",3]]],[11,"deref","","",147,[[],["cid",3]]],[11,"deref","","",148,[[],["cid",3]]],[11,"deref","","",149,[[],["cid",3]]],[11,"deref","","",150,[[],["cid",3]]],[11,"deref","","",151,[[],["cid",3]]],[11,"deref","","",152,[[],["cid",3]]],[11,"deref","","",153,[[]]],[11,"deref","","",163,[[],["bigint",3]]],[11,"deref","","",164,[[],["bigint",3]]],[11,"deref","","",165,[[],["bigint",3]]],[11,"deref","actor::power","",177,[[],["storagepower",6]]],[11,"deref","actor::reward","",179,[[],["storagepower",6]]],[11,"deref","","",180,[[],["storagepower",6]]],[11,"deref","","",181,[[],["storagepower",6]]],[11,"deref","actor","",154,[[],["address",3]]],[11,"deref","","",155,[[],["address",3]]],[11,"deref","","",156,[[],["address",3]]],[11,"deref","","",157,[[],["address",3]]],[11,"deref","","",158,[[],["address",3]]],[11,"deref","","",159,[[],["address",3]]],[11,"deref","","",160,[[],["address",3]]],[11,"deref","","",161,[[],["address",3]]],[11,"deref","","",162,[[],["address",3]]],[11,"deref","actor::verifreg","",185,[[],["storagepower",6]]],[11,"deref","actor::smooth","",188,[[],["vec",3]]],[11,"deref","","",189,[[],["vec",3]]],[11,"deref","","",190,[[],["bigint",3]]],[11,"deref","","",191,[[],["bigint",3]]],[11,"deref","","",192,[[],["bigint",3]]],[11,"deref","","",193,[[],["bigint",3]]],[11,"deref","actor","",166,[[],["tokenamount",6]]],[11,"fmt","actor::cron","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","actor::market","",17,[[["formatter",3]],["result",6]]],[11,"fmt","","",18,[[["formatter",3]],["result",6]]],[11,"fmt","","",19,[[["formatter",3]],["result",6]]],[11,"fmt","actor::miner","",37,[[["formatter",3]],["result",6]]],[11,"fmt","","",38,[[["formatter",3]],["result",6]]],[11,"fmt","","",41,[[["formatter",3]],["result",6]]],[11,"fmt","","",46,[[["formatter",3]],["result",6]]],[11,"fmt","","",50,[[["formatter",3]],["result",6]]],[11,"fmt","","",73,[[["formatter",3]],["result",6]]],[11,"fmt","","",74,[[["formatter",3]],["result",6]]],[11,"fmt","","",75,[[["formatter",3]],["result",6]]],[11,"fmt","","",76,[[["formatter",3]],["result",6]]],[11,"fmt","","",77,[[["formatter",3]],["result",6]]],[11,"fmt","","",78,[[["formatter",3]],["result",6]]],[11,"fmt","actor::multisig","",83,[[["formatter",3]],["result",6]]],[11,"fmt","","",84,[[["formatter",3]],["result",6]]],[11,"fmt","","",85,[[["formatter",3]],["result",6]]],[11,"fmt","actor::paych","",98,[[["formatter",3]],["result",6]]],[11,"fmt","","",96,[[["formatter",3]],["result",6]]],[11,"fmt","","",97,[[["formatter",3]],["result",6]]],[11,"fmt","","",100,[[["formatter",3]],["result",6]]],[11,"fmt","","",101,[[["formatter",3]],["result",6]]],[11,"fmt","actor::power","",106,[[["formatter",3]],["result",6]]],[11,"fmt","","",107,[[["formatter",3]],["result",6]]],[11,"fmt","actor::reward","",120,[[["formatter",3]],["result",6]]],[11,"fmt","","",116,[[["formatter",3]],["result",6]]],[11,"fmt","","",118,[[["formatter",3]],["result",6]]],[11,"fmt","","",119,[[["formatter",3]],["result",6]]],[11,"fmt","actor::verifreg","",124,[[["formatter",3]],["result",6]]],[11,"fmt","","",125,[[["formatter",3]],["result",6]]],[11,"fmt","actor","",4,[[["formatter",3]],["result",6]]],[11,"fmt","actor::smooth","",137,[[["formatter",3]],["result",6]]],[11,"neg","actor::miner","",41,[[]]],[11,"add_assign","","",41,[[]]],[11,"add_assign","","",47,[[]]],[11,"sub_assign","","",41,[[]]],[11,"initialize","actor","",141,[[]]],[11,"initialize","","",142,[[]]],[11,"initialize","","",143,[[]]],[11,"initialize","","",144,[[]]],[11,"initialize","","",145,[[]]],[11,"initialize","","",146,[[]]],[11,"initialize","","",147,[[]]],[11,"initialize","","",148,[[]]],[11,"initialize","","",149,[[]]],[11,"initialize","","",150,[[]]],[11,"initialize","","",151,[[]]],[11,"initialize","","",152,[[]]],[11,"initialize","","",153,[[]]],[11,"initialize","","",163,[[]]],[11,"initialize","","",164,[[]]],[11,"initialize","","",165,[[]]],[11,"initialize","actor::power","",177,[[]]],[11,"initialize","actor::reward","",179,[[]]],[11,"initialize","","",180,[[]]],[11,"initialize","","",181,[[]]],[11,"initialize","actor","",154,[[]]],[11,"initialize","","",155,[[]]],[11,"initialize","","",156,[[]]],[11,"initialize","","",157,[[]]],[11,"initialize","","",158,[[]]],[11,"initialize","","",159,[[]]],[11,"initialize","","",160,[[]]],[11,"initialize","","",161,[[]]],[11,"initialize","","",162,[[]]],[11,"initialize","actor::verifreg","",185,[[]]],[11,"initialize","actor::smooth","",188,[[]]],[11,"initialize","","",189,[[]]],[11,"initialize","","",190,[[]]],[11,"initialize","","",191,[[]]],[11,"initialize","","",192,[[]]],[11,"initialize","","",193,[[]]],[11,"initialize","actor","",166,[[]]],[11,"serialize","actor::account","",6,[[],["result",4]]],[11,"serialize","actor::cron","",9,[[],["result",4]]],[11,"serialize","","",8,[[],["result",4]]],[11,"serialize","","",10,[[],["result",4]]],[11,"serialize","actor::init","",12,[[],["result",4]]],[11,"serialize","","",13,[[],["result",4]]],[11,"serialize","","",14,[[],["result",4]]],[11,"serialize","","",15,[[],["result",4]]],[11,"serialize","actor::market","",17,[[],["result",4]]],[11,"serialize","","",18,[[],["result",4]]],[11,"serialize","","",19,[[],["result",4]]],[11,"serialize","","",20,[[],["result",4]]],[11,"serialize","","",21,[[],["result",4]]],[11,"serialize","","",22,[[],["result",4]]],[11,"serialize","","",23,[[],["result",4]]],[11,"serialize","","",24,[[],["result",4]]],[11,"serialize","","",25,[[],["result",4]]],[11,"serialize","","",26,[[],["result",4]]],[11,"serialize","","",27,[[],["result",4]]],[11,"serialize","","",28,[[],["result",4]]],[11,"serialize","","",29,[[],["result",4]]],[11,"serialize","","",30,[[],["result",4]]],[11,"serialize","","",31,[[],["result",4]]],[11,"serialize","actor::miner","",34,[[],["result",4]]],[11,"serialize","","",35,[[],["result",4]]],[11,"serialize","","",37,[[],["result",4]]],[11,"serialize","","",38,[[],["result",4]]],[11,"serialize","","",40,[[],["result",4]]],[11,"serialize","","",41,[[],["result",4]]],[11,"serialize","","",45,[[],["result",4]]],[11,"serialize","","",46,[[],["result",4]]],[11,"serialize","","",48,[[],["result",4]]],[11,"serialize","","",49,[[],["result",4]]],[11,"serialize","","",51,[[],["result",4]]],[11,"serialize","","",52,[[],["result",4]]],[11,"serialize","","",53,[[],["result",4]]],[11,"serialize","","",54,[[],["result",4]]],[11,"serialize","","",55,[[],["result",4]]],[11,"serialize","","",56,[[],["result",4]]],[11,"serialize","","",57,[[],["result",4]]],[11,"serialize","","",58,[[],["result",4]]],[11,"serialize","","",59,[[],["result",4]]],[11,"serialize","","",60,[[],["result",4]]],[11,"serialize","","",61,[[],["result",4]]],[11,"serialize","","",62,[[],["result",4]]],[11,"serialize","","",63,[[],["result",4]]],[11,"serialize","","",64,[[],["result",4]]],[11,"serialize","","",65,[[],["result",4]]],[11,"serialize","","",66,[[],["result",4]]],[11,"serialize","","",67,[[],["result",4]]],[11,"serialize","","",68,[[],["result",4]]],[11,"serialize","","",69,[[],["result",4]]],[11,"serialize","","",70,[[],["result",4]]],[11,"serialize","","",71,[[],["result",4]]],[11,"serialize","","",72,[[],["result",4]]],[11,"serialize","","",73,[[],["result",4]]],[11,"serialize","","",74,[[],["result",4]]],[11,"serialize","","",75,[[],["result",4]]],[11,"serialize","","",76,[[],["result",4]]],[11,"serialize","","",77,[[],["result",4]]],[11,"serialize","","",78,[[],["result",4]]],[11,"serialize","","",79,[[],["result",4]]],[11,"serialize","","",80,[[],["result",4]]],[11,"serialize","actor::multisig","",82,[[],["result",4]]],[11,"serialize","","",83,[[],["result",4]]],[11,"serialize","","",84,[[],["result",4]]],[11,"serialize","","",85,[[],["result",4]]],[11,"serialize","","",86,[[],["result",4]]],[11,"serialize","","",87,[[],["result",4]]],[11,"serialize","","",88,[[],["result",4]]],[11,"serialize","","",89,[[],["result",4]]],[11,"serialize","","",90,[[],["result",4]]],[11,"serialize","","",91,[[],["result",4]]],[11,"serialize","","",92,[[],["result",4]]],[11,"serialize","","",93,[[],["result",4]]],[11,"serialize","","",94,[[],["result",4]]],[11,"serialize","actor::paych","",98,[[],["result",4]]],[11,"serialize","","",96,[[],["result",4]]],[11,"serialize","","",97,[[],["result",4]]],[11,"serialize","","",99,[[],["result",4]]],[11,"serialize","","",100,[[],["result",4]]],[11,"serialize","","",101,[[],["result",4]]],[11,"serialize","","",102,[[],["result",4]]],[11,"serialize","","",103,[[],["result",4]]],[11,"serialize","actor::power","",105,[[],["result",4]]],[11,"serialize","","",106,[[],["result",4]]],[11,"serialize","","",107,[[],["result",4]]],[11,"serialize","","",108,[[],["result",4]]],[11,"serialize","","",109,[[],["result",4]]],[11,"serialize","","",110,[[],["result",4]]],[11,"serialize","","",111,[[],["result",4]]],[11,"serialize","","",112,[[],["result",4]]],[11,"serialize","","",113,[[],["result",4]]],[11,"serialize","","",114,[[],["result",4]]],[11,"serialize","actor::reward","",117,[[],["result",4]]],[11,"serialize","","",120,[[],["result",4]]],[11,"serialize","","",116,[[],["result",4]]],[11,"serialize","","",118,[[],["result",4]]],[11,"serialize","","",119,[[],["result",4]]],[11,"serialize","actor::system","",182,[[],["result",4]]],[11,"serialize","actor::verifreg","",123,[[],["result",4]]],[11,"serialize","","",124,[[],["result",4]]],[11,"serialize","","",125,[[],["result",4]]],[11,"serialize","actor::chaos","",127,[[],["result",4]]],[11,"serialize","","",128,[[],["result",4]]],[11,"serialize","","",129,[[],["result",4]]],[11,"serialize","","",130,[[],["result",4]]],[11,"serialize","","",131,[[],["result",4]]],[11,"serialize","","",132,[[],["result",4]]],[11,"serialize","","",133,[[],["result",4]]],[11,"serialize","","",134,[[],["result",4]]],[11,"serialize","","",135,[[],["result",4]]],[11,"serialize","actor::smooth","",137,[[],["result",4]]],[11,"deserialize","actor::account","",6,[[],["result",4]]],[11,"deserialize","actor::cron","",9,[[],["result",4]]],[11,"deserialize","","",8,[[],["result",4]]],[11,"deserialize","","",10,[[],["result",4]]],[11,"deserialize","actor::init","",12,[[],["result",4]]],[11,"deserialize","","",13,[[],["result",4]]],[11,"deserialize","","",14,[[],["result",4]]],[11,"deserialize","","",15,[[],["result",4]]],[11,"deserialize","actor::market","",17,[[],["result",4]]],[11,"deserialize","","",18,[[],["result",4]]],[11,"deserialize","","",19,[[],["result",4]]],[11,"deserialize","","",20,[[],["result",4]]],[11,"deserialize","","",21,[[],["result",4]]],[11,"deserialize","","",22,[[],["result",4]]],[11,"deserialize","","",24,[[],["result",4]]],[11,"deserialize","","",25,[[],["result",4]]],[11,"deserialize","","",26,[[],["result",4]]],[11,"deserialize","","",28,[[],["result",4]]],[11,"deserialize","","",29,[[],["result",4]]],[11,"deserialize","","",30,[[],["result",4]]],[11,"deserialize","actor::miner","",34,[[],["result",4]]],[11,"deserialize","","",35,[[],["result",4]]],[11,"deserialize","","",37,[[],["result",4]]],[11,"deserialize","","",38,[[],["result",4]]],[11,"deserialize","","",40,[[],["result",4]]],[11,"deserialize","","",41,[[],["result",4]]],[11,"deserialize","","",45,[[],["result",4]]],[11,"deserialize","","",46,[[],["result",4]]],[11,"deserialize","","",48,[[],["result",4]]],[11,"deserialize","","",49,[[],["result",4]]],[11,"deserialize","","",51,[[],["result",4]]],[11,"deserialize","","",52,[[],["result",4]]],[11,"deserialize","","",53,[[],["result",4]]],[11,"deserialize","","",54,[[],["result",4]]],[11,"deserialize","","",55,[[],["result",4]]],[11,"deserialize","","",56,[[],["result",4]]],[11,"deserialize","","",57,[[],["result",4]]],[11,"deserialize","","",58,[[],["result",4]]],[11,"deserialize","","",59,[[],["result",4]]],[11,"deserialize","","",60,[[],["result",4]]],[11,"deserialize","","",61,[[],["result",4]]],[11,"deserialize","","",62,[[],["result",4]]],[11,"deserialize","","",63,[[],["result",4]]],[11,"deserialize","","",64,[[],["result",4]]],[11,"deserialize","","",65,[[],["result",4]]],[11,"deserialize","","",66,[[],["result",4]]],[11,"deserialize","","",67,[[],["result",4]]],[11,"deserialize","","",68,[[],["result",4]]],[11,"deserialize","","",69,[[],["result",4]]],[11,"deserialize","","",70,[[],["result",4]]],[11,"deserialize","","",71,[[],["result",4]]],[11,"deserialize","","",72,[[],["result",4]]],[11,"deserialize","","",73,[[],["result",4]]],[11,"deserialize","","",74,[[],["result",4]]],[11,"deserialize","","",75,[[],["result",4]]],[11,"deserialize","","",76,[[],["result",4]]],[11,"deserialize","","",77,[[],["result",4]]],[11,"deserialize","","",78,[[],["result",4]]],[11,"deserialize","","",79,[[],["result",4]]],[11,"deserialize","","",80,[[],["result",4]]],[11,"deserialize","actor::multisig","",82,[[],["result",4]]],[11,"deserialize","","",83,[[],["result",4]]],[11,"deserialize","","",84,[[],["result",4]]],[11,"deserialize","","",86,[[],["result",4]]],[11,"deserialize","","",87,[[],["result",4]]],[11,"deserialize","","",88,[[],["result",4]]],[11,"deserialize","","",89,[[],["result",4]]],[11,"deserialize","","",90,[[],["result",4]]],[11,"deserialize","","",91,[[],["result",4]]],[11,"deserialize","","",92,[[],["result",4]]],[11,"deserialize","","",93,[[],["result",4]]],[11,"deserialize","","",94,[[],["result",4]]],[11,"deserialize","actor::paych","",98,[[],["result",4]]],[11,"deserialize","","",96,[[],["result",4]]],[11,"deserialize","","",97,[[],["result",4]]],[11,"deserialize","","",99,[[],["result",4]]],[11,"deserialize","","",100,[[],["result",4]]],[11,"deserialize","","",101,[[],["result",4]]],[11,"deserialize","","",102,[[],["result",4]]],[11,"deserialize","","",103,[[],["result",4]]],[11,"deserialize","actor::power","",105,[[],["result",4]]],[11,"deserialize","","",106,[[],["result",4]]],[11,"deserialize","","",107,[[],["result",4]]],[11,"deserialize","","",108,[[],["result",4]]],[11,"deserialize","","",109,[[],["result",4]]],[11,"deserialize","","",110,[[],["result",4]]],[11,"deserialize","","",111,[[],["result",4]]],[11,"deserialize","","",112,[[],["result",4]]],[11,"deserialize","","",113,[[],["result",4]]],[11,"deserialize","","",114,[[],["result",4]]],[11,"deserialize","actor::reward","",117,[[],["result",4]]],[11,"deserialize","","",120,[[],["result",4]]],[11,"deserialize","","",116,[[],["result",4]]],[11,"deserialize","","",118,[[],["result",4]]],[11,"deserialize","","",119,[[],["result",4]]],[11,"deserialize","actor::system","",182,[[],["result",4]]],[11,"deserialize","actor::verifreg","",123,[[],["result",4]]],[11,"deserialize","","",124,[[],["result",4]]],[11,"deserialize","","",125,[[],["result",4]]],[11,"deserialize","actor::chaos","",127,[[],["result",4]]],[11,"deserialize","","",128,[[],["result",4]]],[11,"deserialize","","",129,[[],["result",4]]],[11,"deserialize","","",130,[[],["result",4]]],[11,"deserialize","","",131,[[],["result",4]]],[11,"deserialize","","",132,[[],["result",4]]],[11,"deserialize","","",133,[[],["result",4]]],[11,"deserialize","","",134,[[],["result",4]]],[11,"deserialize","","",135,[[],["result",4]]],[11,"deserialize","actor::smooth","",137,[[],["result",4]]],[11,"from_i64","actor::account","",7,[[],["option",4]]],[11,"from_u64","","",7,[[],["option",4]]],[11,"from_i64","actor::cron","",11,[[],["option",4]]],[11,"from_u64","","",11,[[],["option",4]]],[11,"from_i64","actor::init","",16,[[],["option",4]]],[11,"from_u64","","",16,[[],["option",4]]],[11,"from_i64","actor::market","",32,[[],["option",4]]],[11,"from_u64","","",32,[[],["option",4]]],[11,"from_i64","actor::miner","",81,[[],["option",4]]],[11,"from_u64","","",81,[[],["option",4]]],[11,"from_i64","actor::multisig","",95,[[],["option",4]]],[11,"from_u64","","",95,[[],["option",4]]],[11,"from_i64","actor::paych","",104,[[],["option",4]]],[11,"from_u64","","",104,[[],["option",4]]],[11,"from_i64","actor::power","",115,[[],["option",4]]],[11,"from_u64","","",115,[[],["option",4]]],[11,"from_i64","actor::reward","",120,[[],["option",4]]],[11,"from_u64","","",120,[[],["option",4]]],[11,"from_i64","","",121,[[],["option",4]]],[11,"from_u64","","",121,[[],["option",4]]],[11,"from_i64","actor::system","",122,[[],["option",4]]],[11,"from_u64","","",122,[[],["option",4]]],[11,"from_i64","actor::verifreg","",126,[[],["option",4]]],[11,"from_u64","","",126,[[],["option",4]]],[11,"from_i64","actor::chaos","",136,[[],["option",4]]],[11,"from_u64","","",136,[[],["option",4]]],[11,"invoke_method","actor::account","",167,[[["serialized",3],["methodnum",6]],[["serialized",3],["actorerror",3],["result",4]]]],[11,"invoke_method","actor::cron","",168,[[["serialized",3],["methodnum",6]],[["serialized",3],["actorerror",3],["result",4]]]],[11,"invoke_method","actor::init","",169,[[["serialized",3],["methodnum",6]],[["serialized",3],["actorerror",3],["result",4]]]],[11,"invoke_method","actor::market","",170,[[["serialized",3],["methodnum",6]],[["serialized",3],["actorerror",3],["result",4]]]],[11,"invoke_method","actor::miner","",171,[[["serialized",3],["methodnum",6]],[["serialized",3],["actorerror",3],["result",4]]]],[11,"invoke_method","actor::multisig","",174,[[["serialized",3],["methodnum",6]],[["serialized",3],["actorerror",3],["result",4]]]],[11,"invoke_method","actor::paych","",175,[[["serialized",3],["methodnum",6]],[["serialized",3],["actorerror",3],["result",4]]]],[11,"invoke_method","actor::power","",176,[[["serialized",3],["methodnum",6]],[["serialized",3],["actorerror",3],["result",4]]]],[11,"invoke_method","actor::reward","",178,[[["serialized",3],["methodnum",6]],[["serialized",3],["actorerror",3],["result",4]]]],[11,"invoke_method","actor::system","",183,[[["serialized",3],["methodnum",6]],[["serialized",3],["actorerror",3],["result",4]]]],[11,"invoke_method","actor::verifreg","",184,[[["serialized",3],["methodnum",6]],[["serialized",3],["actorerror",3],["result",4]]]],[11,"invoke_method","actor::chaos","",186,[[["serialized",3],["methodnum",6]],[["serialized",3],["actorerror",3],["result",4]]]],[11,"new","actor","",139,[[["exitcode",4],["string",3]],["actorerror",3]]],[11,"new_fatal","","",139,[[["string",3]],["actorerror",3]]],[11,"is_fatal","","Returns true if error is fatal.",139,[[]]],[11,"exit_code","","Returns the exit code of the error.",139,[[],["exitcode",4]]],[11,"is_ok","","Returns true when the exit code is `Ok`.",139,[[]]],[11,"msg","","Error message of the actor error.",139,[[]]],[11,"wrap","","Prefix error message with a string message.",139,[[],["actorerror",3]]],[11,"new","","Constructor for actor state",0,[[["bigint",3],["cid",3]],["actorstate",3]]],[11,"deduct_funds","","Safely deducts funds from an Actor",0,[[["bigint",3]],[["result",4],["string",3]]]],[11,"deposit_funds","","Deposits funds to an Actor",0,[[["bigint",3]]]],[11,"is_success","","returns true if the exit code was a success",1,[[]]],[11,"new","","Constructor if data is encoded already",140,[[["vec",3]],["serialized",3]]],[11,"serialize","","Contructor for encoding Cbor encodable structure",140,[[],[["result",4],["error",3],["serialized",3]]]],[11,"bytes","","Returns serialized bytes",140,[[]]],[11,"deserialize","","Deserializes into a defined type",140,[[],[["result",4],["error",3]]]],[11,"constructor","actor::account","Constructor for Account actor",167,[[["address",3]],[["actorerror",3],["result",4]]]],[11,"pubkey_address","","",167,[[],[["result",4],["actorerror",3],["address",3]]]],[11,"new","actor::init","",12,[[["cid",3],["string",3]]]],[11,"map_address_to_new_id","","Allocates a new ID address and stores a mapping of the…",12,[[["address",3]],[["hamterror",4],["result",4],["address",3]]]],[11,"resolve_address","","ResolveAddress resolves an address to an ID-address, if…",12,[[["address",3]],[["box",3],["result",4],["option",4]]]],[11,"constructor","","Init actor constructor",169,[[["constructorparams",3]],[["actorerror",3],["result",4]]]],[11,"exec","","Exec init actor",169,[[["execparams",3]],[["execreturn",3],["actorerror",3],["result",4]]]],[11,"duration","actor::market","",17,[[],["chainepoch",6]]],[11,"weight","","Computes weight for a deal proposal, which is a function…",17,[[],["bigint",3]]],[11,"total_storage_fee","","",17,[[],["tokenamount",6]]],[11,"client_balance_requirement","","",17,[[],["tokenamount",6]]],[11,"provider_balance_requirement","","",17,[[],["tokenamount",6]]],[11,"new","","",20,[[["cid",3]]]],[11,"constructor","","",170,[[],[["actorerror",3],["result",4]]]],[11,"new","actor::miner","",33,[[["quantspec",3],["cid",3]],[["amterror",4],["result",4]]]],[11,"add_to_queue","","Adds values to the queue entry for an epoch.",33,[[["bitfield",3],["chainepoch",6]],[["result",4],["box",3]]]],[11,"add_to_queue_values","","",33,[[["chainepoch",6]],[["result",4],["box",3]]]],[11,"cut","","Cut cuts the elements from the bits in the given bitfield…",33,[[["bitfield",3]],[["result",4],["box",3]]]],[11,"add_many_to_queue_values","","",33,[[["hashmap",3]],[["result",4],["box",3]]]],[11,"pop_until","","Removes and returns all values with keys less than or…",33,[[["chainepoch",6]],[["result",4],["box",3]]]],[11,"new","","",34,[[["cid",3]]]],[11,"load_deadline","","",34,[[],[["result",4],["deadline",3],["actorerror",3]]]],[11,"for_each","","",34,[[],[["result",4],["box",3]]]],[11,"update_deadline","","",34,[[["deadline",3]],[["result",4],["box",3]]]],[11,"new","","",35,[[["cid",3]]]],[11,"partitions_amt","","",35,[[],[["amt",3],["actorerror",3],["result",4]]]],[11,"load_partition","","",35,[[],[["partition",3],["result",4],["box",3]]]],[11,"add_expiration_partitions","","Adds some partition numbers to the set expiring at an epoch.",35,[[["quantspec",3],["chainepoch",6]],[["result",4],["box",3]]]],[11,"pop_expired_sectors","","PopExpiredSectors terminates expired sectors from all…",35,[[["quantspec",3],["chainepoch",6]],[["result",4],["expirationset",3],["box",3]]]],[11,"add_sectors","","Adds sectors to a deadline. It\'s the caller\'s…",35,[[["sectorsize",4],["quantspec",3]],[["powerpair",3],["box",3],["result",4]]]],[11,"pop_early_terminations","","",35,[[],[["result",4],["box",3]]]],[11,"pop_expired_partitions","","",35,[[["quantspec",3],["chainepoch",6]],[["result",4],["box",3]]]],[11,"terminate_sectors","","",35,[[["sectorsize",4],["quantspec",3],["sectors",3],["partitionsectormap",3],["chainepoch",6]],[["powerpair",3],["box",3],["result",4]]]],[11,"remove_partitions","","RemovePartitions removes the specified partitions,…",35,[[["quantspec",3],["bitfield",3]],[["result",4],["box",3]]]],[11,"declare_faults","","",35,[[["sectorsize",4],["chainepoch",6],["sectors",3],["partitionsectormap",3],["quantspec",3]],[["powerpair",3],["box",3],["result",4]]]],[11,"declare_faults_recovered","","",35,[[["sectors",3],["sectorsize",4],["partitionsectormap",3]],[["actorerror",3],["result",4]]]],[11,"process_deadline_end","","Processes all PoSt submissions, marking unproven sectors…",35,[[["chainepoch",6],["quantspec",3]],[["actorerror",3],["result",4]]]],[11,"power_delta","","The power change (positive or negative) after processing…",36,[[],["powerpair",3]]],[11,"penalty_power","","The power from this PoSt that should be penalized.",36,[[],["powerpair",3]]],[11,"record_proven_sectors","","Processes a series of posts, recording proven partitions…",35,[[["sectorsize",4],["chainepoch",6],["sectors",3],["quantspec",3]],[["result",4],["box",3],["postresult",3]]]],[11,"reschedule_sector_expirations","","RescheduleSectorExpirations reschedules the expirations of…",35,[[["sectorsize",4],["quantspec",3],["sectors",3],["partitionsectormap",3],["chainepoch",6]],[["result",4],["box",3]]]],[11,"new","","",37,[[["chainepoch",6]]]],[11,"period_started","","Whether the proving period has begun.",37,[[]]],[11,"period_elapsed","","Whether the proving period has elapsed.",37,[[]]],[11,"period_end","","The last epoch in the proving period.",37,[[],["chainepoch",6]]],[11,"next_period_start","","The first epoch in the next proving period.",37,[[],["chainepoch",6]]],[11,"is_open","","Whether the current deadline is currently open.",37,[[]]],[11,"has_elapsed","","Whether the current deadline has already closed.",37,[[]]],[11,"last","","The last epoch during which a proof may be submitted.",37,[[],["chainepoch",6]]],[11,"next_open","","Epoch at which the subsequent deadline opens.",37,[[],["chainepoch",6]]],[11,"fault_cutoff_passed","","Whether the deadline\'s fault cutoff has passed.",37,[[]]],[11,"next_not_elapsed","","Returns the next instance of this deadline that has not…",37,[[]]],[11,"quant_spec","","",37,[[],["quantspec",3]]],[11,"find_sector","","Returns the deadline and partition index for a sector…",34,[[["sectornumber",6]],[["result",4],["box",3]]]],[11,"empty","","",38,[[]]],[11,"add","","Adds sectors and power to the expiration set in place.",38,[[["powerpair",3],["tokenamount",6],["bitfield",3]]]],[11,"remove","","Removes sectors and power from the expiration set in place.",38,[[["powerpair",3],["tokenamount",6],["bitfield",3]],[["result",4],["box",3]]]],[11,"is_empty","","A set is empty if it has no sectors. The power and pledge…",38,[[]]],[11,"len","","Counts all sectors in the expiration set.",38,[[]]],[11,"new","","Loads a queue root.",39,[[["quantspec",3],["cid",3]],[["amterror",4],["result",4]]]],[11,"add_active_sectors","","Adds a collection of sectors to their on-time target…",39,[[["sectorsize",4]],[["result",4],["box",3]]]],[11,"reschedule_expirations","","Reschedules some sectors to a new (quantized) expiration…",39,[[["sectorsize",4],["chainepoch",6]],[["result",4],["box",3]]]],[11,"reschedule_as_faults","","Re-schedules sectors to expire at an early expiration…",39,[[["sectorsize",4],["chainepoch",6]],[["powerpair",3],["box",3],["result",4]]]],[11,"reschedule_all_as_faults","","Re-schedules all sectors to expire at an early expiration…",39,[[["chainepoch",6]],[["result",4],["box",3]]]],[11,"reschedule_recovered","","Removes sectors from any queue entries in which they…",39,[[["sectorsize",4],["sectoronchaininfo",3],["vec",3]],[["powerpair",3],["box",3],["result",4]]]],[11,"replace_sectors","","Removes some sectors and adds some others. The sectors…",39,[[["sectorsize",4]],[["result",4],["box",3]]]],[11,"remove_sectors","","Remove some sectors from the queue. The sectors may be…",39,[[["sectorsize",4],["bitfield",3]],[["box",3],["result",4]]]],[11,"pop_until","","Removes and aggregates entries from the queue up to and…",39,[[["chainepoch",6]],[["result",4],["expirationset",3],["box",3]]]],[11,"new","","",40,[[["cid",3]]]],[11,"live_sectors","","Live sectors are those that are not terminated (but may be…",40,[[],["bitfield",3]]],[11,"active_sectors","","Active sectors are those that are neither terminated nor…",40,[[],["bitfield",3]]],[11,"active_power","","Active power is power of non-faulty sectors.",40,[[],["powerpair",3]]],[11,"add_sectors","","AddSectors adds new sectors to the partition. The sectors…",40,[[["sectorsize",4],["quantspec",3]],[["powerpair",3],["box",3],["result",4]]]],[11,"add_faults","","marks a set of sectors faulty",40,[[["sectorsize",4],["bitfield",3],["quantspec",3],["chainepoch",6]],[["powerpair",3],["box",3],["result",4]]]],[11,"declare_faults","","Declares a set of sectors faulty. Already faulty sectors…",40,[[["bitfield",3],["sectorsize",4],["quantspec",3],["sectors",3],["chainepoch",6]],[["result",4],["box",3]]]],[11,"recover_faults","","Removes sector numbers from faults and thus from…",40,[[["sectors",3],["sectorsize",4],["quantspec",3]],[["powerpair",3],["box",3],["result",4]]]],[11,"declare_faults_recovered","","Declares sectors as recovering. Non-faulty and already…",40,[[["sectors",3],["sectorsize",4],["bitfield",3]],[["actorerror",3],["result",4]]]],[11,"remove_recoveries","","Removes sectors from recoveries and recovering power.…",40,[[["powerpair",3],["bitfield",3]]]],[11,"reschedule_expirations","","RescheduleExpirations moves expiring sectors to the target…",40,[[["chainepoch",6],["sectorsize",4],["quantspec",3],["sectors",3],["bitfield",3]],[["bitfield",3],["result",4],["box",3]]]],[11,"replace_sectors","","Replaces a number of \\\"old\\\" sectors with new ones. The old…",40,[[["sectorsize",4],["quantspec",3]],[["result",4],["box",3]]]],[11,"record_early_termination","","Record the epoch of any sectors expiring early, for…",40,[[["bitfield",3],["chainepoch",6]],[["result",4],["box",3]]]],[11,"terminate_sectors","","Marks a collection of sectors as terminated. The sectors…",40,[[["chainepoch",6],["sectorsize",4],["quantspec",3],["sectors",3],["bitfield",3]],[["result",4],["expirationset",3],["box",3]]]],[11,"pop_expired_sectors","","PopExpiredSectors traverses the expiration queue up to and…",40,[[["quantspec",3],["chainepoch",6]],[["result",4],["expirationset",3],["box",3]]]],[11,"record_missed_post","","Marks all non-faulty sectors in the partition as faulty…",40,[[["quantspec",3],["chainepoch",6]],[["result",4],["box",3]]]],[11,"pop_early_terminations","","",40,[[],[["result",4],["box",3]]]],[11,"record_skipped_faults","","Discovers how skipped faults declared during post…",40,[[["sectorsize",4],["chainepoch",6],["bitfield",3],["sectors",3],["quantspec",3]],[["actorerror",3],["result",4]]]],[11,"zero","","",41,[[]]],[11,"is_zero","","",41,[[]]],[11,"quantize_up","","Rounds `epoch` to the nearest exact multiple of the…",43,[[["chainepoch",6]],["chainepoch",6]]],[11,"new","","",172,[[]]],[11,"check","","Check validates all bitfields and counts the number of…",172,[[],[["result",4],["string",3]]]],[11,"count","","Counts the number of partitions & sectors within the map.",172,[[],[["result",4],["string",3]]]],[11,"add","","Records the given sector bitfield at the given…",172,[[["bitfield",3]],[["result",4],["string",3]]]],[11,"add_values","","Records the given sectors at the given deadline/partition…",172,[[],[["result",4],["string",3]]]],[11,"deadlines","","Returns a sorted vec of deadlines in the map.",172,[[],["vec",3]]],[11,"iter","","Walks the deadlines in deadline order.",172,[[]]],[11,"add_values","","Records the given sectors at the given partition.",173,[[["vec",3]]]],[11,"add","","Records the given sector bitfield at the given partition…",173,[[["bitfield",3]]]],[11,"count","","Counts the number of partitions & sectors within the map.",173,[[],[["result",4],["string",3]]]],[11,"partitions","","Returns a sorted vec of partitions in the map.",173,[[],["vec",3]]],[11,"iter","","Walks the partitions in the map, in order of increasing…",173,[[]]],[11,"len","","",173,[[]]],[11,"is_empty","","",173,[[]]],[11,"load","","",44,[[["cid",3]],[["amterror",4],["result",4]]]],[11,"load_sector","","",44,[[["bitfield",3]],[["result",4],["actorerror",3],["vec",3]]]],[11,"get","","",44,[[["sectornumber",6]],[["option",4],["result",4],["box",3]]]],[11,"store","","",44,[[["sectoronchaininfo",3],["vec",3]],[["result",4],["box",3]]]],[11,"must_get","","",44,[[["sectornumber",6]],[["sectoronchaininfo",3],["box",3],["result",4]]]],[11,"new","","",45,[[["cid",3],["chainepoch",6]]]],[11,"get_info","","",45,[[],[["result",4],["box",3],["minerinfo",3]]]],[11,"save_info","","",45,[[["minerinfo",3]],[["result",4],["box",3]]]],[11,"deadline_info","","Returns deadline calculations for the current (according…",45,[[["chainepoch",6]],["deadlineinfo",3]]],[11,"quant_spec_for_deadline","","Returns deadline calculations for the current (according…",45,[[],["quantspec",3]]],[11,"allocate_sector_number","","",45,[[["sectornumber",6]],[["actorerror",3],["result",4]]]],[11,"mask_sector_number","","",45,[[["bitfield",3]],[["actorerror",3],["result",4]]]],[11,"put_precommitted_sector","","",45,[[["sectorprecommitonchaininfo",3]],[["result",4],["hamterror",4]]]],[11,"get_precommitted_sector","","",45,[[["sectornumber",6]],[["result",4],["option",4],["hamterror",4]]]],[11,"find_precommitted_sectors","","Gets and returns the requested pre-committed sectors,…",45,[[],[["box",3],["result",4],["vec",3]]]],[11,"delete_precommitted_sectors","","",45,[[],[["result",4],["hamterror",4]]]],[11,"has_sector_number","","",45,[[["sectornumber",6]],[["result",4],["box",3]]]],[11,"put_sectors","","",45,[[["sectoronchaininfo",3],["vec",3]],[["result",4],["box",3]]]],[11,"get_sector","","",45,[[["sectornumber",6]],[["option",4],["result",4],["box",3]]]],[11,"delete_sectors","","",45,[[["bitfield",3]],[["amterror",4],["result",4]]]],[11,"for_each_sector","","",45,[[],[["result",4],["box",3]]]],[11,"find_sector","","Returns the deadline and partition index for a sector…",45,[[["sectornumber",6]],[["result",4],["box",3]]]],[11,"reschedule_sector_expirations","","Schedules each sector to expire at its next deadline end.…",45,[[["sectorsize",4],["deadlinesectormap",3],["chainepoch",6]],[["result",4],["box",3]]]],[11,"assign_sectors_to_deadlines","","Assign new sectors to deadlines.",45,[[["chainepoch",6],["sectorsize",4],["sectoronchaininfo",3],["vec",3]],[["powerpair",3],["box",3],["result",4]]]],[11,"pop_early_terminations","","Pops up to `max_sectors` early terminated sectors from all…",45,[[],[["result",4],["box",3]]]],[11,"check_sector_health","","",45,[[["sectornumber",6]],[["result",4],["box",3]]]],[11,"load_sector_infos","","Loads sector info for a sequence of sectors.",45,[[["bitfield",3]],[["box",3],["result",4],["vec",3]]]],[11,"load_sector_infos_for_proof","","Loads info for a set of sectors to be proven. If any of…",45,[[["bitfield",3]],[["box",3],["result",4],["vec",3]]]],[11,"load_deadlines","","",45,[[],[["deadlines",3],["actorerror",3],["result",4]]]],[11,"save_deadlines","","",45,[[["deadlines",3]],[["result",4],["box",3]]]],[11,"load_vesting_funds","","Loads the vesting funds table from the store.",45,[[],[["vestingfunds",3],["box",3],["result",4]]]],[11,"save_vesting_funds","","Saves the vesting table to the store.",45,[[["vestingfunds",3]],[["result",4],["box",3]]]],[11,"add_pre_commit_deposit","","",45,[[["tokenamount",6]]]],[11,"add_initial_pledge_requirement","","",45,[[["tokenamount",6]]]],[11,"add_locked_funds","","First vests and unlocks the vested funds AND then locks…",45,[[["tokenamount",6],["vestspec",3],["chainepoch",6]],[["tokenamount",6],["box",3],["result",4]]]],[11,"penalize_funds_in_priority_order","","First unlocks unvested funds from the vesting table. If…",45,[[["tokenamount",6],["chainepoch",6]],[["result",4],["box",3]]]],[11,"unlock_unvested_funds","","Unlocks an amount of funds that have not yet vested, if…",45,[[["tokenamount",6],["chainepoch",6]],[["tokenamount",6],["box",3],["result",4]]]],[11,"unlock_vested_funds","","Unlocks all vesting funds that have vested before the…",45,[[["chainepoch",6]],[["tokenamount",6],["box",3],["result",4]]]],[11,"check_vested_funds","","CheckVestedFunds returns the amount of vested funds that…",45,[[["chainepoch",6]],[["tokenamount",6],["box",3],["result",4]]]],[11,"get_unlocked_balance","","Unclaimed funds that are not locked -- includes funds used…",45,[[["tokenamount",6]],["tokenamount",6]]],[11,"get_available_balance","","Unclaimed funds. Actor balance - (locked funds, precommit…",45,[[["tokenamount",6]],["tokenamount",6]]],[11,"assert_balance_invariants","","",45,[[["tokenamount",6]]]],[11,"meets_initial_pledge_condition","","",45,[[["tokenamount",6]]]],[11,"quant_spec_every_deadline","","pre-commit expiry",45,[[],["quantspec",3]]],[11,"add_pre_commit_expiry","","",45,[[["sectornumber",6],["chainepoch",6]],[["result",4],["box",3]]]],[11,"check_precommit_expiry","","",45,[[["bitfield",3]],[["tokenamount",6],["hamterror",4],["result",4]]]],[11,"new","","",46,[[["vec",3],["vec",3],["bytesde",3],["vec",3],["registeredsealproof",4],["address",3]],[["string",3],["result",4]]]],[11,"new","","",47,[[]]],[11,"below_limit","","Returns true if we\'re below the partition/sector limit.…",47,[[]]],[11,"is_empty","","",47,[[]]],[11,"iter","","",47,[[]]],[11,"new","","",80,[[]]],[11,"unlock_vested_funds","","",80,[[["chainepoch",6]],["tokenamount",6]]],[11,"add_locked_funds","","",80,[[["tokenamount",6],["vestspec",3],["chainepoch",6]]]],[11,"unlock_unvested_funds","","",80,[[["tokenamount",6],["chainepoch",6]],["tokenamount",6]]],[11,"constructor","","",171,[[["minerconstructorparams",3]],[["actorerror",3],["result",4]]]],[11,"amount_locked","actor::multisig","Returns amount locked in multisig contract",82,[[["chainepoch",6]],["tokenamount",6]]],[11,"key","","",83,[[],["byteskey",3]]],[11,"constructor","","Constructor for Multisig actor",174,[[["constructorparams",3]],[["actorerror",3],["result",4]]]],[11,"propose","","Multisig actor propose function",174,[[["proposeparams",3]],[["result",4],["proposereturn",3],["actorerror",3]]]],[11,"approve","","Multisig actor approve function",174,[[["txnidparams",3]],[["approvereturn",3],["actorerror",3],["result",4]]]],[11,"cancel","","Multisig actor cancel function",174,[[["txnidparams",3]],[["actorerror",3],["result",4]]]],[11,"add_signer","","Multisig actor function to add signers to multisig",174,[[["addsignerparams",3]],[["actorerror",3],["result",4]]]],[11,"remove_signer","","Multisig actor function to remove signers to multisig",174,[[["removesignerparams",3]],[["actorerror",3],["result",4]]]],[11,"swap_signer","","Multisig actor function to swap signers to multisig",174,[[["swapsignerparams",3]],[["actorerror",3],["result",4]]]],[11,"change_num_approvals_threshold","","Multisig actor function to change number of approvals needed",174,[[["changenumapprovalsthresholdparams",3]],[["actorerror",3],["result",4]]]],[11,"new","actor::paych","",98,[[["cid",3],["address",3]]]],[11,"signing_bytes","","",100,[[],[["vec",3],["error",3],["result",4]]]],[11,"constructor","","Constructor for Payment channel actor",175,[[["constructorparams",3]],[["actorerror",3],["result",4]]]],[11,"update_channel_state","","",175,[[["updatechannelstateparams",3]],[["actorerror",3],["result",4]]]],[11,"settle","","",175,[[],[["actorerror",3],["result",4]]]],[11,"collect","","",175,[[],[["actorerror",3],["result",4]]]],[11,"new","actor::power","",105,[[["cid",3]],["state",3]]],[11,"miner_nominal_power_meets_consensus_minimum","","Checks power actor state for if miner meets minimum…",105,[[["address",3]],[["result",4],["box",3]]]],[11,"new","actor::reward","",117,[[["storagepower",6]]]],[11,"amount_vested","","",116,[[["chainepoch",6]],["tokenamount",6]]],[11,"constructor","actor::system","System actor constructor.",183,[[],[["actorerror",3],["result",4]]]],[11,"new","actor::verifreg","",123,[[["cid",3],["address",3]],["state",3]]],[11,"constructor","","Constructor for Registry Actor",184,[[["address",3]],[["actorerror",3],["result",4]]]],[11,"add_verifier","","",184,[[["addverifierparams",6]],[["actorerror",3],["result",4]]]],[11,"remove_verifier","","",184,[[["address",3]],[["actorerror",3],["result",4]]]],[11,"add_verified_client","","",184,[[["addverifierclientparams",6]],[["actorerror",3],["result",4]]]],[11,"use_bytes","","Called by StorageMarketActor during PublishStorageDeals.…",184,[[["usebytesparams",6]],[["actorerror",3],["result",4]]]],[11,"restore_bytes","","Called by HandleInitTimeoutDeals from StorageMarketActor…",184,[[["restorebytesparams",6]],[["actorerror",3],["result",4]]]],[11,"send","actor::chaos","",186,[[["sendargs",3]],["sendreturn",3]]],[11,"constructor","","Constructor for Account actor",186,[[]]],[11,"caller_validation","","CallerValidation violates VM call validation constraints.",186,[[["callervalidationargs",3]],[["actorerror",3],["result",4]]]],[11,"create_actor","","",186,[[["createactorargs",3]],[["actorerror",3],["result",4]]]],[11,"resolve_address","","Resolves address, and returns the resolved address…",186,[[["address",3]],[["resolveaddressresponse",3],["result",4],["actorerror",3]]]],[11,"delete_actor","","",186,[[["address",3]],[["actorerror",3],["result",4]]]],[11,"mutate_state","","",186,[[["mutatestateargs",3]],[["actorerror",3],["result",4]]]],[11,"abort_with","","",186,[[["abortwithargs",3]],[["actorerror",3],["result",4]]]],[11,"inspect_runtime","","",186,[[],[["inspectruntimereturn",3],["actorerror",3],["result",4]]]],[11,"new","actor::smooth","Create a new filter estimate given two Q.0 format ints.",137,[[["bigint",3]]]],[11,"estimate","","Returns the Q.0 position estimate of the filter",137,[[],["bigint",3]]],[11,"extrapolate","","Extrapolate filter \\\"position\\\" delta epochs in the future.",137,[[["chainepoch",6]],["bigint",3]]],[11,"load","","",187,[[["bigint",3],["filterestimate",3],["bigint",3]]]],[11,"next_estimate","","",187,[[["bigint",3],["chainepoch",6]],["filterestimate",3]]]],"p":[[3,"ActorState"],[4,"ExitCode"],[3,"BalanceTable"],[3,"Multimap"],[3,"Set"],[3,"SetMultimap"],[3,"State"],[4,"Method"],[3,"Entry"],[3,"State"],[3,"ConstructorParams"],[4,"Method"],[3,"State"],[3,"ConstructorParams"],[3,"ExecParams"],[3,"ExecReturn"],[4,"Method"],[3,"DealProposal"],[3,"ClientDealProposal"],[3,"DealState"],[3,"State"],[3,"WithdrawBalanceParams"],[3,"OnMinerSectorsTerminateParams"],[3,"OnMinerSectorsTerminateParamsRef"],[3,"PublishStorageDealsParams"],[3,"PublishStorageDealsReturn"],[3,"VerifyDealsForActivationParams"],[3,"VerifyDealsForActivationParamsRef"],[3,"VerifyDealsForActivationReturn"],[3,"ActivateDealsParams"],[3,"ComputeDataCommitmentParams"],[3,"ComputeDataCommitmentParamsRef"],[4,"Method"],[3,"BitFieldQueue"],[3,"Deadlines"],[3,"Deadline"],[3,"PoStResult"],[3,"DeadlineInfo"],[3,"ExpirationSet"],[3,"ExpirationQueue"],[3,"Partition"],[3,"PowerPair"],[3,"VestSpec"],[3,"QuantSpec"],[3,"Sectors"],[3,"State"],[3,"MinerInfo"],[3,"TerminationResult"],[3,"MinerConstructorParams"],[3,"CronEventPayload"],[3,"PartitionKey"],[3,"GetControlAddressesReturn"],[3,"ChangeWorkerAddressParams"],[3,"ChangePeerIDParams"],[3,"ChangeMultiaddrsParams"],[3,"ConfirmSectorProofsParams"],[3,"PoStPartition"],[3,"SubmitWindowedPoStParams"],[3,"ProveCommitSectorParams"],[3,"CheckSectorProvenParams"],[3,"ExtendSectorExpirationParams"],[3,"ExpirationExtension"],[3,"TerminateSectorsParams"],[3,"TerminationDeclaration"],[3,"TerminateSectorsReturn"],[3,"DeclareFaultsParams"],[3,"FaultDeclaration"],[3,"DeclareFaultsRecoveredParams"],[3,"RecoveryDeclaration"],[3,"CompactPartitionsParams"],[3,"CompactSectorNumbersParams"],[3,"ReportConsensusFaultParams"],[3,"WithdrawBalanceParams"],[3,"WorkerKeyChange"],[3,"SectorPreCommitInfo"],[3,"SectorPreCommitOnChainInfo"],[3,"SectorOnChainInfo"],[3,"ChainSectorInfo"],[3,"Fault"],[3,"VestingFund"],[3,"VestingFunds"],[4,"Method"],[3,"State"],[3,"TxnID"],[3,"Transaction"],[3,"ProposalHashData"],[3,"ConstructorParams"],[3,"ProposeParams"],[3,"ProposeReturn"],[3,"TxnIDParams"],[3,"ApproveReturn"],[3,"AddSignerParams"],[3,"RemoveSignerParams"],[3,"SwapSignerParams"],[3,"ChangeNumApprovalsThresholdParams"],[4,"Method"],[3,"LaneState"],[3,"Merge"],[3,"State"],[3,"ConstructorParams"],[3,"SignedVoucher"],[3,"ModVerifyParams"],[3,"PaymentVerifyParams"],[3,"UpdateChannelStateParams"],[4,"Method"],[3,"State"],[3,"Claim"],[3,"CronEvent"],[3,"CreateMinerParams"],[3,"CreateMinerReturn"],[3,"UpdateClaimedPowerParams"],[3,"EnrollCronEventParams"],[3,"SectorStorageWeightDesc"],[3,"ReportConsensusFaultParams"],[3,"CurrentTotalPowerReturn"],[4,"Method"],[3,"Reward"],[3,"State"],[3,"AwardBlockRewardParams"],[3,"ThisEpochRewardReturn"],[4,"VestingFunction"],[4,"Method"],[4,"Method"],[3,"State"],[3,"VerifierParams"],[3,"BytesParams"],[4,"Method"],[3,"State"],[3,"CreateActorArgs"],[3,"ResolveAddressResponse"],[3,"SendArgs"],[3,"SendReturn"],[3,"MutateStateArgs"],[3,"AbortWithArgs"],[3,"InspectRuntimeReturn"],[3,"CallerValidationArgs"],[4,"Method"],[3,"FilterEstimate"],[8,"ActorDowncast"],[3,"ActorError"],[3,"Serialized"],[3,"SYSTEM_ACTOR_CODE_ID"],[3,"INIT_ACTOR_CODE_ID"],[3,"CRON_ACTOR_CODE_ID"],[3,"ACCOUNT_ACTOR_CODE_ID"],[3,"POWER_ACTOR_CODE_ID"],[3,"MINER_ACTOR_CODE_ID"],[3,"MARKET_ACTOR_CODE_ID"],[3,"PAYCH_ACTOR_CODE_ID"],[3,"MULTISIG_ACTOR_CODE_ID"],[3,"REWARD_ACTOR_CODE_ID"],[3,"VERIFREG_ACTOR_CODE_ID"],[3,"CHAOS_ACTOR_CODE_ID"],[3,"CALLER_TYPES_SIGNABLE"],[3,"SYSTEM_ACTOR_ADDR"],[3,"INIT_ACTOR_ADDR"],[3,"REWARD_ACTOR_ADDR"],[3,"CRON_ACTOR_ADDR"],[3,"STORAGE_POWER_ACTOR_ADDR"],[3,"STORAGE_MARKET_ACTOR_ADDR"],[3,"VERIFIED_REGISTRY_ACTOR_ADDR"],[3,"CHAOS_ACTOR_ADDR"],[3,"BURNT_FUNDS_ACTOR_ADDR"],[3,"QUALITY_BASE_MULTIPLIER"],[3,"DEAL_WEIGHT_MULTIPLIER"],[3,"VERIFIED_DEAL_WEIGHT_MULTIPLIER"],[3,"TOTAL_FILECOIN"],[3,"Actor"],[3,"Actor"],[3,"Actor"],[3,"Actor"],[3,"Actor"],[3,"DeadlineSectorMap"],[3,"PartitionSectorMap"],[3,"Actor"],[3,"Actor"],[3,"Actor"],[3,"CONSENSUS_MINER_MIN_POWER"],[3,"Actor"],[3,"BASELINE_EXPONENT"],[3,"BASELINE_INITIAL_VALUE"],[3,"INIT_BASELINE_POWER"],[3,"State"],[3,"Actor"],[3,"Actor"],[3,"MINIMUM_VERIFIED_DEAL_SIZE"],[3,"Actor"],[3,"AlphaBetaFilter"],[3,"NUM"],[3,"DENOM"],[3,"DEFAULT_ALPHA"],[3,"DEFAULT_BETA"],[3,"LN_2"],[3,"EPSILON"]]},\
"beacon":{"doc":"","i":[[3,"DrandPublic","beacon","Coeffiencients of the publicly available Drand keys. This…",null,null],[12,"coefficient","","",0,null],[3,"ChainInfo","","",null,null],[3,"BeaconEntryJson","","",null,null],[3,"DrandBeacon","","",null,null],[3,"MockBeacon","","",null,null],[5,"beacon_entries_for_block","","",null,[[["chainepoch",6],["beaconentry",3],["beacon",8]]]],[0,"beacon_entries","","",null,null],[3,"BeaconEntry","beacon::beacon_entries","The result from getting an entry from Drand.",null,null],[0,"json","","",null,null],[3,"BeaconEntryJson","beacon::beacon_entries::json","Wrapper for serializing and deserializing a BeaconEntry…",null,null],[12,"0","","",1,null],[3,"BeaconEntryJsonRef","","Wrapper for serializing a BeaconEntry reference to JSON.",null,null],[12,"0","","",2,null],[5,"serialize","","",null,[[["beaconentry",3]],["result",4]]],[5,"deserialize","","",null,[[],[["result",4],["beaconentry",3]]]],[0,"vec","","",null,null],[5,"serialize","beacon::beacon_entries::json::vec","",null,[[],["result",4]]],[5,"deserialize","","",null,[[],[["result",4],["vec",3]]]],[11,"new","beacon::beacon_entries","",3,[[["vec",3]]]],[11,"round","","Returns the current round number",3,[[]]],[11,"data","","The signature of message H(prev_round, prev_round.data,…",3,[[]]],[11,"key","beacon","",0,[[],["publickey",3]]],[11,"new","","Construct a new DrandBeacon.",4,[[["drandpublic",3]]]],[11,"new","","",5,[[["duration",3]]]],[11,"round_time","","",5,[[],["duration",3]]],[17,"DEFAULT_DRAND_URL","","Default endpoint for the drand beacon node.",null,null],[17,"IGNORE_DRAND_VAR","","Enviromental Variable to ignore Drand. Lotus parallel is…",null,null],[8,"Beacon","","",null,null],[10,"verify_entry","","Verify a new beacon entry against the most recent one…",6,[[["beaconentry",3],["beaconentry",3]],[["pin",3],["box",3]]]],[10,"entry","","Returns a BeaconEntry given a round. It fetches the…",6,[[],[["box",3],["pin",3]]]],[10,"max_beacon_round_for_epoch","","",6,[[["chainepoch",6]]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"vzip","","",7,[[]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"vzip","","",8,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"vzip","","",5,[[]]],[11,"from","beacon::beacon_entries","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"from","beacon::beacon_entries::json","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"verify_entry","beacon","",4,[[["beaconentry",3],["beaconentry",3]],[["pin",3],["box",3]]]],[11,"entry","","",4,[[],[["box",3],["pin",3]]]],[11,"max_beacon_round_for_epoch","","",4,[[["chainepoch",6]]]],[11,"verify_entry","","",5,[[["beaconentry",3],["beaconentry",3]],[["box",3],["pin",3]]]],[11,"entry","","",5,[[],[["box",3],["pin",3]]]],[11,"max_beacon_round_for_epoch","","",5,[[]]],[11,"from","beacon::beacon_entries","",3,[[["beaconentryjson",3]]]],[11,"clone","","",3,[[],["beaconentry",3]]],[11,"clone","beacon","",0,[[],["drandpublic",3]]],[11,"clone","","",7,[[],["chaininfo",3]]],[11,"clone","","",8,[[],["beaconentryjson",3]]],[11,"default","beacon::beacon_entries","",3,[[],["beaconentry",3]]],[11,"eq","","",3,[[["beaconentry",3]]]],[11,"ne","","",3,[[["beaconentry",3]]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","beacon","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"serialize","beacon::beacon_entries","",3,[[],["result",4]]],[11,"serialize","beacon::beacon_entries::json","",1,[[],["result",4]]],[11,"serialize","","",2,[[],["result",4]]],[11,"serialize","beacon","",0,[[],["result",4]]],[11,"serialize","","",7,[[],["result",4]]],[11,"serialize","","",8,[[],["result",4]]],[11,"deserialize","beacon::beacon_entries","",3,[[],["result",4]]],[11,"deserialize","beacon::beacon_entries::json","",1,[[],["result",4]]],[11,"deserialize","beacon","",0,[[],["result",4]]],[11,"deserialize","","",7,[[],["result",4]]],[11,"deserialize","","",8,[[],["result",4]]]],"p":[[3,"DrandPublic"],[3,"BeaconEntryJson"],[3,"BeaconEntryJsonRef"],[3,"BeaconEntry"],[3,"DrandBeacon"],[3,"MockBeacon"],[8,"Beacon"],[3,"ChainInfo"],[3,"BeaconEntryJson"]]},\
"bitfield":{"doc":"","i":[[3,"BitField","bitfield","An bit field with buffered insertion/removal that…",null,null],[0,"iter","","",null,null],[3,"Skip","bitfield::iter","A `RangeIterator` that skips over `n` bits of antoher…",null,null],[3,"Take","","A `RangeIterator` that iterates over the first `n` bits of…",null,null],[3,"Ranges","","A `RangeIterator` that wraps a regular iterator over…",null,null],[5,"ranges_from_bits","","Returns a `RangeIterator` which ranges contain the values…",null,[[]]],[8,"RangeIterator","","A trait for iterators over `Range<usize>`.",null,null],[11,"union","","Returns a new `RangeIterator` over the bits that are in…",0,[[["rangeiterator",8]],[["rangeiterator",8],["union",3],["combine",3]]]],[11,"intersection","","Returns a new `RangeIterator` over the bits that are in…",0,[[["rangeiterator",8]],[["intersection",3],["combine",3],["rangeiterator",8]]]],[11,"difference","","Returns a new `RangeIterator` over the bits that are in…",0,[[["rangeiterator",8]],[["combine",3],["difference",3],["rangeiterator",8]]]],[11,"symmetric_difference","","Returns a new `RangeIterator` over the bits that are in…",0,[[["rangeiterator",8]],[["symmetricdifference",3],["combine",3],["rangeiterator",8]]]],[11,"cut","","Returns a new `RangeIterator` over the bits in `self` that…",0,[[["rangeiterator",8]],[["cut",3],["combine",3],["rangeiterator",8]]]],[11,"skip_bits","","Returns a new `RangeIterator` over the bits in `self`…",0,[[],["skip",3]]],[11,"take_bits","","Returns a new `RangeIterator` over the first `n` bits in…",0,[[],["take",3]]],[11,"new","","Creates a new `Ranges` instance.",1,[[]]],[11,"from_bytes","bitfield","Decodes RLE+ encoded bytes into a bit field.",2,[[],["result",4]]],[11,"to_bytes","","Turns a bit field into its RLE+ encoded form.",2,[[],["vec",3]]],[0,"json","","",null,null],[3,"BitFieldJson","bitfield::json","",null,null],[12,"0","","",3,null],[3,"BitFieldJsonRef","","Wrapper for serializing a UnsignedMessage reference to JSON.",null,null],[12,"0","","",4,null],[11,"new","bitfield","Creates an empty bit field.",2,[[]]],[11,"from_ranges","","Creates a new bit field from a `RangeIterator`.",2,[[]]],[11,"set","","Adds the bit at a given index to the bit field.",2,[[]]],[11,"unset","","Removes the bit at a given index from the bit field.",2,[[]]],[11,"get","","Returns `true` if the bit field contains the bit at a…",2,[[]]],[11,"first","","Returns the index of the lowest bit present in the bit…",2,[[],["option",4]]],[11,"iter","","Returns an iterator over the indices of the bit field\'s…",2,[[]]],[11,"bounded_iter","","Returns an iterator over the indices of the bit field\'s…",2,[[],["result",4]]],[11,"ranges","","Returns an iterator over the ranges of set bits that make…",2,[[]]],[11,"is_empty","","Returns `true` if the bit field is empty.",2,[[]]],[11,"slice","","Returns a slice of the bit field with the start index of…",2,[[],["result",4]]],[11,"len","","Returns the number of set bits in the bit field.",2,[[]]],[11,"cut","","Returns a new bit field containing the bits in `self` that…",2,[[]]],[11,"union","","Returns the union of the given bit fields as a new bit…",2,[[]]],[11,"contains_any","","Returns true if `self` overlaps with `other`.",2,[[["bitfield",3]]]],[11,"contains_all","","Returns true if the `self` is a superset of `other`.",2,[[["bitfield",3]]]],[14,"bitfield","","Constructs a `BitField` from a given list of 1s and 0s.",null,null],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","bitfield::iter","",5,[[]]],[11,"into","","",5,[[]]],[11,"into_iter","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"into_iter","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"into_iter","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","bitfield::json","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","bitfield","",2,[[["bitfieldjson",3]]]],[11,"from","bitfield::json","",3,[[["bitfield",3]]]],[11,"next","bitfield::iter","",5,[[],["option",4]]],[11,"next","","",6,[[],["option",4]]],[11,"next","","",1,[[],["option",4]]],[11,"clone","bitfield","",2,[[],["bitfield",3]]],[11,"default","","",2,[[],["bitfield",3]]],[11,"eq","","",2,[[]]],[11,"eq","bitfield::json","",3,[[["bitfieldjson",3]]]],[11,"ne","","",3,[[["bitfieldjson",3]]]],[11,"fmt","bitfield","",2,[[["formatter",3]],["result",6]]],[11,"fmt","bitfield::json","",3,[[["formatter",3]],["result",6]]],[11,"sub_assign","bitfield","",2,[[["bitfield",3]]]],[11,"bitand_assign","","",2,[[["bitfield",3]]]],[11,"bitor_assign","","",2,[[["bitfield",3]]]],[11,"bitxor_assign","","",2,[[["bitfield",3]]]],[11,"from_iter","","",2,[[["intoiterator",8]]]],[11,"from_iter","","",2,[[["intoiterator",8]]]],[11,"serialize","","",2,[[],["result",4]]],[11,"serialize","bitfield::json","",3,[[],["result",4]]],[11,"serialize","","",4,[[],["result",4]]],[11,"deserialize","bitfield","",2,[[],["result",4]]],[11,"deserialize","bitfield::json","",3,[[],["result",4]]]],"p":[[8,"RangeIterator"],[3,"Ranges"],[3,"BitField"],[3,"BitFieldJson"],[3,"BitFieldJsonRef"],[3,"Skip"],[3,"Take"]]},\
"chain":{"doc":"","i":[[3,"MINIMUM_BASE_FEE","chain","Cbor bytes of an empty array serialized.",null,null],[3,"IndexToHeadChange","","",null,null],[12,"0","","",0,null],[12,"1","","",0,null],[3,"ChainStore","","Stores chain data such as heaviest tipset and cached…",null,null],[12,"db","","",1,null],[3,"TipsetMetadata","","TipsetMetadata is the type stored as the value in the…",null,null],[12,"tipset_state_root","","Root of aggregate state after applying tipset",2,null],[12,"tipset_receipts_root","","Receipts from all message contained within this tipset",2,null],[12,"tipset","","The actual Tipset",2,null],[3,"TipIndex","","Tracks tipsets and their states by TipsetKeys and…",null,null],[4,"HeadChange","","Enum for pubsub channel that defines message type variant…",null,null],[13,"Current","","",3,null],[13,"Apply","","",3,null],[13,"Revert","","",3,null],[4,"EventsPayload","","",null,null],[13,"TaskCancel","","",4,null],[13,"SubHeadChanges","","",4,null],[4,"Error","","Chain error",null,null],[13,"UndefinedKey","","Key was not found",5,null],[13,"NoBlocks","","Tipset contains no blocks",5,null],[13,"NotFound","","Key not found in database",5,null],[13,"DB","","Error originating from key-value store",5,null],[13,"Blockchain","","Error originating constructing blockchain structures",5,null],[13,"Encoding","","Error originating from encoding arbitrary data",5,null],[13,"Cid","","Error originating from Cid creation",5,null],[13,"State","","Amt error",5,null],[13,"Other","","Other chain error",5,null],[5,"compute_base_fee","","",null,[[["tipset",3]],[["bigint",3],["result",4],["error",4]]]],[5,"unsigned_messages_for_tipset","","Returns messages for a given tipset from db",null,[[["tipset",3]],[["vec",3],["result",4],["error",4]]]],[5,"block_messages","","Returns a Tuple of bls messages of type UnsignedMessage…",null,[[["blockheader",3]],[["error",4],["result",4]]]],[5,"chain_messages","","Returns a vector of all chain messages, these messages…",null,[[["blockheader",3]],[["error",4],["result",4],["vec",3]]]],[5,"fill_tipsets","","Constructs and returns a full tipset if messages from…",null,[[["tipset",3]],[["fulltipset",3],["result",4],["error",4]]]],[5,"block_messages_from_cids","","Returns a tuple of UnsignedMessage and SignedMessages from…",null,[[],[["error",4],["result",4]]]],[5,"read_msg_cids","","Returns a tuple of cids for both Unsigned and Signed…",null,[[["cid",3]],[["error",4],["result",4]]]],[5,"persist_objects","","Persists slice of serializable objects to blockstore.",null,[[],[["error",4],["result",4]]]],[5,"latest_beacon_entry","","Finds the latest beacon entry given a tipset up to 20…",null,[[["tipset",3]],[["error",4],["beaconentry",3],["result",4]]]],[5,"get_chain_randomness","","Gets 32 bytes of randomness for ChainRand paramaterized by…",null,[[["domainseparationtag",4],["chainepoch",6],["tipsetkeys",3]],[["box",3],["result",4]]]],[5,"get_beacon_randomness","","Gets 32 bytes of randomness for ChainRand paramaterized by…",null,[[["domainseparationtag",4],["chainepoch",6],["tipsetkeys",3]],[["box",3],["result",4]]]],[5,"draw_randomness","","Computes a pseudorandom 32 byte Vec",null,[[["domainseparationtag",4],["chainepoch",6]],[["box",3],["result",4]]]],[5,"get_heaviest_tipset","","Returns the heaviest tipset",null,[[],[["result",4],["option",4],["error",4]]]],[5,"tipset_from_keys","","Returns Tipset from key-value store from provided cids",null,[[["tipsetkeys",3]],[["error",4],["result",4],["tipset",3]]]],[5,"tipset_by_height","","Returns the tipset behind `tsk` at a given `height`. If…",null,[[["chainepoch",6],["tipset",3]],[["result",4],["option",4],["error",4]]]],[5,"genesis","","Returns the genesis block",null,[[],[["option",4],["error",4],["result",4]]]],[5,"get_chain_message","","Attempts to deserialize to unsigend message or signed…",null,[[["cid",3]],[["chainmessage",4],["error",4],["result",4]]]],[5,"messages_for_tipset","","given a tipset this function will return all messages",null,[[["tipset",3]],[["error",4],["result",4],["vec",3]]]],[5,"get_parent_reciept","","returns message receipt given block_header",null,[[["blockheader",3]],[["error",4],["option",4],["result",4]]]],[5,"weight","","Returns the weight of provided tipset",null,[[["tipset",3]],[["bigint",3],["string",3],["result",4]]]],[5,"sub_head_changes","","",null,[[["headchange",4],["rwlock",3],["option",4],["arc",3],["subscriber",3]]]],[11,"sub_head_changes","","",4,[[],[["indextoheadchange",3],["option",4]]]],[11,"task_cancel","","",4,[[],["option",4]]],[11,"new","","constructor",1,[[["arc",3]]]],[11,"set_heaviest_tipset","","Sets heaviest tipset within ChainStore and store its…",1,[[["arc",3],["tipset",3]]]],[11,"subscribe","","",1,[[]]],[11,"set_tipset_tracker","","Sets tip_index tracker",1,[[["blockheader",3]]]],[11,"set_genesis","","Writes genesis to blockstore",1,[[["blockheader",3]],[["cid",3],["result",4],["error",4]]]],[11,"put_tipset","","Writes tipset block headers to data store and updates…",1,[[["tipset",3]]]],[11,"put_messages","","Writes encoded message data to blockstore",1,[[],[["error",4],["result",4]]]],[11,"load_heaviest_tipset","","Loads heaviest tipset from datastore and sets as heaviest…",1,[[]]],[11,"genesis","","Returns genesis blockheader from blockstore",1,[[],[["option",4],["error",4],["result",4]]]],[11,"heaviest_tipset","","Returns heaviest tipset from blockstore",1,[[]]],[11,"tip_index","","",1,[[],["rwlock",3]]],[11,"publisher","","",1,[[],["rwlock",3]]],[11,"blockstore","","Returns key-value store instance",1,[[]]],[11,"tipset_from_keys","","Returns Tipset from key-value store from provided cids",1,[[["tipsetkeys",3]],[["error",4],["result",4],["tipset",3]]]],[11,"fill_tipsets","","Constructs and returns a full tipset if messages from…",1,[[["tipset",3]],[["fulltipset",3],["result",4],["error",4]]]],[11,"is_block_validated","","Checks store if block has already been validated. Key…",1,[[["cid",3]],[["result",4],["error",4]]]],[11,"mark_block_as_validated","","Marks block as validated in the store. This is retrieved…",1,[[["cid",3]],[["error",4],["result",4]]]],[11,"get_lookback_tipset_for_round","","Gets lookback tipset for block validations. Returns `None`…",1,[[["tipset",3],["chainepoch",6]],[["result",4],["option",4],["error",4]]]],[11,"new","","Creates new TipIndex with empty metadata",6,[[]]],[11,"put","","Adds an entry to TipIndex\'s metadata After this call the…",6,[[["tipsetmetadata",3]]]],[11,"get_tipset","","Returns the tipset corresponding to the hashed index",6,[[]]],[11,"get_tipset_state_root","","Returns the state root for the tipset corresponding to the…",6,[[]]],[11,"get_tipset_receipts_root","","Returns the receipt root for the tipset corresponding to…",6,[[]]],[0,"base_fee","","",null,null],[3,"MINIMUM_BASE_FEE","chain::base_fee","Cbor bytes of an empty array serialized.",null,null],[5,"compute_base_fee","","",null,[[["tipset",3]],[["bigint",3],["result",4],["error",4]]]],[17,"BLOCK_GAS_TARGET","","",null,null],[17,"BASE_FEE_MAX_CHANGE_DENOM","","",null,null],[17,"INITIAL_BASE_FEE","","",null,null],[17,"PACKING_EFFICIENCY_DENOM","","",null,null],[17,"PACKING_EFFICIENCY_NUM","","",null,null],[0,"headchange_json","chain","",null,null],[4,"HeadChangeJson","chain::headchange_json","",null,null],[13,"Current","","",7,null],[13,"Apply","","",7,null],[13,"Revert","","",7,null],[17,"BLOCK_GAS_TARGET","chain","",null,null],[17,"BASE_FEE_MAX_CHANGE_DENOM","","",null,null],[17,"INITIAL_BASE_FEE","","",null,null],[17,"PACKING_EFFICIENCY_DENOM","","",null,null],[17,"PACKING_EFFICIENCY_NUM","","",null,null],[8,"Index","","Trait to allow metadata to be indexed by multiple types of…",null,null],[11,"hash_key","","",8,[[]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"vzip","","",9,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"vzip","","",6,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_string","","",5,[[],["string",3]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"vzip","","",5,[[]]],[11,"as_fail","","",5,[[],["fail",8]]],[11,"from","chain::headchange_json","",7,[[]]],[11,"into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"vzip","","",7,[[]]],[11,"from","","",7,[[["headchange",4]]]],[11,"from","chain","",5,[[["dberr",4]]]],[11,"from","","",5,[[["blkerr",4]]]],[11,"from","","",5,[[["ciderr",4]]]],[11,"from","","",5,[[["encerr",3]],["error",4]]],[11,"from","","",5,[[["serdeerr",3]],["error",4]]],[11,"from","","",5,[[["amterr",4]],["error",4]]],[11,"from","","",5,[[["string",3]]]],[11,"clone","","",3,[[],["headchange",4]]],[11,"clone","","",0,[[],["indextoheadchange",3]]],[11,"clone","","",4,[[],["eventspayload",4]]],[11,"clone","","",2,[[],["tipsetmetadata",3]]],[11,"default","","",6,[[],["tipindex",3]]],[11,"eq","","",5,[[["error",4]]]],[11,"ne","","",5,[[["error",4]]]],[11,"eq","","",2,[[["tipsetmetadata",3]]]],[11,"ne","","",2,[[["tipsetmetadata",3]]]],[11,"deref","","",9,[[],["bigint",3]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"source","","",5,[[],[["error",8],["option",4]]]],[11,"initialize","","",9,[[]]],[11,"serialize","chain::headchange_json","",7,[[],["result",4]]],[11,"hash_key","chain","",8,[[]]]],"p":[[3,"IndexToHeadChange"],[3,"ChainStore"],[3,"TipsetMetadata"],[4,"HeadChange"],[4,"EventsPayload"],[4,"Error"],[3,"TipIndex"],[4,"HeadChangeJson"],[8,"Index"],[3,"MINIMUM_BASE_FEE"]]},\
"chain_sync":{"doc":"","i":[[3,"BadBlockCache","chain_sync","Threadsafe cache for tracking bad blocks",null,null],[3,"SyncNetworkContext","","Context used in chain sync to handle network requests",null,null],[3,"ChainSyncer","","Struct that handles the ChainSync logic. This handles…",null,null],[3,"SyncState","","State of a given sync.",null,null],[4,"Error","","ChainSync error",null,null],[13,"NoBlocks","","",0,null],[13,"Blockchain","","Error originating constructing blockchain structures",0,null],[13,"Encoding","","Error originating from encoding arbitrary data",0,null],[13,"InvalidCid","","Error originating from CID construction",0,null],[13,"InvalidRoots","","Error indicating an invalid root",0,null],[13,"Store","","Error indicating a chain store error",0,null],[13,"State","","Error originating from state",0,null],[13,"Validation","","Error in validating arbitrary data",0,null],[13,"Temporal","","Block validated was from the future, this is intended to…",0,null],[13,"Other","","Any other error that does not need to be specifically…",0,null],[4,"SyncStage","","Current state of the ChainSyncer using the BlockSync…",null,null],[13,"Idle","","Idle state",1,null],[13,"Headers","","Syncing headers from the heaviest tipset to genesis.",1,null],[13,"PersistHeaders","","Persisting headers on chain from heaviest to genesis.",1,null],[13,"Messages","","Syncing messages and performing state transitions.",1,null],[13,"Complete","","ChainSync completed and is following chain.",1,null],[13,"Error","","Error has occured while syncing.",1,null],[11,"new","","",2,[[]]],[11,"put","","Puts a bad block Cid in the cache with a given reason.",2,[[["cid",3],["string",3]]]],[11,"get","","Returns `Some` with the reason if the block cid is in bad…",2,[[["cid",3]]]],[11,"peek","","Returns `Some` with the reason if the block cid is in bad…",2,[[["cid",3]]]],[11,"new","","",3,[[["arc",3],["sender",3],["networkmessage",4],["peermanager",3]]]],[11,"peer_manager","","Returns a reference to the peer manager of the network…",3,[[],["peermanager",3]]],[11,"peer_manager_cloned","","Clones the `Arc` to the peer manager.",3,[[],[["arc",3],["peermanager",3]]]],[11,"blocksync_headers","","Send a blocksync request for only block headers (ignore…",3,[[["peerid",3],["tipsetkeys",3],["option",4]]]],[11,"blocksync_messages","","Send a blocksync request for only messages (ignore block…",3,[[["peerid",3],["tipsetkeys",3],["option",4]]]],[11,"blocksync_fts","","Send a blocksync request for a single full tipset…",3,[[["peerid",3],["tipsetkeys",3],["option",4]]]],[11,"hello_request","","Send a hello request to the network (does not await…",3,[[["peerid",3],["hellorequest",3]]]],[11,"new","","",4,[[["arc",3],["tipset",3],["sender",3],["statemanager",3],["receiver",3],["arc",3],["arc",3],["networkevent",4],["networkmessage",4],["chainstore",3],["arc",3]],[["error",4],["result",4]]]],[11,"bad_blocks_cloned","","Returns a clone of the bad blocks cache to be used outside…",4,[[],[["arc",3],["badblockcache",3]]]],[11,"sync_state_cloned","","Returns a cloned `Arc` of the sync worker state.",4,[[],[["arc",3],["rwlock",3]]]],[11,"start","","Spawns a network handler and begins the syncing process.",4,[[]]],[11,"inform_new_head","","informs the syncer about a new potential tipset This…",4,[[["peerid",3],["fulltipset",3]]]],[11,"init","","Initializes the syncing state with base and target tipsets…",5,[[["tipset",3],["arc",3]]]],[11,"stage","","",5,[[],["syncstage",4]]],[11,"target","","",5,[[],["option",4]]],[11,"set_stage","","Sets the sync stage for the syncing state. If setting to…",5,[[["syncstage",4]]]],[11,"set_epoch","","Sets epoch of the sync.",5,[[["chainepoch",6]]]],[11,"error","","Sets error for the sync.",5,[[["string",3]]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"vzip","","",5,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"as_fail","","",0,[[],["fail",8]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"to_string","","",1,[[],["string",3]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","","",0,[[["blkerr",4]]]],[11,"from","","",0,[[["ciderr",4]]]],[11,"from","","",0,[[["storeerr",4]]]],[11,"from","","",0,[[["sterr",4]]]],[11,"from","","",0,[[["dberr",4]],["error",4]]],[11,"from","","",0,[[["encerr",3]],["error",4]]],[11,"from","","",0,[[["serdeerr",3]],["error",4]]],[11,"from","","",0,[[["amterr",4]],["error",4]]],[11,"from","","",0,[[["hamterr",4]],["error",4]]],[11,"from","","",0,[[],["error",4]]],[11,"from","","",0,[[["string",3]],["error",4]]],[11,"from","","",0,[[["tryfrominterror",3]],["error",4]]],[11,"clone","","",3,[[],["syncnetworkcontext",3]]],[11,"clone","","",1,[[],["syncstage",4]]],[11,"clone","","",5,[[],["syncstate",3]]],[11,"default","","",2,[[]]],[11,"default","","",1,[[]]],[11,"default","","",5,[[],["syncstate",3]]],[11,"eq","","",0,[[["error",4]]]],[11,"ne","","",0,[[["error",4]]]],[11,"eq","","",1,[[["syncstage",4]]]],[11,"eq","","",5,[[["syncstate",3]]]],[11,"ne","","",5,[[["syncstate",3]]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"source","","",0,[[],[["error",8],["option",4]]]],[11,"serialize","","",1,[[],["result",4]]],[11,"serialize","","",5,[[],["result",4]]]],"p":[[4,"Error"],[4,"SyncStage"],[3,"BadBlockCache"],[3,"SyncNetworkContext"],[3,"ChainSyncer"],[3,"SyncState"]]},\
"clock":{"doc":"","i":[[3,"ChainEpochClock","clock","ChainEpochClock is used by the system node to assume weak…",null,null],[6,"ChainEpoch","","Epoch number of a chain. This acts as a proxt for time…",null,null],[17,"EPOCH_DURATION_SECONDS","","Duration of each tipset epoch.",null,null],[17,"EPOCH_UNDEFINED","","Const used within the VM to denote an unset `ChainEpoch`",null,null],[11,"new","","Returns a ChainEpochClock based on the given genesis_time…",0,[[],["chainepochclock",3]]],[11,"get_genesis_time","","Returns the genesis time as a `DateTime<Utc>`",0,[[],[["utc",3],["datetime",3]]]],[11,"epoch_at_time","","Returns the epoch at a given time",0,[[["datetime",3]],[["chainepoch",6],["tryfrominterror",3],["result",4]]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]]],"p":[[3,"ChainEpochClock"]]},\
"commcid":{"doc":"","i":[[5,"commitment_to_cid","commcid","CommitmentToCID converts a raw commitment hash to a CID by…",null,[[["commitment",6],["codec",4],["code",4]],[["cid",3],["result",4]]]],[5,"cid_to_commitment","","CIDToCommitment extracts the raw commitment bytes, the…",null,[[["cid",3]],["result",4]]],[5,"data_commitment_v1_to_cid","","DataCommitmentV1ToCID converts a raw data commitment to a…",null,[[["commitment",6]],[["cid",3],["result",4]]]],[5,"cid_to_data_commitment_v1","","cid_to_data_commitment_v1 extracts the raw data commitment…",null,[[["cid",3]],[["result",4],["commitment",6]]]],[5,"replica_commitment_v1_to_cid","","ReplicaCommitmentV1ToCID converts a raw data commitment to…",null,[[["commitment",6]],[["cid",3],["result",4]]]],[5,"cid_to_replica_commitment_v1","","cid_to_replica_commitment_v1 extracts the raw replica…",null,[[["cid",3]],[["result",4],["commitment",6]]]],[5,"piece_commitment_v1_to_cid","","piece_commitment_v1_to_cid converts a comm_p to a CID --…",null,[[["commitment",6]],[["cid",3],["result",4]]]],[5,"cid_to_piece_commitment_v1","","cid_to_piece_commitment_v1 converts a CID to a comm_p --…",null,[[["cid",3]],[["result",4],["commitment",6]]]],[17,"SHA2_256_TRUNC254_PADDED","","Multihash code for Sha2 256 trunc254 padded used in data…",null,null],[17,"POSEIDON_BLS12_381_A1_FC1","","Multihash code for Poseidon BLS replica commitments.",null,null]],"p":[]},\
"conformance_tests":{"doc":"","i":[[3,"MessageVector","conformance_tests","",null,null],[12,"bytes","","",0,null],[12,"epoch","","",0,null],[3,"TestRand","","",null,null],[3,"TestSyscalls","","",null,null],[3,"TipsetVector","","",null,null],[12,"epoch","","",1,null],[12,"basefee","","",1,null],[12,"blocks","","",1,null],[3,"ExecuteTipsetResult","","",null,null],[12,"receipts_root","","",2,null],[12,"post_state_root","","",2,null],[12,"_applied_messages","","",2,null],[12,"applied_results","","",2,null],[3,"StateTreeVector","","",null,null],[12,"root_cid","","",3,null],[3,"GenerationData","","",null,null],[12,"source","","",4,null],[12,"version","","",4,null],[3,"MetaData","","",null,null],[12,"id","","",5,null],[12,"version","","",5,null],[12,"description","","",5,null],[12,"comment","","",5,null],[12,"gen","","",5,null],[3,"PreConditions","","",null,null],[12,"epoch","","",6,null],[12,"state_tree","","",6,null],[12,"basefee","","",6,null],[3,"PostConditions","","",null,null],[12,"state_tree","","",7,null],[12,"receipts","","",7,null],[12,"receipts_roots","","",7,null],[3,"Selector","","",null,null],[12,"puppet_actor","","",8,null],[12,"chaos_actor","","",8,null],[4,"TestVector","","",null,null],[13,"Message","","",9,null],[12,"selector","conformance_tests::TestVector","",10,null],[12,"meta","","",10,null],[12,"car","","",10,null],[12,"preconditions","","",10,null],[12,"apply_messages","","",10,null],[12,"postconditions","","",10,null],[13,"Block","conformance_tests","",9,null],[12,"selector","conformance_tests::TestVector","",11,null],[12,"meta","","",11,null],[13,"Tipset","conformance_tests","",9,null],[12,"selector","conformance_tests::TestVector","",12,null],[12,"meta","","",12,null],[12,"car","","",12,null],[12,"preconditions","","",12,null],[12,"apply_tipsets","","",12,null],[12,"postconditions","","",12,null],[13,"Chain","conformance_tests","",9,null],[12,"selector","conformance_tests::TestVector","",13,null],[12,"meta","","",13,null],[5,"execute_message","conformance_tests","",null,[[["chainepoch",6],["tokenamount",6],["option",4],["chainmessage",4],["memorydb",3],["cid",3]],[["result",4],["box",3]]]],[5,"execute_tipset","","",null,[[["chainepoch",6],["arc",3],["memorydb",3],["tipsetvector",3],["cid",3]],[["result",4],["executetipsetresult",3],["box",3]]]],[5,"to_chain_msg","","",null,[[["unsignedmessage",3]],["chainmessage",4]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"vzip","","",14,[[]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"vzip","","",15,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"vzip","","",5,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"vzip","","",6,[[]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"vzip","","",7,[[]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"vzip","","",8,[[]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"vzip","","",9,[[]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"deserialize","","",0,[[],["result",4]]],[11,"deserialize","","",1,[[],["result",4]]],[11,"deserialize","","",3,[[],["result",4]]],[11,"deserialize","","",4,[[],["result",4]]],[11,"deserialize","","",5,[[],["result",4]]],[11,"deserialize","","",6,[[],["result",4]]],[11,"deserialize","","",7,[[],["result",4]]],[11,"deserialize","","",8,[[],["result",4]]],[11,"deserialize","","",9,[[],["result",4]]],[11,"get_chain_randomness","","",14,[[["domainseparationtag",4],["chainepoch",6]],[["result",4],["box",3]]]],[11,"get_beacon_randomness","","",14,[[["domainseparationtag",4],["chainepoch",6]],[["result",4],["box",3]]]],[11,"verify_signature","","",15,[[["address",3],["signature",3]],[["result",4],["box",3]]]],[11,"verify_seal","","",15,[[["sealverifyinfo",3]],[["result",4],["box",3]]]],[11,"verify_post","","",15,[[["windowpostverifyinfo",3]],[["result",4],["box",3]]]],[11,"verify_consensus_fault","","",15,[[],[["box",3],["result",4],["option",4]]]]],"p":[[3,"MessageVector"],[3,"TipsetVector"],[3,"ExecuteTipsetResult"],[3,"StateTreeVector"],[3,"GenerationData"],[3,"MetaData"],[3,"PreConditions"],[3,"PostConditions"],[3,"Selector"],[4,"TestVector"],[13,"Message"],[13,"Block"],[13,"Tipset"],[13,"Chain"],[3,"TestRand"],[3,"TestSyscalls"]]},\
"db":{"doc":"","i":[[3,"WriteBatch","db","An atomic batch of write operations.",null,null],[3,"MemoryDB","","A thread-safe `HashMap` wrapper.",null,null],[3,"RocksDb","","",null,null],[4,"Error","","Database error",null,null],[13,"InvalidBulkLen","","",0,null],[13,"Unopened","","",0,null],[13,"Database","","",0,null],[13,"Encoding","","",0,null],[13,"Other","","",0,null],[11,"new","","",1,[[]]],[11,"open","","Initializes the database if uninitialized, does nothing if…",1,[[],[["result",4],["error",4]]]],[11,"db","","Returns reference to db as long as it is initialized",1,[[],[["result",4],["error",4],["db",3]]]],[8,"DatabaseService","","",null,null],[11,"open","","",2,[[],[["result",4],["error",4]]]],[8,"Store","","Store interface used as a KV store implementation",null,null],[10,"read","","Read single value from data store and return `None` if key…",3,[[],[["result",4],["error",4],["option",4]]]],[10,"write","","Write a single value to the data store.",3,[[],[["result",4],["error",4]]]],[10,"delete","","Delete value at key.",3,[[],[["result",4],["error",4]]]],[10,"exists","","Returns `Ok(true)` if key exists in store",3,[[],[["result",4],["error",4]]]],[11,"bulk_read","","Read slice of keys and return a vector of optional values.",3,[[],[["vec",3],["error",4],["result",4]]]],[11,"bulk_write","","Write slice of KV pairs.",3,[[],[["result",4],["error",4]]]],[11,"bulk_delete","","Bulk delete keys from the data store.",3,[[],[["result",4],["error",4]]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"drop","","",4,[[]]],[11,"default","","",4,[[],["writebatch",3]]],[11,"open","","",1,[[],[["result",4],["error",4]]]],[11,"write","","",5,[[],[["result",4],["error",4]]]],[11,"delete","","",5,[[],[["result",4],["error",4]]]],[11,"read","","",5,[[],[["result",4],["error",4],["option",4]]]],[11,"exists","","",5,[[],[["result",4],["error",4]]]],[11,"write","","",1,[[],[["result",4],["error",4]]]],[11,"delete","","",1,[[],[["result",4],["error",4]]]],[11,"bulk_write","","",1,[[],[["result",4],["error",4]]]],[11,"read","","",1,[[],[["result",4],["error",4],["option",4]]]],[11,"exists","","",1,[[],[["result",4],["error",4]]]],[11,"from","","",0,[[["error",3]]]],[11,"from","","",0,[[["cborerror",3]]]],[11,"clone","","",5,[[]]],[11,"default","","",5,[[]]],[11,"default","","",1,[[],["rocksdb",3]]],[11,"eq","","",0,[[]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"source","","",0,[[],[["error",8],["option",4]]]],[11,"len","","",4,[[]]],[11,"size_in_bytes","","Return WriteBatch serialized size (in bytes).",4,[[]]],[11,"is_empty","","",4,[[]]],[11,"iterate","","Iterate the put and delete operations within this write…",4,[[["writebatchiterator",8]]]],[11,"put","","Insert a value into the database under the given key.",4,[[]]],[11,"put_cf","","",4,[[["columnfamily",3]]]],[11,"merge","","",4,[[]]],[11,"merge_cf","","",4,[[["columnfamily",3]]]],[11,"delete","","Removes the database entry for key. Does nothing if the…",4,[[]]],[11,"delete_cf","","",4,[[["columnfamily",3]]]],[11,"delete_range","","Remove database entries from start key to end key.",4,[[]]],[11,"delete_range_cf","","Remove database entries in column family from start key to…",4,[[["columnfamily",3]]]],[11,"clear","","Clear all updates buffered in this batch.",4,[[]]]],"p":[[4,"Error"],[3,"RocksDb"],[8,"DatabaseService"],[8,"Store"],[3,"WriteBatch"],[3,"MemoryDB"]]},\
"fil_types":{"doc":"","i":[[3,"UnpaddedPieceSize","fil_types","Size of a piece in bytes",null,null],[12,"0","","",0,null],[3,"PaddedPieceSize","","Size of a piece in bytes with padding",null,null],[12,"0","","",1,null],[3,"PieceInfo","","",null,null],[12,"size","","Size in nodes. For BLS12-381 (capacity 254 bits), must be…",2,null],[12,"cid","","Content identifier for piece",2,null],[3,"Randomness","","String of random bytes",null,null],[12,"0","","",3,null],[3,"DevnetParams","","",null,null],[5,"zero_piece_commitment","","",null,[[["paddedpiecesize",3]],["commitment",6]]],[0,"genesis","","",null,null],[3,"Actor","fil_types::genesis","",null,null],[12,"actor_type","","",4,null],[12,"balance","","",4,null],[12,"owner","","",4,null],[3,"Miner","","",null,null],[12,"owner","","",5,null],[12,"worker","","",5,null],[12,"peer_id","","",5,null],[12,"market_balance","","",5,null],[12,"power_balance","","",5,null],[12,"sector_size","","",5,null],[3,"Template","","",null,null],[12,"accounts","","",6,null],[12,"miners","","",6,null],[12,"network_name","","",6,null],[4,"ActorType","","",null,null],[13,"Account","","",7,null],[13,"MultiSig","","",7,null],[11,"new","","",6,[[["string",3]],["template",3]]],[11,"padded","fil_types","Converts unpadded piece size into padded piece size",0,[[],["paddedpiecesize",3]]],[11,"validate","","Validates piece size",0,[[],["result",4]]],[11,"unpadded","","Converts padded piece size into an unpadded piece size",1,[[],["unpaddedpiecesize",3]]],[11,"validate","","Validates piece size",1,[[],["result",4]]],[0,"sector","","",null,null],[3,"SealVerifyInfo","fil_types::sector","Information needed to verify a seal proof.",null,null],[12,"registered_proof","","",8,null],[12,"sector_id","","",8,null],[12,"deal_ids","","",8,null],[12,"randomness","","",8,null],[12,"interactive_randomness","","",8,null],[12,"proof","","",8,null],[12,"sealed_cid","","",8,null],[12,"unsealed_cid","","",8,null],[3,"SealVerifyParams","","SealVerifyParams is the structure of information that must…",null,null],[12,"sealed_cid","","",9,null],[12,"interactive_epoch","","",9,null],[12,"registered_seal_proof","","",9,null],[12,"proof","","",9,null],[12,"deal_ids","","",9,null],[12,"sector_num","","",9,null],[12,"seal_rand_epoch","","",9,null],[3,"SectorID","","Sector ID which contains the sector number and the actor…",null,null],[12,"miner","","",10,null],[12,"number","","",10,null],[4,"RegisteredSealProof","","",null,null],[13,"StackedDRG2KiBV1","","",11,null],[13,"StackedDRG512MiBV1","","",11,null],[13,"StackedDRG8MiBV1","","",11,null],[13,"StackedDRG32GiBV1","","",11,null],[13,"StackedDRG64GiBV1","","",11,null],[13,"Invalid","","",11,null],[4,"RegisteredPoStProof","","",null,null],[13,"StackedDRGWinning2KiBV1","","",12,null],[13,"StackedDRGWinning8MiBV1","","",12,null],[13,"StackedDRGWinning512MiBV1","","",12,null],[13,"StackedDRGWinning32GiBV1","","",12,null],[13,"StackedDRGWinning64GiBV1","","",12,null],[13,"StackedDRGWindow2KiBV1","","",12,null],[13,"StackedDRGWindow8MiBV1","","",12,null],[13,"StackedDRGWindow512MiBV1","","",12,null],[13,"StackedDRGWindow32GiBV1","","",12,null],[13,"StackedDRGWindow64GiBV1","","",12,null],[13,"Invalid","","",12,null],[4,"SectorSize","","SectorSize indicates one of a set of possible sizes in the…",null,null],[13,"_2KiB","","",13,null],[13,"_8MiB","","",13,null],[13,"_512MiB","","",13,null],[13,"_32GiB","","",13,null],[13,"_64GiB","","",13,null],[0,"post","","",null,null],[3,"SectorInfo","fil_types::sector::post","Information about a sector necessary for PoSt verification",null,null],[12,"proof","","Used when sealing - needs to be mapped to PoSt registered…",14,null],[12,"sector_number","","",14,null],[12,"sealed_cid","","",14,null],[3,"PoStProof","","",null,null],[12,"post_proof","","",15,null],[12,"proof_bytes","","",15,null],[3,"WinningPoStVerifyInfo","","Information needed to verify a Winning PoSt attached to a…",null,null],[12,"randomness","","",16,null],[12,"proofs","","",16,null],[12,"challenge_sectors","","",16,null],[12,"prover","","Used to derive 32-byte prover ID",16,null],[3,"WindowPoStVerifyInfo","","Information needed to verify a Window PoSt submitted…",null,null],[12,"randomness","","",17,null],[12,"proofs","","",17,null],[12,"challenged_sectors","","",17,null],[12,"prover","","",17,null],[3,"OnChainWindowPoStVerifyInfo","","Information submitted by a miner to provide a Window PoSt.",null,null],[12,"proofs","","",18,null],[0,"json","","",null,null],[3,"PoStProofJson","fil_types::sector::post::json","Wrapper for serializing a PoStProof to JSON.",null,null],[12,"0","","",19,null],[3,"PoStProofJsonRef","","Wrapper for serializing a PoStProof reference to JSON.",null,null],[12,"0","","",20,null],[5,"serialize","","",null,[[["postproof",3]],["result",4]]],[5,"deserialize","","",null,[[],[["postproof",3],["result",4]]]],[0,"vec","","",null,null],[5,"serialize","fil_types::sector::post::json::vec","",null,[[],["result",4]]],[5,"deserialize","","",null,[[],[["vec",3],["result",4]]]],[6,"PoStRandomness","fil_types::sector::post","",null,null],[11,"sector_maximum_lifetime","fil_types::sector","The maximum duration a sector sealed with this proof may…",11,[[],["chainepoch",6]]],[11,"sector_size","","Returns the sector size of the proof type, which is…",12,[[],[["result",4],["string",3],["sectorsize",4]]]],[11,"registered_seal_proof","","RegisteredSealProof produces the seal-specific…",12,[[],[["registeredsealproof",4],["string",3],["result",4]]]],[11,"sector_size","","Returns the sector size of the proof type, which is…",11,[[],[["result",4],["string",3],["sectorsize",4]]]],[11,"window_post_partitions_sector","","Returns the partition size, in sectors, associated with a…",11,[[],[["string",3],["result",4]]]],[11,"registered_winning_post_proof","","Produces the winning PoSt-specific RegisteredProof…",11,[[],[["string",3],["registeredpostproof",4],["result",4]]]],[11,"registered_window_post_proof","","Produces the windowed PoSt-specific RegisteredProof…",11,[[],[["string",3],["registeredpostproof",4],["result",4]]]],[6,"SealRandomness","","",null,null],[6,"InteractiveSealRandomness","","",null,null],[6,"SectorNumber","","",null,null],[6,"StoragePower","","Unit of storage power (measured in bytes)",null,null],[6,"Spacetime","","The unit of spacetime committed to the network",null,null],[6,"SectorQuality","","Unit of sector quality",null,null],[17,"MAX_SECTOR_NUMBER","","The maximum assignable sector number. Raising this would…",null,null],[0,"verifier","fil_types","",null,null],[4,"MockVerifier","fil_types::verifier","Verifier implementation",null,null],[4,"FullVerifier","","Verifier implementation",null,null],[8,"ProofVerifier","","Functionality for verification of seal, winning PoSt and…",null,null],[11,"verify_seal","","Verify seal proof for sectors. This proof verifies that a…",21,[[["sealverifyinfo",3]],[["result",4],["box",3]]]],[11,"verify_winning_post","","Verifies winning proof of spacetime. These proofs are…",21,[[["randomness",3]],[["result",4],["box",3]]]],[11,"verify_window_post","","Verifies window proof of spacetime. These proofs are…",21,[[["randomness",3]],[["result",4],["box",3]]]],[11,"generate_winning_post_sector_challenge","","Generates sector challenge indexes for use in winning PoSt…",21,[[["registeredpostproof",4],["randomness",3]],[["result",4],["box",3],["vec",3]]]],[6,"ActorID","fil_types","Identifier for Actors, includes builtin and initialized…",null,null],[17,"HAMT_BIT_WIDTH","","Default bit width for the hamt in the filecoin protocol.",null,null],[17,"BLOCK_GAS_LIMIT","","",null,null],[17,"TOTAL_FILECOIN","","",null,null],[17,"TICKET_RANDOMNESS_LOOKBACK","","",null,null],[17,"WINNING_POST_SECTOR_SET_LOOKBACK","","",null,null],[17,"BLOCKS_PER_EPOCH","","The expected number of block producers in each epoch.",null,null],[17,"FILECOIN_PRECISION","","Ratio of integer values to token value.",null,null],[17,"BLOCK_DELAY_SECS","","Block delay, or epoch duration, to be used in blockchain…",null,null],[17,"ALLOWABLE_CLOCK_DRIFT","","Allowable clock drift in validations.",null,null],[17,"UPGRADE_SMOKE_HEIGHT","","Space-race specific fork",null,null],[8,"NetworkParams","","Config trait which handles different network configurations.",null,null],[18,"TOTAL_FILECOIN","","Total filecoin available to network.",22,null],[18,"MINING_REWARD_TOTAL","","Available rewards for mining.",22,null],[11,"initial_reward_balance","","Initial reward actor balance. This function is only called…",22,[[],["bigint",3]]],[11,"from_fil","","Convert integer value of tokens into BigInt based on the…",22,[[],["bigint",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"equivalent","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"equivalent","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"equivalent","","",3,[[]]],[11,"from","","",23,[[]]],[11,"into","","",23,[[]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"vzip","","",23,[[]]],[11,"from","fil_types::genesis","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"vzip","","",5,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"vzip","","",6,[[]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"vzip","","",7,[[]]],[11,"from","fil_types::sector","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"vzip","","",8,[[]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"vzip","","",9,[[]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"vzip","","",10,[[]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"vzip","","",11,[[]]],[11,"equivalent","","",11,[[]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"vzip","","",12,[[]]],[11,"equivalent","","",12,[[]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"to_string","","",13,[[],["string",3]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"vzip","","",13,[[]]],[11,"from","fil_types::sector::post","",14,[[]]],[11,"into","","",14,[[]]],[11,"to_owned","","",14,[[]]],[11,"clone_into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"vzip","","",14,[[]]],[11,"equivalent","","",14,[[]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"to_owned","","",15,[[]]],[11,"clone_into","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"vzip","","",15,[[]]],[11,"equivalent","","",15,[[]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"to_owned","","",16,[[]]],[11,"clone_into","","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"vzip","","",16,[[]]],[11,"equivalent","","",16,[[]]],[11,"from","","",17,[[]]],[11,"into","","",17,[[]]],[11,"to_owned","","",17,[[]]],[11,"clone_into","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"vzip","","",17,[[]]],[11,"equivalent","","",17,[[]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"to_owned","","",18,[[]]],[11,"clone_into","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"vzip","","",18,[[]]],[11,"equivalent","","",18,[[]]],[11,"from","fil_types::sector::post::json","",19,[[]]],[11,"into","","",19,[[]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"vzip","","",19,[[]]],[11,"from","","",20,[[]]],[11,"into","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"vzip","","",20,[[]]],[11,"from","fil_types::verifier","",24,[[]]],[11,"into","","",24,[[]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"vzip","","",24,[[]]],[11,"from","","",25,[[]]],[11,"into","","",25,[[]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"vzip","","",25,[[]]],[11,"verify_seal","","",24,[[["sealverifyinfo",3]],[["result",4],["box",3]]]],[11,"verify_winning_post","","",24,[[["randomness",3]],[["result",4],["box",3]]]],[11,"verify_window_post","","",24,[[["randomness",3]],[["result",4],["box",3]]]],[11,"generate_winning_post_sector_challenge","","",24,[[["registeredpostproof",4],["randomness",3]],[["result",4],["box",3],["vec",3]]]],[11,"from","fil_types::sector::post","",15,[[["postproofjson",3]]]],[11,"from","fil_types::sector","",12,[[]]],[11,"from","","",11,[[]]],[11,"from","","",11,[[["sectorsize",4]]]],[11,"clone","fil_types","",0,[[],["unpaddedpiecesize",3]]],[11,"clone","","",1,[[],["paddedpiecesize",3]]],[11,"clone","","",2,[[],["pieceinfo",3]]],[11,"clone","","",3,[[],["randomness",3]]],[11,"clone","fil_types::sector::post","",14,[[],["sectorinfo",3]]],[11,"clone","","",15,[[],["postproof",3]]],[11,"clone","","",16,[[],["winningpostverifyinfo",3]]],[11,"clone","","",17,[[],["windowpostverifyinfo",3]]],[11,"clone","","",18,[[],["onchainwindowpostverifyinfo",3]]],[11,"clone","fil_types::sector","",11,[[],["registeredsealproof",4]]],[11,"clone","","",12,[[],["registeredpostproof",4]]],[11,"clone","","",8,[[],["sealverifyinfo",3]]],[11,"clone","","",9,[[],["sealverifyparams",3]]],[11,"clone","","",13,[[],["sectorsize",4]]],[11,"clone","","",10,[[],["sectorid",3]]],[11,"default","fil_types","",3,[[],["randomness",3]]],[11,"default","fil_types::sector::post","",16,[[],["winningpostverifyinfo",3]]],[11,"default","","",17,[[],["windowpostverifyinfo",3]]],[11,"default","","",18,[[],["onchainwindowpostverifyinfo",3]]],[11,"default","fil_types::sector","",10,[[],["sectorid",3]]],[11,"eq","fil_types","",0,[[["unpaddedpiecesize",3]]]],[11,"ne","","",0,[[["unpaddedpiecesize",3]]]],[11,"eq","","",1,[[["paddedpiecesize",3]]]],[11,"ne","","",1,[[["paddedpiecesize",3]]]],[11,"eq","","",2,[[["pieceinfo",3]]]],[11,"ne","","",2,[[["pieceinfo",3]]]],[11,"eq","","",3,[[["randomness",3]]]],[11,"ne","","",3,[[["randomness",3]]]],[11,"eq","fil_types::sector::post","",14,[[["sectorinfo",3]]]],[11,"ne","","",14,[[["sectorinfo",3]]]],[11,"eq","","",15,[[["postproof",3]]]],[11,"ne","","",15,[[["postproof",3]]]],[11,"eq","","",16,[[["winningpostverifyinfo",3]]]],[11,"ne","","",16,[[["winningpostverifyinfo",3]]]],[11,"eq","","",17,[[["windowpostverifyinfo",3]]]],[11,"ne","","",17,[[["windowpostverifyinfo",3]]]],[11,"eq","","",18,[[["onchainwindowpostverifyinfo",3]]]],[11,"ne","","",18,[[["onchainwindowpostverifyinfo",3]]]],[11,"eq","fil_types::sector","",11,[[["registeredsealproof",4]]]],[11,"ne","","",11,[[["registeredsealproof",4]]]],[11,"eq","","",12,[[["registeredpostproof",4]]]],[11,"ne","","",12,[[["registeredpostproof",4]]]],[11,"eq","","",8,[[["sealverifyinfo",3]]]],[11,"ne","","",8,[[["sealverifyinfo",3]]]],[11,"eq","","",9,[[["sealverifyparams",3]]]],[11,"ne","","",9,[[["sealverifyparams",3]]]],[11,"eq","","",13,[[["sectorsize",4]]]],[11,"eq","","",10,[[["sectorid",3]]]],[11,"ne","","",10,[[["sectorid",3]]]],[11,"fmt","fil_types","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","fil_types::sector::post","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",16,[[["formatter",3]],["result",6]]],[11,"fmt","","",17,[[["formatter",3]],["result",6]]],[11,"fmt","","",18,[[["formatter",3]],["result",6]]],[11,"fmt","fil_types::sector","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"hash","","",11,[[]]],[11,"hash","","",12,[[]]],[11,"from_i64","","",13,[[],["option",4]]],[11,"from_u64","","",13,[[],["option",4]]],[11,"deserialize","fil_types::genesis","",7,[[],["result",4]]],[11,"deserialize","","",4,[[],["result",4]]],[11,"deserialize","","",5,[[],["result",4]]],[11,"deserialize","","",6,[[],["result",4]]],[11,"deserialize","fil_types","",1,[[],["result",4]]],[11,"deserialize","","",2,[[],["result",4]]],[11,"deserialize","","",3,[[],["result",4]]],[11,"deserialize","fil_types::sector::post","",14,[[],["result",4]]],[11,"deserialize","","",15,[[],["result",4]]],[11,"deserialize","","",16,[[],["result",4]]],[11,"deserialize","","",17,[[],["result",4]]],[11,"deserialize","","",18,[[],["result",4]]],[11,"deserialize","fil_types::sector::post::json","",19,[[],["result",4]]],[11,"deserialize","fil_types::sector","",12,[[],["result",4]]],[11,"deserialize","","",11,[[],["result",4]]],[11,"deserialize","","",8,[[],["result",4]]],[11,"deserialize","","",9,[[],["result",4]]],[11,"deserialize","","",13,[[],["result",4]]],[11,"deserialize","","",10,[[],["result",4]]],[11,"serialize","fil_types::genesis","",7,[[],["result",4]]],[11,"serialize","","",4,[[],["result",4]]],[11,"serialize","","",5,[[],["result",4]]],[11,"serialize","","",6,[[],["result",4]]],[11,"serialize","fil_types","",1,[[],["result",4]]],[11,"serialize","","",2,[[],["result",4]]],[11,"serialize","","",3,[[],["result",4]]],[11,"serialize","fil_types::sector::post","",14,[[],["result",4]]],[11,"serialize","","",15,[[],["result",4]]],[11,"serialize","","",16,[[],["result",4]]],[11,"serialize","","",17,[[],["result",4]]],[11,"serialize","","",18,[[],["result",4]]],[11,"serialize","fil_types::sector::post::json","",19,[[],["result",4]]],[11,"serialize","","",20,[[],["result",4]]],[11,"serialize","fil_types::sector","",12,[[],["result",4]]],[11,"serialize","","",11,[[],["result",4]]],[11,"serialize","","",8,[[],["result",4]]],[11,"serialize","","",9,[[],["result",4]]],[11,"serialize","","",13,[[],["result",4]]],[11,"serialize","","",10,[[],["result",4]]]],"p":[[3,"UnpaddedPieceSize"],[3,"PaddedPieceSize"],[3,"PieceInfo"],[3,"Randomness"],[3,"Actor"],[3,"Miner"],[3,"Template"],[4,"ActorType"],[3,"SealVerifyInfo"],[3,"SealVerifyParams"],[3,"SectorID"],[4,"RegisteredSealProof"],[4,"RegisteredPoStProof"],[4,"SectorSize"],[3,"SectorInfo"],[3,"PoStProof"],[3,"WinningPoStVerifyInfo"],[3,"WindowPoStVerifyInfo"],[3,"OnChainWindowPoStVerifyInfo"],[3,"PoStProofJson"],[3,"PoStProofJsonRef"],[8,"ProofVerifier"],[8,"NetworkParams"],[3,"DevnetParams"],[4,"MockVerifier"],[4,"FullVerifier"]]},\
"forest":{"doc":"","i":[[5,"main","forest","",null,[[]]],[0,"cli","","",null,null],[3,"CLI","forest::cli","CLI structure generated when interacting with Forest binary",null,null],[12,"daemon_opts","","",0,null],[12,"cmd","","",0,null],[3,"DaemonOpts","","Daemon process command line options.",null,null],[12,"config","","",1,null],[12,"genesis","","",1,null],[12,"rpc","","",1,null],[12,"port","","",1,null],[12,"kademlia","","",1,null],[12,"mdns","","",1,null],[4,"Subcommand","","Forest binary subcommands available.",null,null],[13,"Fetch","","",2,null],[13,"Chain","","",2,null],[13,"Genesis","","",2,null],[5,"block_until_sigint","","Blocks current thread until ctrl-c is received",null,[[]]],[5,"stringify_rpc_err","","Returns a stringified JSON-RPC error",null,[[["jsonrpcerror",4]],["string",3]]],[0,"chain_cmd","","",null,null],[4,"ChainCommands","forest::cli::chain_cmd","",null,null],[13,"Block","","Retrieves and prints out the block specified by the given…",3,null],[12,"cid","forest::cli::chain_cmd::ChainCommands","",4,null],[13,"Genesis","forest::cli::chain_cmd","Prints out the genesis tipset",3,null],[13,"Head","","Prints out the canonical head of the chain",3,null],[13,"Message","","Reads and prints out a message referenced by the specified…",3,null],[12,"cid","forest::cli::chain_cmd::ChainCommands","",5,null],[13,"ReadObj","forest::cli::chain_cmd","Reads and prints out ipld nodes referenced by the…",3,null],[12,"cid","forest::cli::chain_cmd::ChainCommands","",6,null],[11,"run","forest::cli::chain_cmd","",3,[[]]],[0,"config","forest::cli","",null,null],[3,"Config","forest::cli::config","",null,null],[12,"network","","",7,null],[12,"data_dir","","",7,null],[12,"genesis_file","","",7,null],[12,"drand_public","","",7,null],[12,"enable_rpc","","",7,null],[12,"rpc_port","","",7,null],[0,"fetch_params_cmd","forest::cli","",null,null],[3,"FetchCommands","forest::cli::fetch_params_cmd","",null,null],[12,"all","","",8,null],[12,"keys","","",8,null],[12,"params_size","","",8,null],[12,"verbose","","",8,null],[5,"ram_to_int","","Converts a human readable string to a u64 size.",null,[[],[["result",4],["string",3],["sectorsize",4]]]],[11,"run","","",8,[[]]],[0,"genesis","forest::cli","",null,null],[5,"initialize_genesis","forest::cli::genesis","Uses an optional file path or the default genesis to parse…",null,[[["option",4],["chainstore",3]],[["result",4],["box",3]]]],[5,"process_car","","",null,[[["chainstore",3],["bufreader",3]],[["result",4],["blockheader",3],["box",3]]]],[0,"genesis_cmd","forest::cli","",null,null],[4,"GenesisCommands","forest::cli::genesis_cmd","",null,null],[13,"NewTemplate","","Creates new genesis template",9,null],[12,"network_name","forest::cli::genesis_cmd::GenesisCommands","",10,null],[12,"file_path","","",10,null],[13,"AddMiner","forest::cli::genesis_cmd","Adds miner to Genesis.",9,null],[12,"genesis_path","forest::cli::genesis_cmd::GenesisCommands","",11,null],[12,"preseal_path","","",11,null],[5,"add_miner","forest::cli::genesis_cmd","",null,[[["string",3]],[["box",3],["result",4]]]],[17,"ACCOUNT_START","","",null,null],[11,"run","","",9,[[]]],[11,"to_config","forest::cli","",1,[[],[["error",3],["config",3],["result",4]]]],[0,"daemon","forest","",null,null],[5,"start","forest::daemon","Starts daemon process",null,[[["config",3]]]],[17,"WORKER_TASKS","","Number of tasks spawned for sync workers.",null,null],[0,"logger","forest","",null,null],[5,"setup_logger","forest::logger","",null,[[]]],[0,"paramfetch","forest","",null,null],[3,"ParameterData","forest::paramfetch","",null,null],[12,"cid","","",12,null],[12,"digest","","",12,null],[12,"sector_size","","",12,null],[3,"FetchProgress","","",null,null],[12,"inner","","",13,null],[12,"progress_bar","","",13,null],[4,"SectorSizeOpt","","Sector size options for fetching.",null,null],[13,"All","","All keys and proofs gen params",14,null],[13,"Keys","","Only verification params",14,null],[13,"Size","","All keys and proofs gen params for a given size",14,null],[5,"param_dir","","",null,[[],["string",3]]],[5,"get_params","","Get proofs parameters and all verification keys for a…",null,[[["sectorsizeopt",4]]]],[5,"get_params_default","","Get proofs parameters and all verification keys for a…",null,[[["sectorsizeopt",4]]]],[5,"fetch_verify_params","","",null,[[["arc",3],["parameterdata",3],["arc",3],["option",4]]]],[5,"fetch_params","","",null,[[["arc",3],["parameterdata",3],["path",3],["option",4]]]],[5,"check_file","","",null,[[["pathbuf",3],["arc",3],["parameterdata",3],["arc",3]]]],[6,"ParameterMap","","",null,null],[17,"GATEWAY","","",null,null],[17,"PARAM_DIR","","",null,null],[17,"DIR_ENV","","",null,null],[17,"GATEWAY_ENV","","",null,null],[17,"TRUST_PARAMS_ENV","","",null,null],[17,"DEFAULT_PARAMETERS","","",null,null],[11,"finish","","",13,[[]]],[0,"subcommand","forest","",null,null],[5,"process","forest::subcommand","Process CLI subcommand",null,[[["subcommand",4]]]],[11,"from","forest::cli","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","forest::cli::chain_cmd","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"from","forest::cli::config","",7,[[]]],[11,"into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"vzip","","",7,[[]]],[11,"from","forest::cli::fetch_params_cmd","",8,[[]]],[11,"into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"vzip","","",8,[[]]],[11,"from","forest::cli::genesis_cmd","",9,[[]]],[11,"into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"vzip","","",9,[[]]],[11,"from","forest::paramfetch","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"vzip","","",12,[[]]],[11,"erased_serialize","","",12,[[["serializer",8]],[["error",3],["ok",3],["result",4]]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"vzip","","",13,[[]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"vzip","","",14,[[]]],[11,"clone","","",12,[[],["parameterdata",3]]],[11,"default","forest::cli::config","",7,[[]]],[11,"fmt","forest::cli::chain_cmd","",3,[[["formatter",3]],["result",6]]],[11,"fmt","forest::cli::config","",7,[[["formatter",3]],["result",6]]],[11,"fmt","forest::cli::fetch_params_cmd","",8,[[["formatter",3]],["result",6]]],[11,"fmt","forest::cli::genesis_cmd","",9,[[["formatter",3]],["result",6]]],[11,"fmt","forest::cli","",1,[[["formatter",3]],["result",6]]],[11,"fmt","forest::paramfetch","",12,[[["formatter",3]],["result",6]]],[11,"serialize","","",12,[[],["result",4]]],[11,"deserialize","forest::cli::config","",7,[[],["result",4]]],[11,"deserialize","forest::paramfetch","",12,[[],["result",4]]],[11,"poll_fill_buf","","",13,[[["pin",3],["context",3]],[["poll",4],["result",6]]]],[11,"consume","","",13,[[["pin",3]]]],[11,"poll_read","","",13,[[["pin",3],["context",3]],[["poll",4],["result",4]]]],[11,"clap","forest::cli::chain_cmd","",3,[[],["app",3]]],[11,"from_clap","","",3,[[["argmatches",3]]]],[11,"clap","forest::cli::fetch_params_cmd","",8,[[],["app",3]]],[11,"from_clap","","",8,[[["argmatches",3]]]],[11,"clap","forest::cli::genesis_cmd","",9,[[],["app",3]]],[11,"from_clap","","",9,[[["argmatches",3]]]],[11,"clap","forest::cli","",0,[[],["app",3]]],[11,"from_clap","","",0,[[["argmatches",3]]]],[11,"clap","","",2,[[],["app",3]]],[11,"from_clap","","",2,[[["argmatches",3]]]],[11,"clap","","",1,[[],["app",3]]],[11,"from_clap","","",1,[[["argmatches",3]]]],[11,"augment_clap","forest::cli::chain_cmd","",3,[[["app",3]],["app",3]]],[11,"from_subcommand","","",3,[[],["option",4]]],[11,"is_subcommand","","",3,[[]]],[11,"augment_clap","forest::cli::fetch_params_cmd","",8,[[["app",3]],["app",3]]],[11,"is_subcommand","","",8,[[]]],[11,"augment_clap","forest::cli::genesis_cmd","",9,[[["app",3]],["app",3]]],[11,"from_subcommand","","",9,[[],["option",4]]],[11,"is_subcommand","","",9,[[]]],[11,"augment_clap","forest::cli","",0,[[["app",3]],["app",3]]],[11,"is_subcommand","","",0,[[]]],[11,"augment_clap","","",2,[[["app",3]],["app",3]]],[11,"from_subcommand","","",2,[[],["option",4]]],[11,"is_subcommand","","",2,[[]]],[11,"augment_clap","","",1,[[["app",3]],["app",3]]],[11,"is_subcommand","","",1,[[]]]],"p":[[3,"CLI"],[3,"DaemonOpts"],[4,"Subcommand"],[4,"ChainCommands"],[13,"Block"],[13,"Message"],[13,"ReadObj"],[3,"Config"],[3,"FetchCommands"],[4,"GenesisCommands"],[13,"NewTemplate"],[13,"AddMiner"],[3,"ParameterData"],[3,"FetchProgress"],[4,"SectorSizeOpt"]]},\
"forest_address":{"doc":"","i":[[3,"BLSPublicKey","forest_address","Public key struct used as BLS Address data. This type is…",null,null],[12,"0","","",0,null],[3,"Address","","Address is the struct that defines the protocol and data…",null,null],[4,"Error","","Address error",null,null],[13,"UnknownNetwork","","",1,null],[13,"UnknownProtocol","","",1,null],[13,"InvalidPayload","","",1,null],[13,"InvalidLength","","",1,null],[13,"InvalidPayloadLength","","",1,null],[13,"InvalidBLSLength","","",1,null],[13,"InvalidSECPLength","","",1,null],[13,"InvalidChecksum","","",1,null],[13,"Base32Decoding","","",1,null],[13,"NonIDAddress","","",1,null],[4,"Network","","Network defines the preconfigured networks to use with…",null,null],[13,"Mainnet","","",2,null],[13,"Testnet","","",2,null],[4,"Payload","","Payload is the data of the Address. Variants are the…",null,null],[13,"ID","","ID protocol address.",3,null],[13,"Secp256k1","","SECP256K1 key address, 20 byte hash of PublicKey",3,null],[13,"Actor","","Actor protocol address, 20 byte hash of actor data",3,null],[13,"BLS","","BLS key address, full 48 byte public key",3,null],[4,"Protocol","","Protocol defines the addressing protocol used to derive…",null,null],[13,"ID","","ID protocol addressing",4,null],[13,"Secp256k1","","SECP256K1 key addressing",4,null],[13,"Actor","","Actor protocol addressing",4,null],[13,"BLS","","BLS key addressing",4,null],[5,"checksum","","Checksum calculates the 4 byte checksum hash",null,[[],["vec",3]]],[5,"validate_checksum","","Validates the checksum against the ingest data",null,[[["vec",3]]]],[11,"to_raw_bytes","","Returns encoded bytes of Address without the protocol byte.",3,[[],["vec",3]]],[11,"to_bytes","","Returns encoded bytes of Address including the protocol…",3,[[],["vec",3]]],[11,"new","","Generates payload from raw bytes and protocol.",3,[[["protocol",4]],[["error",4],["result",4]]]],[0,"json","","",null,null],[3,"AddressJson","forest_address::json","Wrapper for serializing and deserializing a SignedMessage…",null,null],[12,"0","","",5,null],[3,"AddressJsonRef","","Wrapper for serializing a SignedMessage reference to JSON.",null,null],[12,"0","","",6,null],[5,"serialize","","",null,[[["address",3]],["result",4]]],[5,"deserialize","","",null,[[],[["result",4],["address",3]]]],[17,"PAYLOAD_HASH_LEN","forest_address","Hash length of payload for Secp and Actor addresses.",null,null],[17,"SECP_PUB_LEN","","Uncompressed secp public key used for validation of Secp…",null,null],[17,"BLS_PUB_LEN","","BLS public key length used for validation of BLS addresses.",null,null],[17,"CHECKSUM_HASH_LEN","","Length of the checksum hash for string encodings.",null,null],[11,"from_bytes","","Creates address from encoded bytes",7,[[],[["error",4],["result",4]]]],[11,"new_id","","Generates new address using ID protocol",7,[[]]],[11,"new_secp256k1","","Generates new address using Secp256k1 pubkey",7,[[],[["error",4],["result",4]]]],[11,"new_actor","","Generates new address using the Actor protocol",7,[[]]],[11,"new_bls","","Generates new address using BLS pubkey",7,[[],[["error",4],["result",4]]]],[11,"protocol","","Returns protocol for Address",7,[[],["protocol",4]]],[11,"payload","","Returns the `Payload` object from the address, where the…",7,[[],["payload",4]]],[11,"into_payload","","Converts Address into `Payload` object, where the…",7,[[],["payload",4]]],[11,"payload_bytes","","Returns the raw bytes data payload of the Address",7,[[],["vec",3]]],[11,"network","","Returns network configuration of Address",7,[[],["network",4]]],[11,"set_network","","Sets the network for the address and returns a mutable…",7,[[["network",4]]]],[11,"to_bytes","","Returns encoded bytes of Address",7,[[],["vec",3]]],[11,"id","","Get ID of the address. ID protocol only.",7,[[],[["error",4],["result",4]]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"to_string","","",7,[[],["string",3]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_string","","",1,[[],["string",3]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"to_string","","",4,[[],["string",3]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","forest_address::json","",5,[[]]],[11,"into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","forest_address","",1,[[["decodeerror",3]]]],[11,"from","","",1,[[["parseinterror",3]],["error",4]]],[11,"from","","",1,[[["error",3]],["error",4]]],[11,"from","","",1,[[["leb128error",4]],["error",4]]],[11,"from","","",0,[[]]],[11,"from","","",4,[[["payload",4]]]],[11,"from","","",4,[[["payload",4]]]],[11,"from","forest_address::json","",5,[[["address",3]]]],[11,"clone","forest_address","",2,[[],["network",4]]],[11,"clone","","",0,[[],["blspublickey",3]]],[11,"clone","","",3,[[],["payload",4]]],[11,"clone","","",4,[[],["protocol",4]]],[11,"clone","","",7,[[],["address",3]]],[11,"default","","",2,[[]]],[11,"eq","","",1,[[["error",4]]]],[11,"ne","","",1,[[["error",4]]]],[11,"eq","","",2,[[["network",4]]]],[11,"eq","","",0,[[]]],[11,"eq","","",3,[[["payload",4]]]],[11,"ne","","",3,[[["payload",4]]]],[11,"eq","","",4,[[["protocol",4]]]],[11,"eq","","",7,[[["address",3]]]],[11,"ne","","",7,[[["address",3]]]],[11,"deref","","",0,[[]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"hash","","",2,[[]]],[11,"hash","","",0,[[]]],[11,"hash","","",3,[[]]],[11,"hash","","",4,[[]]],[11,"hash","","",7,[[]]],[11,"from_str","","",7,[[],[["error",4],["result",4]]]],[11,"source","","",1,[[],[["error",8],["option",4]]]],[11,"from_i64","","",4,[[],["option",4]]],[11,"from_u64","","",4,[[],["option",4]]],[11,"serialize","","",7,[[],["result",4]]],[11,"serialize","forest_address::json","",5,[[],["result",4]]],[11,"serialize","","",6,[[],["result",4]]],[11,"deserialize","forest_address","",7,[[],["result",4]]],[11,"deserialize","forest_address::json","",5,[[],["result",4]]]],"p":[[3,"BLSPublicKey"],[4,"Error"],[4,"Network"],[4,"Payload"],[4,"Protocol"],[3,"AddressJson"],[3,"AddressJsonRef"],[3,"Address"]]},\
"forest_bigint":{"doc":"","i":[[3,"ParseBigIntError","forest_bigint","",null,null],[3,"TryFromBigIntError","","The error type returned when a checked conversion…",null,null],[3,"BigUint","","A big unsigned integer type.",null,null],[8,"ToBigUint","","A generic trait for converting a value to a `BigUint`.",null,null],[10,"to_biguint","","Converts the value of `self` to a `BigUint`.",0,[[],[["biguint",3],["option",4]]]],[3,"BigInt","","A big signed integer type.",null,null],[4,"Sign","","A Sign is a `BigInt`\'s composing element.",null,null],[13,"Minus","","",1,null],[13,"NoSign","","",1,null],[13,"Plus","","",1,null],[8,"ToBigInt","","A generic trait for converting a value to a `BigInt`. This…",null,null],[10,"to_bigint","","Converts the value of `self` to a `BigInt`.",2,[[],[["option",4],["bigint",3]]]],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",3,[[]]],[10,"mod_floor","","Floored integer modulo, satisfying:",3,[[]]],[11,"div_ceil","","Ceiled integer division.",3,[[]]],[10,"gcd","","Greatest Common Divisor (GCD).",3,[[]]],[10,"lcm","","Lowest Common Multiple (LCM).",3,[[]]],[11,"gcd_lcm","","Greatest Common Divisor (GCD) and Lowest Common Multiple…",3,[[]]],[11,"extended_gcd","","Greatest common divisor and Bézout coefficients.",3,[[],["extendedgcd",3]]],[11,"extended_gcd_lcm","","Greatest common divisor, least common multiple, and Bézout…",3,[[]]],[10,"divides","","Deprecated, use `is_multiple_of` instead.",3,[[]]],[10,"is_multiple_of","","Returns `true` if `self` is a multiple of `other`.",3,[[]]],[10,"is_even","","Returns `true` if the number is even.",3,[[]]],[10,"is_odd","","Returns `true` if the number is odd.",3,[[]]],[10,"div_rem","","Simultaneous truncated integer division and modulus.…",3,[[]]],[11,"div_mod_floor","","Simultaneous floored integer division and modulus. Returns…",3,[[]]],[11,"next_multiple_of","","Rounds up to nearest multiple of argument.",3,[[]]],[11,"prev_multiple_of","","Rounds down to nearest multiple of argument.",3,[[]]],[0,"bigint_ser","","",null,null],[3,"BigIntSer","forest_bigint::bigint_ser","Wrapper for serializing big ints to match filecoin spec.…",null,null],[12,"0","","",4,null],[3,"BigIntDe","","Wrapper for deserializing as BigInt from bytes.",null,null],[12,"0","","",5,null],[5,"serialize","","Serializes big int as bytes following Filecoin spec.",null,[[["bigint",3]],["result",4]]],[5,"deserialize","","Deserializes bytes into big int.",null,[[],[["bigint",3],["result",4]]]],[0,"json","","",null,null],[5,"serialize","forest_bigint::bigint_ser::json","Serializes BigInt as String",null,[[["bigint",3]],["result",4]]],[5,"deserialize","","Deserializes String into BigInt.",null,[[],[["bigint",3],["result",4]]]],[0,"biguint_ser","forest_bigint","",null,null],[3,"BigUintSer","forest_bigint::biguint_ser","Wrapper for serializing big ints to match filecoin spec.…",null,null],[12,"0","","",6,null],[3,"BigUintDe","","Wrapper for deserializing as BigUint from bytes.",null,null],[12,"0","","",7,null],[5,"serialize","","",null,[[["biguint",3]],["result",4]]],[5,"deserialize","","",null,[[],[["result",4],["biguint",3]]]],[11,"from","forest_bigint","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"to_string","","",8,[[],["string",3]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"to_string","","",9,[[],["string",3]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"to_string","","",10,[[],["string",3]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"average_floor","","Returns the floor value of the average of `self` and…",10,[[]]],[11,"average_ceil","","Returns the ceil value of the average of `self` and `other`.",10,[[]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"to_string","","",11,[[],["string",3]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"average_floor","","Returns the floor value of the average of `self` and…",11,[[]]],[11,"average_ceil","","Returns the ceil value of the average of `self` and `other`.",11,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","forest_bigint::bigint_ser","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","forest_bigint::biguint_ser","",6,[[]]],[11,"into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"shr_assign","forest_bigint","",10,[[]]],[11,"shr_assign","","",10,[[]]],[11,"shr_assign","","",10,[[]]],[11,"shr_assign","","",10,[[]]],[11,"shr_assign","","",11,[[]]],[11,"shr_assign","","",10,[[]]],[11,"shr_assign","","",11,[[]]],[11,"shr_assign","","",11,[[]]],[11,"shr_assign","","",11,[[]]],[11,"shr_assign","","",11,[[]]],[11,"shr_assign","","",10,[[]]],[11,"shr_assign","","",10,[[]]],[11,"shr_assign","","",11,[[]]],[11,"shr_assign","","",10,[[]]],[11,"shr_assign","","",11,[[]]],[11,"shr_assign","","",11,[[]]],[11,"shr_assign","","",10,[[]]],[11,"shr_assign","","",11,[[]]],[11,"shr_assign","","",11,[[]]],[11,"shr_assign","","",10,[[]]],[11,"shr_assign","","",10,[[]]],[11,"shr_assign","","",11,[[]]],[11,"shr_assign","","",10,[[]]],[11,"shr_assign","","",11,[[]]],[11,"shr_assign","","",10,[[]]],[11,"shr_assign","","",11,[[]]],[11,"shr_assign","","",11,[[]]],[11,"shr_assign","","",10,[[]]],[11,"shr_assign","","",11,[[]]],[11,"shr_assign","","",11,[[]]],[11,"shr_assign","","",11,[[]]],[11,"shr_assign","","",10,[[]]],[11,"shr_assign","","",11,[[]]],[11,"shr_assign","","",11,[[]]],[11,"shr_assign","","",11,[[]]],[11,"shr_assign","","",10,[[]]],[11,"shr_assign","","",10,[[]]],[11,"shr_assign","","",10,[[]]],[11,"shr_assign","","",11,[[]]],[11,"shr_assign","","",10,[[]]],[11,"shr_assign","","",11,[[]]],[11,"shr_assign","","",10,[[]]],[11,"shr_assign","","",10,[[]]],[11,"shr_assign","","",10,[[]]],[11,"shr_assign","","",11,[[]]],[11,"shr_assign","","",10,[[]]],[11,"shr_assign","","",11,[[]]],[11,"shr_assign","","",10,[[]]],[11,"div_assign","","",11,[[["bigint",3]]]],[11,"div_assign","","",11,[[["bigint",3]]]],[11,"div_assign","","",10,[[]]],[11,"div_assign","","",11,[[]]],[11,"div_assign","","",10,[[]]],[11,"div_assign","","",10,[[["biguint",3]]]],[11,"div_assign","","",10,[[]]],[11,"div_assign","","",11,[[]]],[11,"div_assign","","",11,[[]]],[11,"div_assign","","",10,[[]]],[11,"div_assign","","",11,[[]]],[11,"div_assign","","",11,[[]]],[11,"div_assign","","",10,[[]]],[11,"div_assign","","",10,[[["biguint",3]]]],[11,"div_assign","","",11,[[]]],[11,"div_assign","","",11,[[]]],[11,"div_assign","","",11,[[]]],[11,"div_assign","","",11,[[]]],[11,"div_assign","","",10,[[]]],[11,"div_assign","","",11,[[]]],[11,"div_assign","","",11,[[]]],[11,"div_assign","","",11,[[]]],[11,"clone","","",1,[[],["sign",4]]],[11,"clone","","",10,[[],["biguint",3]]],[11,"clone_from","","",10,[[["biguint",3]]]],[11,"clone","","",11,[[],["bigint",3]]],[11,"clone_from","","",11,[[["bigint",3]]]],[11,"clone","","",8,[[],["parsebiginterror",3]]],[11,"clone","","",9,[[],["tryfrombiginterror",3]]],[11,"div","","",10,[[],["biguint",3]]],[11,"div","","",11,[[["bigint",3]],["bigint",3]]],[11,"div","","",11,[[],["bigint",3]]],[11,"div","","",10,[[],["biguint",3]]],[11,"div","","",11,[[],["bigint",3]]],[11,"div","","",11,[[],["bigint",3]]],[11,"div","","",11,[[],["bigint",3]]],[11,"div","","",11,[[],["bigint",3]]],[11,"div","","",11,[[],["bigint",3]]],[11,"div","","",11,[[],["bigint",3]]],[11,"div","","",11,[[],["bigint",3]]],[11,"div","","",11,[[],["bigint",3]]],[11,"div","","",10,[[],["biguint",3]]],[11,"div","","",10,[[],["biguint",3]]],[11,"div","","",11,[[],["bigint",3]]],[11,"div","","",11,[[],["bigint",3]]],[11,"div","","",11,[[],["bigint",3]]],[11,"div","","",11,[[],["bigint",3]]],[11,"div","","",11,[[],["bigint",3]]],[11,"div","","",10,[[],["biguint",3]]],[11,"div","","",10,[[],["biguint",3]]],[11,"div","","",11,[[],["bigint",3]]],[11,"div","","",10,[[],["biguint",3]]],[11,"div","","",11,[[],["bigint",3]]],[11,"div","","",11,[[],["bigint",3]]],[11,"div","","",11,[[],["bigint",3]]],[11,"div","","",10,[[],["biguint",3]]],[11,"div","","",11,[[],["bigint",3]]],[11,"div","","",10,[[],["biguint",3]]],[11,"div","","",11,[[["bigint",3]],["bigint",3]]],[11,"div","","",11,[[],["bigint",3]]],[11,"div","","",10,[[],["biguint",3]]],[11,"div","","",11,[[],["bigint",3]]],[11,"div","","",11,[[],["bigint",3]]],[11,"div","","",10,[[["biguint",3]],["biguint",3]]],[11,"div","","",11,[[],["bigint",3]]],[11,"div","","",11,[[],["bigint",3]]],[11,"div","","",10,[[],["biguint",3]]],[11,"div","","",10,[[["biguint",3]],["biguint",3]]],[11,"div","","",10,[[],["biguint",3]]],[11,"rem","","",10,[[],["biguint",3]]],[11,"rem","","",10,[[],["biguint",3]]],[11,"rem","","",11,[[],["bigint",3]]],[11,"rem","","",10,[[],["biguint",3]]],[11,"rem","","",11,[[],["bigint",3]]],[11,"rem","","",10,[[],["biguint",3]]],[11,"rem","","",11,[[],["bigint",3]]],[11,"rem","","",11,[[],["bigint",3]]],[11,"rem","","",11,[[],["bigint",3]]],[11,"rem","","",11,[[],["bigint",3]]],[11,"rem","","",11,[[],["bigint",3]]],[11,"rem","","",11,[[],["bigint",3]]],[11,"rem","","",10,[[],["biguint",3]]],[11,"rem","","",11,[[],["bigint",3]]],[11,"rem","","",11,[[],["bigint",3]]],[11,"rem","","",11,[[],["bigint",3]]],[11,"rem","","",10,[[],["biguint",3]]],[11,"rem","","",11,[[],["bigint",3]]],[11,"rem","","",11,[[],["bigint",3]]],[11,"rem","","",11,[[],["bigint",3]]],[11,"rem","","",10,[[],["biguint",3]]],[11,"rem","","",11,[[],["bigint",3]]],[11,"rem","","",11,[[],["bigint",3]]],[11,"rem","","",11,[[],["bigint",3]]],[11,"rem","","",11,[[["bigint",3]],["bigint",3]]],[11,"rem","","",10,[[["biguint",3]],["biguint",3]]],[11,"rem","","",10,[[],["biguint",3]]],[11,"rem","","",11,[[],["bigint",3]]],[11,"rem","","",11,[[],["bigint",3]]],[11,"rem","","",10,[[["biguint",3]],["biguint",3]]],[11,"rem","","",11,[[],["bigint",3]]],[11,"rem","","",10,[[],["biguint",3]]],[11,"rem","","",10,[[],["biguint",3]]],[11,"rem","","",11,[[],["bigint",3]]],[11,"rem","","",10,[[],["biguint",3]]],[11,"rem","","",10,[[],["biguint",3]]],[11,"rem","","",11,[[],["bigint",3]]],[11,"rem","","",11,[[],["bigint",3]]],[11,"rem","","",11,[[],["bigint",3]]],[11,"rem","","",11,[[["bigint",3]],["bigint",3]]],[11,"add","","",11,[[],["bigint",3]]],[11,"add","","",11,[[],["bigint",3]]],[11,"add","","",10,[[["biguint",3]],["biguint",3]]],[11,"add","","",11,[[],["bigint",3]]],[11,"add","","",11,[[],["bigint",3]]],[11,"add","","",11,[[["bigint",3]],["bigint",3]]],[11,"add","","",10,[[],["biguint",3]]],[11,"add","","",11,[[],["bigint",3]]],[11,"add","","",11,[[],["bigint",3]]],[11,"add","","",10,[[],["biguint",3]]],[11,"add","","",11,[[],["bigint",3]]],[11,"add","","",11,[[],["bigint",3]]],[11,"add","","",11,[[],["bigint",3]]],[11,"add","","",11,[[],["bigint",3]]],[11,"add","","",10,[[],["biguint",3]]],[11,"add","","",10,[[],["biguint",3]]],[11,"add","","",11,[[],["bigint",3]]],[11,"add","","",11,[[],["bigint",3]]],[11,"add","","",11,[[],["bigint",3]]],[11,"add","","",11,[[],["bigint",3]]],[11,"add","","",11,[[],["bigint",3]]],[11,"add","","",11,[[],["bigint",3]]],[11,"add","","",10,[[],["biguint",3]]],[11,"add","","",11,[[],["bigint",3]]],[11,"add","","",11,[[],["bigint",3]]],[11,"add","","",11,[[],["bigint",3]]],[11,"add","","",11,[[],["bigint",3]]],[11,"add","","",11,[[],["bigint",3]]],[11,"add","","",10,[[],["biguint",3]]],[11,"add","","",11,[[["bigint",3]],["bigint",3]]],[11,"add","","",10,[[["biguint",3]],["biguint",3]]],[11,"add","","",10,[[],["biguint",3]]],[11,"add","","",10,[[],["biguint",3]]],[11,"add","","",11,[[],["bigint",3]]],[11,"add","","",10,[[],["biguint",3]]],[11,"add","","",10,[[],["biguint",3]]],[11,"add","","",11,[[],["bigint",3]]],[11,"add","","",10,[[],["biguint",3]]],[11,"add","","",11,[[],["bigint",3]]],[11,"add","","",10,[[],["biguint",3]]],[11,"checked_sub","","",10,[[["biguint",3]],[["biguint",3],["option",4]]]],[11,"checked_sub","","",11,[[["bigint",3]],[["option",4],["bigint",3]]]],[11,"try_from","","",10,[[],[["biguint",3],["tryfrombiginterror",3],["result",4]]]],[11,"try_from","","",10,[[],[["biguint",3],["tryfrombiginterror",3],["result",4]]]],[11,"try_from","","",10,[[],[["biguint",3],["tryfrombiginterror",3],["result",4]]]],[11,"try_from","","",10,[[],[["biguint",3],["tryfrombiginterror",3],["result",4]]]],[11,"try_from","","",10,[[],[["biguint",3],["tryfrombiginterror",3],["result",4]]]],[11,"try_from","","",10,[[],[["biguint",3],["tryfrombiginterror",3],["result",4]]]],[11,"try_from","","",10,[[["bigint",3]],[["biguint",3],["tryfrombiginterror",3],["result",4]]]],[11,"try_from","","",10,[[["bigint",3]],[["result",4],["biguint",3],["tryfrombiginterror",3]]]],[11,"cmp","","",1,[[["sign",4]],["ordering",4]]],[11,"cmp","","",11,[[["bigint",3]],["ordering",4]]],[11,"cmp","","",10,[[["biguint",3]],["ordering",4]]],[11,"eq","","",1,[[["sign",4]]]],[11,"eq","","",9,[[["tryfrombiginterror",3]]]],[11,"ne","","",9,[[["tryfrombiginterror",3]]]],[11,"eq","","",8,[[["parsebiginterror",3]]]],[11,"ne","","",8,[[["parsebiginterror",3]]]],[11,"eq","","",10,[[["biguint",3]]]],[11,"eq","","",11,[[["bigint",3]]]],[11,"shl","","",11,[[],["bigint",3]]],[11,"shl","","",11,[[],["bigint",3]]],[11,"shl","","",10,[[],["biguint",3]]],[11,"shl","","",10,[[],["biguint",3]]],[11,"shl","","",11,[[],["bigint",3]]],[11,"shl","","",10,[[],["biguint",3]]],[11,"shl","","",10,[[],["biguint",3]]],[11,"shl","","",11,[[],["bigint",3]]],[11,"shl","","",11,[[],["bigint",3]]],[11,"shl","","",11,[[],["bigint",3]]],[11,"shl","","",10,[[],["biguint",3]]],[11,"shl","","",11,[[],["bigint",3]]],[11,"shl","","",11,[[],["bigint",3]]],[11,"shl","","",10,[[],["biguint",3]]],[11,"shl","","",11,[[],["bigint",3]]],[11,"shl","","",11,[[],["bigint",3]]],[11,"shl","","",10,[[],["biguint",3]]],[11,"shl","","",11,[[],["bigint",3]]],[11,"shl","","",10,[[],["biguint",3]]],[11,"shl","","",10,[[],["biguint",3]]],[11,"shl","","",11,[[],["bigint",3]]],[11,"shl","","",10,[[],["biguint",3]]],[11,"shl","","",10,[[],["biguint",3]]],[11,"shl","","",10,[[],["biguint",3]]],[11,"shl","","",11,[[],["bigint",3]]],[11,"shl","","",11,[[],["bigint",3]]],[11,"shl","","",10,[[],["biguint",3]]],[11,"shl","","",11,[[],["bigint",3]]],[11,"shl","","",10,[[],["biguint",3]]],[11,"shl","","",11,[[],["bigint",3]]],[11,"shl","","",10,[[],["biguint",3]]],[11,"shl","","",11,[[],["bigint",3]]],[11,"shl","","",10,[[],["biguint",3]]],[11,"shl","","",11,[[],["bigint",3]]],[11,"shl","","",10,[[],["biguint",3]]],[11,"shl","","",11,[[],["bigint",3]]],[11,"shl","","",11,[[],["bigint",3]]],[11,"shl","","",10,[[],["biguint",3]]],[11,"shl","","",10,[[],["biguint",3]]],[11,"shl","","",10,[[],["biguint",3]]],[11,"shl","","",10,[[],["biguint",3]]],[11,"shl","","",11,[[],["bigint",3]]],[11,"shl","","",11,[[],["bigint",3]]],[11,"shl","","",11,[[],["bigint",3]]],[11,"shl","","",10,[[],["biguint",3]]],[11,"shl","","",10,[[],["biguint",3]]],[11,"shl","","",11,[[],["bigint",3]]],[11,"shl","","",10,[[],["biguint",3]]],[11,"shl_assign","","",11,[[]]],[11,"shl_assign","","",10,[[]]],[11,"shl_assign","","",11,[[]]],[11,"shl_assign","","",10,[[]]],[11,"shl_assign","","",10,[[]]],[11,"shl_assign","","",11,[[]]],[11,"shl_assign","","",10,[[]]],[11,"shl_assign","","",10,[[]]],[11,"shl_assign","","",11,[[]]],[11,"shl_assign","","",11,[[]]],[11,"shl_assign","","",11,[[]]],[11,"shl_assign","","",10,[[]]],[11,"shl_assign","","",10,[[]]],[11,"shl_assign","","",10,[[]]],[11,"shl_assign","","",10,[[]]],[11,"shl_assign","","",11,[[]]],[11,"shl_assign","","",11,[[]]],[11,"shl_assign","","",10,[[]]],[11,"shl_assign","","",10,[[]]],[11,"shl_assign","","",10,[[]]],[11,"shl_assign","","",11,[[]]],[11,"shl_assign","","",11,[[]]],[11,"shl_assign","","",10,[[]]],[11,"shl_assign","","",11,[[]]],[11,"shl_assign","","",11,[[]]],[11,"shl_assign","","",10,[[]]],[11,"shl_assign","","",11,[[]]],[11,"shl_assign","","",10,[[]]],[11,"shl_assign","","",11,[[]]],[11,"shl_assign","","",11,[[]]],[11,"shl_assign","","",10,[[]]],[11,"shl_assign","","",10,[[]]],[11,"shl_assign","","",11,[[]]],[11,"shl_assign","","",10,[[]]],[11,"shl_assign","","",11,[[]]],[11,"shl_assign","","",10,[[]]],[11,"shl_assign","","",11,[[]]],[11,"shl_assign","","",10,[[]]],[11,"shl_assign","","",11,[[]]],[11,"shl_assign","","",11,[[]]],[11,"shl_assign","","",10,[[]]],[11,"shl_assign","","",11,[[]]],[11,"shl_assign","","",10,[[]]],[11,"shl_assign","","",10,[[]]],[11,"shl_assign","","",10,[[]]],[11,"shl_assign","","",11,[[]]],[11,"shl_assign","","",11,[[]]],[11,"shl_assign","","",11,[[]]],[11,"fmt","","",11,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",8,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",9,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",10,[[["formatter",3]],[["error",3],["result",4]]]],[11,"sum","","",11,[[],["bigint",3]]],[11,"sum","","",10,[[],["biguint",3]]],[11,"bitand_assign","","",10,[[["biguint",3]]]],[11,"bitand_assign","","",11,[[["bigint",3]]]],[11,"bitand_assign","","",10,[[["biguint",3]]]],[11,"bitand_assign","","",11,[[["bigint",3]]]],[11,"from_str_radix","","Creates and initializes a `BigUint`.",10,[[],[["biguint",3],["parsebiginterror",3],["result",4]]]],[11,"from_str_radix","","Creates and initializes a BigInt.",11,[[],[["bigint",3],["result",4],["parsebiginterror",3]]]],[11,"bitor_assign","","",10,[[["biguint",3]]]],[11,"bitor_assign","","",11,[[["bigint",3]]]],[11,"bitor_assign","","",11,[[["bigint",3]]]],[11,"bitor_assign","","",10,[[["biguint",3]]]],[11,"from_str","","",11,[[],[["bigint",3],["result",4],["parsebiginterror",3]]]],[11,"from_str","","",10,[[],[["biguint",3],["parsebiginterror",3],["result",4]]]],[11,"checked_add","","",11,[[["bigint",3]],[["option",4],["bigint",3]]]],[11,"checked_add","","",10,[[["biguint",3]],[["biguint",3],["option",4]]]],[11,"nth_root","","",10,[[],["biguint",3]]],[11,"sqrt","","",10,[[],["biguint",3]]],[11,"cbrt","","",10,[[],["biguint",3]]],[11,"nth_root","","",11,[[],["bigint",3]]],[11,"sqrt","","",11,[[],["bigint",3]]],[11,"cbrt","","",11,[[],["bigint",3]]],[11,"sub_assign","","",11,[[]]],[11,"sub_assign","","",11,[[]]],[11,"sub_assign","","",10,[[]]],[11,"sub_assign","","",11,[[]]],[11,"sub_assign","","",10,[[]]],[11,"sub_assign","","",11,[[]]],[11,"sub_assign","","",10,[[["biguint",3]]]],[11,"sub_assign","","",10,[[]]],[11,"sub_assign","","",11,[[]]],[11,"sub_assign","","",10,[[["biguint",3]]]],[11,"sub_assign","","",11,[[]]],[11,"sub_assign","","",11,[[]]],[11,"sub_assign","","",10,[[]]],[11,"sub_assign","","",11,[[]]],[11,"sub_assign","","",11,[[]]],[11,"sub_assign","","",10,[[]]],[11,"sub_assign","","",11,[[]]],[11,"sub_assign","","",11,[[["bigint",3]]]],[11,"sub_assign","","",11,[[]]],[11,"sub_assign","","",10,[[]]],[11,"sub_assign","","",11,[[["bigint",3]]]],[11,"sub_assign","","",11,[[]]],[11,"fmt","","",1,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",9,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",10,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",11,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",8,[[["formatter",3]],[["error",3],["result",4]]]],[11,"from_i64","","",11,[[],[["option",4],["bigint",3]]]],[11,"from_i128","","",11,[[],[["option",4],["bigint",3]]]],[11,"from_u64","","",11,[[],[["option",4],["bigint",3]]]],[11,"from_u128","","",11,[[],[["option",4],["bigint",3]]]],[11,"from_f64","","",11,[[],[["option",4],["bigint",3]]]],[11,"from_i64","","",10,[[],[["biguint",3],["option",4]]]],[11,"from_i128","","",10,[[],[["biguint",3],["option",4]]]],[11,"from_u64","","",10,[[],[["biguint",3],["option",4]]]],[11,"from_u128","","",10,[[],[["biguint",3],["option",4]]]],[11,"from_f64","","",10,[[],[["biguint",3],["option",4]]]],[11,"mul_assign","","",11,[[]]],[11,"mul_assign","","",11,[[]]],[11,"mul_assign","","",11,[[]]],[11,"mul_assign","","",11,[[["bigint",3]]]],[11,"mul_assign","","",10,[[]]],[11,"mul_assign","","",11,[[]]],[11,"mul_assign","","",11,[[]]],[11,"mul_assign","","",11,[[]]],[11,"mul_assign","","",11,[[]]],[11,"mul_assign","","",10,[[]]],[11,"mul_assign","","",11,[[]]],[11,"mul_assign","","",10,[[]]],[11,"mul_assign","","",11,[[]]],[11,"mul_assign","","",10,[[]]],[11,"mul_assign","","",10,[[]]],[11,"mul_assign","","",10,[[["biguint",3]]]],[11,"mul_assign","","",11,[[["bigint",3]]]],[11,"mul_assign","","",10,[[]]],[11,"mul_assign","","",11,[[]]],[11,"mul_assign","","",11,[[]]],[11,"mul_assign","","",10,[[["biguint",3]]]],[11,"mul_assign","","",11,[[]]],[11,"neg","","Negate Sign value.",1,[[],["sign",4]]],[11,"neg","","",11,[[],["bigint",3]]],[11,"to_biguint","","",11,[[],[["biguint",3],["option",4]]]],[11,"to_biguint","","",10,[[],[["biguint",3],["option",4]]]],[11,"checked_mul","","",11,[[["bigint",3]],[["option",4],["bigint",3]]]],[11,"checked_mul","","",10,[[["biguint",3]],[["biguint",3],["option",4]]]],[11,"div_rem","","",11,[[["bigint",3]]]],[11,"div_floor","","",11,[[["bigint",3]],["bigint",3]]],[11,"mod_floor","","",11,[[["bigint",3]],["bigint",3]]],[11,"div_mod_floor","","",11,[[["bigint",3]]]],[11,"div_ceil","","",11,[[["bigint",3]],["bigint",3]]],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number…",11,[[["bigint",3]],["bigint",3]]],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number…",11,[[["bigint",3]],["bigint",3]]],[11,"gcd_lcm","","Calculates the Greatest Common Divisor (GCD) and Lowest…",11,[[["bigint",3]]]],[11,"extended_gcd_lcm","","Greatest common divisor, least common multiple, and Bézout…",11,[[["bigint",3]]]],[11,"divides","","Deprecated, use `is_multiple_of` instead.",11,[[["bigint",3]]]],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",11,[[["bigint",3]]]],[11,"is_even","","Returns `true` if the number is divisible by `2`.",11,[[]]],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",11,[[]]],[11,"next_multiple_of","","Rounds up to nearest multiple of argument.",11,[[["bigint",3]],["bigint",3]]],[11,"prev_multiple_of","","Rounds down to nearest multiple of argument.",11,[[["bigint",3]],["bigint",3]]],[11,"div_rem","","",10,[[["biguint",3]]]],[11,"div_floor","","",10,[[["biguint",3]],["biguint",3]]],[11,"mod_floor","","",10,[[["biguint",3]],["biguint",3]]],[11,"div_mod_floor","","",10,[[["biguint",3]]]],[11,"div_ceil","","",10,[[["biguint",3]],["biguint",3]]],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number…",10,[[["biguint",3]],["biguint",3]]],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number…",10,[[["biguint",3]],["biguint",3]]],[11,"gcd_lcm","","Calculates the Greatest Common Divisor (GCD) and Lowest…",10,[[["biguint",3]]]],[11,"divides","","Deprecated, use `is_multiple_of` instead.",10,[[["biguint",3]]]],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",10,[[["biguint",3]]]],[11,"is_even","","Returns `true` if the number is divisible by `2`.",10,[[]]],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",10,[[]]],[11,"next_multiple_of","","Rounds up to nearest multiple of argument.",10,[[["biguint",3]],["biguint",3]]],[11,"prev_multiple_of","","Rounds down to nearest multiple of argument.",10,[[["biguint",3]],["biguint",3]]],[11,"default","","",10,[[],["biguint",3]]],[11,"default","","",11,[[],["bigint",3]]],[11,"to_bigint","","",10,[[],[["option",4],["bigint",3]]]],[11,"to_bigint","","",11,[[],[["option",4],["bigint",3]]]],[11,"fmt","","",11,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",10,[[["formatter",3]],[["error",3],["result",4]]]],[11,"hash","","",11,[[]]],[11,"hash","","",10,[[]]],[11,"hash","","",1,[[]]],[11,"bitxor","","",10,[[["biguint",3]],["biguint",3]]],[11,"bitxor","","",11,[[["bigint",3]],["bigint",3]]],[11,"bitxor","","",11,[[["bigint",3]],["bigint",3]]],[11,"bitxor","","",10,[[["biguint",3]],["biguint",3]]],[11,"to_i64","","",10,[[],["option",4]]],[11,"to_i128","","",10,[[],["option",4]]],[11,"to_u64","","",10,[[],["option",4]]],[11,"to_u128","","",10,[[],["option",4]]],[11,"to_f32","","",10,[[],["option",4]]],[11,"to_f64","","",10,[[],["option",4]]],[11,"to_i64","","",11,[[],["option",4]]],[11,"to_i128","","",11,[[],["option",4]]],[11,"to_u64","","",11,[[],["option",4]]],[11,"to_u128","","",11,[[],["option",4]]],[11,"to_f32","","",11,[[],["option",4]]],[11,"to_f64","","",11,[[],["option",4]]],[11,"one","","",11,[[],["bigint",3]]],[11,"set_one","","",11,[[]]],[11,"is_one","","",11,[[]]],[11,"one","","",10,[[],["biguint",3]]],[11,"set_one","","",10,[[]]],[11,"is_one","","",10,[[]]],[11,"not","","",11,[[],["bigint",3]]],[11,"from","","",11,[[],["bigint",3]]],[11,"from","","",10,[[],["biguint",3]]],[11,"from","","",11,[[],["bigint",3]]],[11,"from","","",10,[[],["biguint",3]]],[11,"from","","",11,[[],["bigint",3]]],[11,"from","","",11,[[],["bigint",3]]],[11,"from","","",10,[[],["biguint",3]]],[11,"from","","",11,[[],["bigint",3]]],[11,"from","","",11,[[],["bigint",3]]],[11,"from","","",11,[[],["bigint",3]]],[11,"from","","",10,[[],["biguint",3]]],[11,"from","","",11,[[["biguint",3]],["bigint",3]]],[11,"from","","",11,[[],["bigint",3]]],[11,"from","","",11,[[],["bigint",3]]],[11,"from","","",11,[[],["bigint",3]]],[11,"from","","",10,[[],["biguint",3]]],[11,"from","","",11,[[],["bigint",3]]],[11,"from","","",10,[[],["biguint",3]]],[11,"from","","",11,[[],["bigint",3]]],[11,"fmt","","",10,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",11,[[["formatter",3]],[["error",3],["result",4]]]],[11,"bitand","","",10,[[["biguint",3]],["biguint",3]]],[11,"bitand","","",10,[[["biguint",3]],["biguint",3]]],[11,"bitand","","",11,[[["bigint",3]],["bigint",3]]],[11,"bitand","","",11,[[["bigint",3]],["bigint",3]]],[11,"add_assign","","",11,[[]]],[11,"add_assign","","",11,[[]]],[11,"add_assign","","",11,[[]]],[11,"add_assign","","",10,[[["biguint",3]]]],[11,"add_assign","","",11,[[["bigint",3]]]],[11,"add_assign","","",11,[[]]],[11,"add_assign","","",11,[[]]],[11,"add_assign","","",10,[[]]],[11,"add_assign","","",10,[[]]],[11,"add_assign","","",11,[[]]],[11,"add_assign","","",11,[[]]],[11,"add_assign","","",11,[[]]],[11,"add_assign","","",10,[[]]],[11,"add_assign","","",11,[[]]],[11,"add_assign","","",11,[[["bigint",3]]]],[11,"add_assign","","",10,[[["biguint",3]]]],[11,"add_assign","","",10,[[]]],[11,"add_assign","","",10,[[]]],[11,"add_assign","","",10,[[]]],[11,"add_assign","","",11,[[]]],[11,"add_assign","","",11,[[]]],[11,"add_assign","","",11,[[]]],[11,"partial_cmp","","",1,[[["sign",4]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",11,[[["bigint",3]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",10,[[["biguint",3]],[["ordering",4],["option",4]]]],[11,"bitor","","",10,[[["biguint",3]],["biguint",3]]],[11,"bitor","","",11,[[["bigint",3]],["bigint",3]]],[11,"bitor","","",10,[[["biguint",3]],["biguint",3]]],[11,"bitor","","",11,[[["bigint",3]],["bigint",3]]],[11,"mul","","",11,[[],["bigint",3]]],[11,"mul","","",11,[[],["bigint",3]]],[11,"mul","","",11,[[],["bigint",3]]],[11,"mul","","",10,[[],["biguint",3]]],[11,"mul","","",10,[[],["biguint",3]]],[11,"mul","","",11,[[],["bigint",3]]],[11,"mul","","",10,[[],["biguint",3]]],[11,"mul","","",10,[[],["biguint",3]]],[11,"mul","","",10,[[["biguint",3]],["biguint",3]]],[11,"mul","","",10,[[],["biguint",3]]],[11,"mul","","",11,[[],["bigint",3]]],[11,"mul","","",11,[[],["bigint",3]]],[11,"mul","","",10,[[],["biguint",3]]],[11,"mul","","",11,[[],["bigint",3]]],[11,"mul","","",11,[[],["bigint",3]]],[11,"mul","","",11,[[],["bigint",3]]],[11,"mul","","",11,[[],["bigint",3]]],[11,"mul","","",10,[[],["biguint",3]]],[11,"mul","","",11,[[],["bigint",3]]],[11,"mul","","",10,[[],["biguint",3]]],[11,"mul","","",10,[[],["biguint",3]]],[11,"mul","","",11,[[["bigint",3]],["bigint",3]]],[11,"mul","","",11,[[],["bigint",3]]],[11,"mul","","",11,[[],["bigint",3]]],[11,"mul","","",11,[[],["bigint",3]]],[11,"mul","","",10,[[],["biguint",3]]],[11,"mul","","",10,[[],["biguint",3]]],[11,"mul","","",10,[[["biguint",3]],["biguint",3]]],[11,"mul","","",11,[[],["bigint",3]]],[11,"mul","","",11,[[],["bigint",3]]],[11,"mul","","",1,[[["sign",4]],["sign",4]]],[11,"mul","","",10,[[],["biguint",3]]],[11,"mul","","",11,[[],["bigint",3]]],[11,"mul","","",11,[[["bigint",3]],["bigint",3]]],[11,"mul","","",11,[[],["bigint",3]]],[11,"mul","","",11,[[],["bigint",3]]],[11,"mul","","",11,[[],["bigint",3]]],[11,"mul","","",11,[[],["bigint",3]]],[11,"mul","","",11,[[],["bigint",3]]],[11,"mul","","",11,[[],["bigint",3]]],[11,"mul","","",11,[[],["bigint",3]]],[11,"checked_div","","",11,[[["bigint",3]],[["option",4],["bigint",3]]]],[11,"checked_div","","",10,[[["biguint",3]],[["biguint",3],["option",4]]]],[11,"pow","","",11,[[],["bigint",3]]],[11,"pow","","",10,[[],["biguint",3]]],[11,"pow","","",11,[[],["bigint",3]]],[11,"pow","","",10,[[],["biguint",3]]],[11,"pow","","",10,[[],["biguint",3]]],[11,"pow","","",11,[[["biguint",3]],["bigint",3]]],[11,"pow","","",10,[[],["biguint",3]]],[11,"pow","","",10,[[],["biguint",3]]],[11,"pow","","",10,[[],["biguint",3]]],[11,"pow","","",11,[[],["bigint",3]]],[11,"pow","","",10,[[],["biguint",3]]],[11,"pow","","",10,[[],["biguint",3]]],[11,"pow","","",11,[[],["bigint",3]]],[11,"pow","","",11,[[],["bigint",3]]],[11,"pow","","",11,[[],["bigint",3]]],[11,"pow","","",10,[[["biguint",3]],["biguint",3]]],[11,"pow","","",11,[[],["bigint",3]]],[11,"pow","","",11,[[],["bigint",3]]],[11,"pow","","",11,[[],["bigint",3]]],[11,"pow","","",10,[[],["biguint",3]]],[11,"pow","","",10,[[],["biguint",3]]],[11,"pow","","",11,[[],["bigint",3]]],[11,"pow","","",11,[[],["bigint",3]]],[11,"pow","","",11,[[],["bigint",3]]],[11,"pow","","",11,[[["biguint",3]],["bigint",3]]],[11,"pow","","",10,[[],["biguint",3]]],[11,"pow","","",10,[[["biguint",3]],["biguint",3]]],[11,"pow","","",10,[[],["biguint",3]]],[11,"rem_assign","","",10,[[]]],[11,"rem_assign","","",11,[[]]],[11,"rem_assign","","",11,[[]]],[11,"rem_assign","","",10,[[]]],[11,"rem_assign","","",10,[[]]],[11,"rem_assign","","",11,[[]]],[11,"rem_assign","","",11,[[["bigint",3]]]],[11,"rem_assign","","",11,[[]]],[11,"rem_assign","","",11,[[]]],[11,"rem_assign","","",10,[[["biguint",3]]]],[11,"rem_assign","","",10,[[]]],[11,"rem_assign","","",11,[[]]],[11,"rem_assign","","",10,[[]]],[11,"rem_assign","","",11,[[]]],[11,"rem_assign","","",10,[[]]],[11,"rem_assign","","",11,[[]]],[11,"rem_assign","","",11,[[]]],[11,"rem_assign","","",11,[[]]],[11,"rem_assign","","",11,[[]]],[11,"rem_assign","","",11,[[]]],[11,"rem_assign","","",10,[[["biguint",3]]]],[11,"rem_assign","","",11,[[["bigint",3]]]],[11,"fmt","","",11,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",10,[[["formatter",3]],[["error",3],["result",4]]]],[11,"product","","",11,[[],["bigint",3]]],[11,"product","","",10,[[],["biguint",3]]],[11,"description","","",8,[[]]],[11,"description","","",9,[[]]],[11,"fmt","","",10,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",11,[[["formatter",3]],[["error",3],["result",4]]]],[11,"shr","","",10,[[],["biguint",3]]],[11,"shr","","",11,[[],["bigint",3]]],[11,"shr","","",10,[[],["biguint",3]]],[11,"shr","","",11,[[],["bigint",3]]],[11,"shr","","",10,[[],["biguint",3]]],[11,"shr","","",11,[[],["bigint",3]]],[11,"shr","","",11,[[],["bigint",3]]],[11,"shr","","",11,[[],["bigint",3]]],[11,"shr","","",11,[[],["bigint",3]]],[11,"shr","","",10,[[],["biguint",3]]],[11,"shr","","",10,[[],["biguint",3]]],[11,"shr","","",11,[[],["bigint",3]]],[11,"shr","","",11,[[],["bigint",3]]],[11,"shr","","",10,[[],["biguint",3]]],[11,"shr","","",10,[[],["biguint",3]]],[11,"shr","","",10,[[],["biguint",3]]],[11,"shr","","",10,[[],["biguint",3]]],[11,"shr","","",10,[[],["biguint",3]]],[11,"shr","","",11,[[],["bigint",3]]],[11,"shr","","",11,[[],["bigint",3]]],[11,"shr","","",11,[[],["bigint",3]]],[11,"shr","","",11,[[],["bigint",3]]],[11,"shr","","",10,[[],["biguint",3]]],[11,"shr","","",10,[[],["biguint",3]]],[11,"shr","","",10,[[],["biguint",3]]],[11,"shr","","",10,[[],["biguint",3]]],[11,"shr","","",11,[[],["bigint",3]]],[11,"shr","","",10,[[],["biguint",3]]],[11,"shr","","",11,[[],["bigint",3]]],[11,"shr","","",11,[[],["bigint",3]]],[11,"shr","","",10,[[],["biguint",3]]],[11,"shr","","",11,[[],["bigint",3]]],[11,"shr","","",11,[[],["bigint",3]]],[11,"shr","","",10,[[],["biguint",3]]],[11,"shr","","",11,[[],["bigint",3]]],[11,"shr","","",10,[[],["biguint",3]]],[11,"shr","","",11,[[],["bigint",3]]],[11,"shr","","",11,[[],["bigint",3]]],[11,"shr","","",11,[[],["bigint",3]]],[11,"shr","","",10,[[],["biguint",3]]],[11,"shr","","",10,[[],["biguint",3]]],[11,"shr","","",10,[[],["biguint",3]]],[11,"shr","","",10,[[],["biguint",3]]],[11,"shr","","",11,[[],["bigint",3]]],[11,"shr","","",11,[[],["bigint",3]]],[11,"shr","","",11,[[],["bigint",3]]],[11,"shr","","",10,[[],["biguint",3]]],[11,"shr","","",10,[[],["biguint",3]]],[11,"bitxor_assign","","",11,[[["bigint",3]]]],[11,"bitxor_assign","","",10,[[["biguint",3]]]],[11,"bitxor_assign","","",11,[[["bigint",3]]]],[11,"bitxor_assign","","",10,[[["biguint",3]]]],[11,"abs","","",11,[[],["bigint",3]]],[11,"abs_sub","","",11,[[["bigint",3]],["bigint",3]]],[11,"signum","","",11,[[],["bigint",3]]],[11,"is_positive","","",11,[[]]],[11,"is_negative","","",11,[[]]],[11,"sub","","",11,[[],["bigint",3]]],[11,"sub","","",11,[[],["bigint",3]]],[11,"sub","","",11,[[],["bigint",3]]],[11,"sub","","",11,[[],["bigint",3]]],[11,"sub","","",11,[[],["bigint",3]]],[11,"sub","","",11,[[],["bigint",3]]],[11,"sub","","",11,[[["bigint",3]],["bigint",3]]],[11,"sub","","",11,[[],["bigint",3]]],[11,"sub","","",11,[[],["bigint",3]]],[11,"sub","","",11,[[],["bigint",3]]],[11,"sub","","",10,[[],["biguint",3]]],[11,"sub","","",10,[[],["biguint",3]]],[11,"sub","","",11,[[],["bigint",3]]],[11,"sub","","",10,[[],["biguint",3]]],[11,"sub","","",11,[[],["bigint",3]]],[11,"sub","","",10,[[],["biguint",3]]],[11,"sub","","",11,[[],["bigint",3]]],[11,"sub","","",11,[[],["bigint",3]]],[11,"sub","","",11,[[],["bigint",3]]],[11,"sub","","",10,[[],["biguint",3]]],[11,"sub","","",11,[[],["bigint",3]]],[11,"sub","","",10,[[],["biguint",3]]],[11,"sub","","",10,[[],["biguint",3]]],[11,"sub","","",11,[[],["bigint",3]]],[11,"sub","","",11,[[],["bigint",3]]],[11,"sub","","",10,[[],["biguint",3]]],[11,"sub","","",11,[[],["bigint",3]]],[11,"sub","","",11,[[["bigint",3]],["bigint",3]]],[11,"sub","","",10,[[],["biguint",3]]],[11,"sub","","",11,[[],["bigint",3]]],[11,"sub","","",10,[[["biguint",3]],["biguint",3]]],[11,"sub","","",11,[[],["bigint",3]]],[11,"sub","","",11,[[],["bigint",3]]],[11,"sub","","",10,[[["biguint",3]],["biguint",3]]],[11,"sub","","",10,[[],["biguint",3]]],[11,"sub","","",11,[[],["bigint",3]]],[11,"sub","","",11,[[],["bigint",3]]],[11,"sub","","",10,[[],["biguint",3]]],[11,"sub","","",11,[[],["bigint",3]]],[11,"sub","","",10,[[],["biguint",3]]],[11,"zero","","",10,[[],["biguint",3]]],[11,"set_zero","","",10,[[]]],[11,"is_zero","","",10,[[]]],[11,"zero","","",11,[[],["bigint",3]]],[11,"set_zero","","",11,[[]]],[11,"is_zero","","",11,[[]]],[11,"clone","forest_bigint::bigint_ser","",5,[[],["bigintde",3]]],[11,"clone","forest_bigint::biguint_ser","",7,[[],["biguintde",3]]],[11,"default","forest_bigint::bigint_ser","",5,[[],["bigintde",3]]],[11,"serialize","","",4,[[],["result",4]]],[11,"serialize","","",5,[[],["result",4]]],[11,"serialize","forest_bigint::biguint_ser","",6,[[],["result",4]]],[11,"serialize","","",7,[[],["result",4]]],[11,"deserialize","forest_bigint::bigint_ser","",5,[[],["result",4]]],[11,"deserialize","forest_bigint::biguint_ser","",7,[[],["result",4]]],[11,"into_original","forest_bigint","Extract the original value, if available. The value will…",9,[[]]],[11,"new","","Creates and initializes a `BigUint`.",10,[[["vec",3]],["biguint",3]]],[11,"from_slice","","Creates and initializes a `BigUint`.",10,[[],["biguint",3]]],[11,"assign_from_slice","","Assign a value to a `BigUint`.",10,[[]]],[11,"from_bytes_be","","Creates and initializes a `BigUint`.",10,[[],["biguint",3]]],[11,"from_bytes_le","","Creates and initializes a `BigUint`.",10,[[],["biguint",3]]],[11,"parse_bytes","","Creates and initializes a `BigUint`. The input slice must…",10,[[],[["biguint",3],["option",4]]]],[11,"from_radix_be","","Creates and initializes a `BigUint`. Each u8 of the input…",10,[[],[["biguint",3],["option",4]]]],[11,"from_radix_le","","Creates and initializes a `BigUint`. Each u8 of the input…",10,[[],[["biguint",3],["option",4]]]],[11,"to_bytes_be","","Returns the byte representation of the `BigUint` in…",10,[[],["vec",3]]],[11,"to_bytes_le","","Returns the byte representation of the `BigUint` in…",10,[[],["vec",3]]],[11,"to_u32_digits","","Returns the `u32` digits representation of the `BigUint`…",10,[[],["vec",3]]],[11,"to_str_radix","","Returns the integer formatted as a string in the given…",10,[[],["string",3]]],[11,"to_radix_be","","Returns the integer in the requested base in big-endian…",10,[[],["vec",3]]],[11,"to_radix_le","","Returns the integer in the requested base in little-endian…",10,[[],["vec",3]]],[11,"bits","","Determines the fewest bits necessary to express the…",10,[[]]],[11,"pow","","Returns `self ^ exponent`.",10,[[],["biguint",3]]],[11,"modpow","","Returns `(self ^ exponent) % modulus`.",10,[[["biguint",3]],["biguint",3]]],[11,"sqrt","","Returns the truncated principal square root of `self` --…",10,[[],["biguint",3]]],[11,"cbrt","","Returns the truncated principal cube root of `self` -- see…",10,[[],["biguint",3]]],[11,"nth_root","","Returns the truncated principal `n`th root of `self` --…",10,[[],["biguint",3]]],[11,"trailing_zeros","","Returns the number of least-significant bits that are…",10,[[],["option",4]]],[11,"new","","Creates and initializes a BigInt.",11,[[["vec",3],["sign",4]],["bigint",3]]],[11,"from_biguint","","Creates and initializes a `BigInt`.",11,[[["biguint",3],["sign",4]],["bigint",3]]],[11,"from_slice","","Creates and initializes a `BigInt`.",11,[[["sign",4]],["bigint",3]]],[11,"assign_from_slice","","Reinitializes a `BigInt`.",11,[[["sign",4]]]],[11,"from_bytes_be","","Creates and initializes a `BigInt`.",11,[[["sign",4]],["bigint",3]]],[11,"from_bytes_le","","Creates and initializes a `BigInt`.",11,[[["sign",4]],["bigint",3]]],[11,"from_signed_bytes_be","","Creates and initializes a `BigInt` from an array of bytes…",11,[[],["bigint",3]]],[11,"from_signed_bytes_le","","Creates and initializes a `BigInt` from an array of bytes…",11,[[],["bigint",3]]],[11,"parse_bytes","","Creates and initializes a `BigInt`.",11,[[],[["option",4],["bigint",3]]]],[11,"from_radix_be","","Creates and initializes a `BigInt`. Each u8 of the input…",11,[[["sign",4]],[["option",4],["bigint",3]]]],[11,"from_radix_le","","Creates and initializes a `BigInt`. Each u8 of the input…",11,[[["sign",4]],[["option",4],["bigint",3]]]],[11,"to_bytes_be","","Returns the sign and the byte representation of the…",11,[[]]],[11,"to_bytes_le","","Returns the sign and the byte representation of the…",11,[[]]],[11,"to_u32_digits","","Returns the sign and the `u32` digits representation of…",11,[[]]],[11,"to_signed_bytes_be","","Returns the two\'s-complement byte representation of the…",11,[[],["vec",3]]],[11,"to_signed_bytes_le","","Returns the two\'s-complement byte representation of the…",11,[[],["vec",3]]],[11,"to_str_radix","","Returns the integer formatted as a string in the given…",11,[[],["string",3]]],[11,"to_radix_be","","Returns the integer in the requested base in big-endian…",11,[[]]],[11,"to_radix_le","","Returns the integer in the requested base in little-endian…",11,[[]]],[11,"sign","","Returns the sign of the `BigInt` as a `Sign`.",11,[[],["sign",4]]],[11,"magnitude","","Returns the magnitude of the `BigInt` as a `BigUint`.",11,[[],["biguint",3]]],[11,"into_parts","","Convert this `BigInt` into its `Sign` and `BigUint`…",11,[[]]],[11,"bits","","Determines the fewest bits necessary to express the…",11,[[]]],[11,"to_biguint","","Converts this `BigInt` into a `BigUint`, if it\'s not…",11,[[],[["biguint",3],["option",4]]]],[11,"checked_add","","",11,[[["bigint",3]],[["option",4],["bigint",3]]]],[11,"checked_sub","","",11,[[["bigint",3]],[["option",4],["bigint",3]]]],[11,"checked_mul","","",11,[[["bigint",3]],[["option",4],["bigint",3]]]],[11,"checked_div","","",11,[[["bigint",3]],[["option",4],["bigint",3]]]],[11,"pow","","Returns `self ^ exponent`.",11,[[],["bigint",3]]],[11,"modpow","","Returns `(self ^ exponent) mod modulus`",11,[[["bigint",3]],["bigint",3]]],[11,"sqrt","","Returns the truncated principal square root of `self` --…",11,[[],["bigint",3]]],[11,"cbrt","","Returns the truncated principal cube root of `self` -- see…",11,[[],["bigint",3]]],[11,"nth_root","","Returns the truncated principal `n`th root of `self` --…",11,[[],["bigint",3]]],[11,"trailing_zeros","","Returns the number of least-significant bits that are…",11,[[],["option",4]]]],"p":[[8,"ToBigUint"],[4,"Sign"],[8,"ToBigInt"],[8,"Integer"],[3,"BigIntSer"],[3,"BigIntDe"],[3,"BigUintSer"],[3,"BigUintDe"],[3,"ParseBigIntError"],[3,"TryFromBigIntError"],[3,"BigUint"],[3,"BigInt"]]},\
"forest_blocks":{"doc":"","i":[[3,"Block","forest_blocks","A complete block",null,null],[12,"header","","",0,null],[12,"bls_messages","","",0,null],[12,"secp_messages","","",0,null],[3,"TxMeta","","Tracks the merkleroots of both secp and bls messages…",null,null],[12,"bls_message_root","","",1,null],[12,"secp_message_root","","",1,null],[3,"ElectionProof","","Proofs generated by a miner which determines the reward…",null,null],[12,"win_count","","",2,null],[12,"vrfproof","","",2,null],[3,"Ticket","","A Ticket is a marker of a tick of the blockchain\'s clock.…",null,null],[12,"vrfproof","","A proof output by running a VRF on the VDFResult of the…",3,null],[3,"EPostTicket","","PoSt election candidates",null,null],[12,"partial","","",4,null],[12,"sector_id","","",4,null],[12,"challenge_index","","",4,null],[3,"EPostProof","","Proof of Spacetime election proof",null,null],[12,"proof","","",5,null],[12,"post_rand","","",5,null],[12,"candidates","","",5,null],[4,"Error","","Blockchain blocks error",null,null],[13,"InvalidTipset","","Tipset contains invalid data, as described by the string…",6,null],[13,"NoBlocks","","The given tipset has no blocks",6,null],[13,"InvalidSignature","","Invalid signature",6,null],[13,"Validation","","Error in validating arbitrary data",6,null],[11,"header","","Returns reference to BlockHeader",0,[[],["blockheader",3]]],[11,"bls_msgs","","Returns reference to unsigned messages",0,[[]]],[11,"secp_msgs","","Returns reference to signed Secp256k1 messages",0,[[]]],[11,"cid","","Returns cid for block from header",0,[[],["cid",3]]],[11,"compute_win_count","","Uses VRFProof to compute number of wins. The algorithm is…",2,[[["bigint",3]]]],[0,"gossip_block","","",null,null],[3,"GossipBlock","forest_blocks::gossip_block","Block message used as serialized gossipsub messages for…",null,null],[12,"header","","",7,null],[12,"bls_messages","","",7,null],[12,"secpk_messages","","",7,null],[0,"json","","",null,null],[3,"GossipBlockJson","forest_blocks::gossip_block::json","Wrapper for serializing and deserializing a GossipBlock…",null,null],[12,"0","","",8,null],[3,"GossipBlockJsonRef","","Wrapper for serializing a GossipBlock reference to JSON.",null,null],[12,"0","","",9,null],[5,"serialize","","",null,[[["gossipblock",3]],["result",4]]],[5,"deserialize","","",null,[[],[["result",4],["gossipblock",3]]]],[0,"header","forest_blocks","",null,null],[3,"BlockHeader","forest_blocks::header","Header of a block",null,null],[3,"BlockHeaderBuilder","","Builder for `BlockHeader`.",null,null],[0,"json","","",null,null],[3,"BlockHeaderJson","forest_blocks::header::json","",null,null],[12,"0","","",10,null],[3,"BlockHeaderJsonRef","","Wrapper for serializing a BlockHeader reference to JSON.",null,null],[12,"0","","",11,null],[5,"serialize","","",null,[[["blockheader",3]],["result",4]]],[5,"deserialize","","",null,[[],[["blockheader",3],["result",4]]]],[0,"vec","","",null,null],[5,"serialize","forest_blocks::header::json::vec","",null,[[],["result",4]]],[5,"deserialize","","",null,[[],[["vec",3],["result",4]]]],[11,"parents","forest_blocks::header","Parents is the set of parents this block was based on.…",12,[[["tipsetkeys",3]]]],[11,"weight","","weight is the aggregate chain weight of the parent set",12,[[["bigint",3]]]],[11,"epoch","","epoch is the period in which a new block is generated.…",12,[[["chainepoch",6]]]],[11,"beacon_entries","","BeaconEntries contain the verifiable oracle randomness…",12,[[["vec",3],["beaconentry",3]]]],[11,"win_post_proof","","PoStProofs are the winning post proofs",12,[[["vec",3],["postproof",3]]]],[11,"miner_address","","miner_address is the address of the miner actor that mined…",12,[[["address",3]]]],[11,"messages","","messages contains the Cid to the merkle links for…",12,[[["cid",3]]]],[11,"message_receipts","","message_receipts is the Cid of the root of an array of…",12,[[["cid",3]]]],[11,"state_root","","state_root is a cid pointer to the parent state root after…",12,[[["cid",3]]]],[11,"fork_signal","","",12,[[]]],[11,"signature","","",12,[[["option",4],["signature",3]]]],[11,"election_proof","","",12,[[["electionproof",3],["option",4]]]],[11,"timestamp","","timestamp, in seconds since the Unix epoch, at which this…",12,[[]]],[11,"ticket","","the ticket submitted with this block",12,[[["option",4],["ticket",3]]]],[11,"bls_aggregate","","aggregate signature of miner in block",12,[[["option",4],["signature",3]]]],[11,"parent_base_fee","","the base fee of the parent block",12,[[["tokenamount",6]]]],[11,"cached_cid","","stores the cid for the block after the first call to `cid()`",12,[[["cid",3]]]],[11,"cached_bytes","","stores the hashed bytes of the block after the fist call…",12,[[["vec",3]]]],[11,"build","","Builds a new `BlockHeader`.",12,[[],[["blockheader",3],["result",4],["string",3]]]],[11,"builder","","Generates a BlockHeader builder as a constructor",13,[[],["blockheaderbuilder",3]]],[11,"parents","","Getter for BlockHeader parents",13,[[],["tipsetkeys",3]]],[11,"weight","","Getter for BlockHeader weight",13,[[],["bigint",3]]],[11,"epoch","","Getter for BlockHeader epoch",13,[[],["chainepoch",6]]],[11,"beacon_entries","","Getter for Drand BeaconEntry",13,[[]]],[11,"win_post_proof","","Getter for window PoSt proof",13,[[]]],[11,"miner_address","","Getter for BlockHeader miner_address",13,[[],["address",3]]],[11,"messages","","Getter for BlockHeader messages",13,[[],["cid",3]]],[11,"message_receipts","","Getter for BlockHeader message_receipts",13,[[],["cid",3]]],[11,"state_root","","Getter for BlockHeader state_root",13,[[],["cid",3]]],[11,"timestamp","","Getter for BlockHeader timestamp",13,[[]]],[11,"ticket","","Getter for BlockHeader ticket",13,[[],["option",4]]],[11,"bls_aggregate","","Getter for BlockHeader bls_aggregate",13,[[],["option",4]]],[11,"cid","","Getter for BlockHeader cid",13,[[],["cid",3]]],[11,"parent_base_fee","","Getter for BlockHeader parent_base_fee",13,[[],["bigint",3]]],[11,"fork_signal","","Getter for BlockHeader fork_signal",13,[[]]],[11,"election_proof","","Getter for BlockHeader epost_verify",13,[[],["option",4]]],[11,"signature","","Getter for BlockHeader signature",13,[[],["option",4]]],[11,"check_block_signature","","Check to ensure block signature is valid",13,[[["address",3]],[["result",4],["error",4]]]],[11,"is_ticket_winner","","Returns true if (h(vrfout) * totalPower) < (e * sectorSize…",13,[[["ticket",3],["bigint",3]]]],[11,"validate_block_drand","","Validates if the current header\'s Beacon entries are valid…",13,[[["beaconentry",3]]]],[11,"to_signing_bytes","","Serializes the header to bytes for signing purposes i.e.…",13,[[],[["vec",3],["string",3],["result",4]]]],[11,"build_and_validate","","",12,[[],[["blockheader",3],["result",4],["string",3]]]],[11,"new","forest_blocks","Ticket constructor",3,[[["vrfproof",3]]]],[0,"tipset","","",null,null],[3,"TipsetKeys","forest_blocks::tipset","A set of CIDs forming a unique key for a Tipset. Equal…",null,null],[12,"cids","","",14,null],[3,"Tipset","","An immutable set of blocks at the same height with the…",null,null],[3,"FullTipset","","FullTipset is an expanded version of the Tipset that…",null,null],[0,"tipset_keys_json","","",null,null],[5,"serialize","forest_blocks::tipset::tipset_keys_json","",null,[[["tipsetkeys",3]],["result",4]]],[5,"deserialize","","",null,[[],[["result",4],["tipsetkeys",3]]]],[0,"tipset_json","forest_blocks::tipset","",null,null],[3,"TipsetJson","forest_blocks::tipset::tipset_json","Wrapper for serializing and deserializing a SignedMessage…",null,null],[12,"0","","",15,null],[3,"TipsetJsonRef","","Wrapper for serializing a SignedMessage reference to JSON.",null,null],[12,"0","","",16,null],[5,"serialize","","",null,[[["tipset",3]],["result",4]]],[5,"deserialize","","",null,[[],[["result",4],["tipset",3]]]],[11,"new","forest_blocks::tipset","",14,[[["cid",3],["vec",3]]]],[11,"cids","","Returns tipset header cids",14,[[]]],[11,"new","","Builds a new Tipset from a collection of blocks. A valid…",17,[[["blockheader",3],["vec",3]],[["result",4],["error",4]]]],[11,"epoch","","Returns epoch of the tipset",17,[[],["chainepoch",6]]],[11,"blocks","","Returns all blocks in tipset",17,[[]]],[11,"into_blocks","","Returns all blocks in tipset",17,[[],[["blockheader",3],["vec",3]]]],[11,"min_ticket","","Returns the smallest ticket of all blocks in the tipset",17,[[],[["ticket",3],["option",4]]]],[11,"min_ticket_block","","Returns the block with the smallest ticket of all blocks…",17,[[],["blockheader",3]]],[11,"min_timestamp","","Returns the smallest timestamp of all blocks in the tipset",17,[[]]],[11,"len","","Returns the number of blocks in the tipset",17,[[]]],[11,"key","","Returns a key for the tipset.",17,[[],["tipsetkeys",3]]],[11,"cids","","Returns slice of Cids for the current tipset",17,[[]]],[11,"parents","","Returns the CIDs of the parents of the blocks in the tipset",17,[[],["tipsetkeys",3]]],[11,"parent_state","","Returns the state root for the tipset parent.",17,[[],["cid",3]]],[11,"weight","","Returns the tipset\'s calculated weight",17,[[],["bigint",3]]],[11,"new","","constructor",18,[[["block",3],["vec",3]],[["result",4],["error",4]]]],[11,"blocks","","Returns reference to all blocks in a full tipset",18,[[]]],[11,"into_blocks","","Returns all blocks in a full tipset",18,[[],[["block",3],["vec",3]]]],[11,"to_tipset","","Returns a Tipset",18,[[],["tipset",3]]],[11,"parent_state","","Returns the state root for the tipset parent.",18,[[],["cid",3]]],[11,"epoch","","Returns epoch of the tipset",18,[[],["chainepoch",6]]],[11,"weight","","Returns the tipset\'s calculated weight",18,[[],["bigint",3]]],[0,"json","forest_blocks","",null,null],[0,"opt","forest_blocks::json","",null,null],[0,"json","forest_blocks","",null,null],[0,"opt","forest_blocks::json","",null,null],[17,"BLOCK_MESSAGE_LIMIT","forest_blocks","Limit of bls and secp messages combined in a block.",null,null],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"equivalent","","",2,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"equivalent","","",3,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"equivalent","","",4,[[]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"vzip","","",5,[[]]],[11,"equivalent","","",5,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_string","","",6,[[],["string",3]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"vzip","","",6,[[]]],[11,"as_fail","","",6,[[],["fail",8]]],[11,"from","forest_blocks::gossip_block","",7,[[]]],[11,"into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"vzip","","",7,[[]]],[11,"from","forest_blocks::gossip_block::json","",8,[[]]],[11,"into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"vzip","","",8,[[]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"vzip","","",9,[[]]],[11,"from","forest_blocks::header","",13,[[]]],[11,"into","","",13,[[]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"to_string","","",13,[[],["string",3]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"vzip","","",13,[[]]],[11,"equivalent","","",13,[[]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"vzip","","",12,[[]]],[11,"from","forest_blocks::header::json","",10,[[]]],[11,"into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"vzip","","",10,[[]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"vzip","","",11,[[]]],[11,"from","forest_blocks::tipset","",14,[[]]],[11,"into","","",14,[[]]],[11,"to_owned","","",14,[[]]],[11,"clone_into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"vzip","","",14,[[]]],[11,"equivalent","","",14,[[]]],[11,"get_hash","","",14,[[]]],[11,"from","","",17,[[]]],[11,"into","","",17,[[]]],[11,"to_owned","","",17,[[]]],[11,"clone_into","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"vzip","","",17,[[]]],[11,"equivalent","","",17,[[]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"to_owned","","",18,[[]]],[11,"clone_into","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"vzip","","",18,[[]]],[11,"from","forest_blocks::tipset::tipset_json","",15,[[]]],[11,"into","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"vzip","","",15,[[]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"vzip","","",16,[[]]],[11,"from","forest_blocks","",6,[[["timeerr",3]],["error",4]]],[11,"from","forest_blocks::header","",13,[[["blockheaderjson",3]]]],[11,"from","forest_blocks::tipset","",17,[[["fulltipset",3]]]],[11,"from","","",17,[[["tipsetjson",3]]]],[11,"from","forest_blocks::tipset::tipset_json","",15,[[["tipset",3]]]],[11,"from","","",16,[[["tipset",3]]]],[11,"clone","forest_blocks","",0,[[],["block",3]]],[11,"clone","","",2,[[],["electionproof",3]]],[11,"clone","forest_blocks::header","",13,[[],["blockheader",3]]],[11,"clone","","",12,[[],["blockheaderbuilder",3]]],[11,"clone","forest_blocks","",3,[[],["ticket",3]]],[11,"clone","","",4,[[],["epostticket",3]]],[11,"clone","","",5,[[],["epostproof",3]]],[11,"clone","forest_blocks::tipset","",14,[[],["tipsetkeys",3]]],[11,"clone","","",17,[[],["tipset",3]]],[11,"clone","","",18,[[],["fulltipset",3]]],[11,"default","forest_blocks","",2,[[],["electionproof",3]]],[11,"default","forest_blocks::header","",12,[[],["blockheaderbuilder",3]]],[11,"default","forest_blocks","",3,[[],["ticket",3]]],[11,"default","","",4,[[],["epostticket",3]]],[11,"default","","",5,[[],["epostproof",3]]],[11,"default","forest_blocks::tipset","",14,[[],["tipsetkeys",3]]],[11,"cmp","forest_blocks","",2,[[["electionproof",3]],["ordering",4]]],[11,"cmp","forest_blocks::header","",13,[[],["ordering",4]]],[11,"cmp","forest_blocks","",3,[[["ticket",3]],["ordering",4]]],[11,"eq","","",0,[[["block",3]]]],[11,"ne","","",0,[[["block",3]]]],[11,"eq","","",2,[[["electionproof",3]]]],[11,"ne","","",2,[[["electionproof",3]]]],[11,"eq","","",6,[[["error",4]]]],[11,"ne","","",6,[[["error",4]]]],[11,"eq","forest_blocks::header","",13,[[["blockheader",3]]]],[11,"ne","","",13,[[["blockheader",3]]]],[11,"eq","forest_blocks","",3,[[["ticket",3]]]],[11,"ne","","",3,[[["ticket",3]]]],[11,"eq","","",4,[[["epostticket",3]]]],[11,"ne","","",4,[[["epostticket",3]]]],[11,"eq","","",5,[[["epostproof",3]]]],[11,"ne","","",5,[[["epostproof",3]]]],[11,"eq","forest_blocks::tipset","",14,[[["tipsetkeys",3]]]],[11,"ne","","",14,[[["tipsetkeys",3]]]],[11,"eq","","",17,[[["tipset",3]]]],[11,"ne","","",17,[[["tipset",3]]]],[11,"eq","","",18,[[["fulltipset",3]]]],[11,"ne","","",18,[[["fulltipset",3]]]],[11,"partial_cmp","forest_blocks","",2,[[["electionproof",3]],[["option",4],["ordering",4]]]],[11,"lt","","",2,[[["electionproof",3]]]],[11,"le","","",2,[[["electionproof",3]]]],[11,"gt","","",2,[[["electionproof",3]]]],[11,"ge","","",2,[[["electionproof",3]]]],[11,"partial_cmp","forest_blocks::header","",13,[[],[["ordering",4],["option",4]]]],[11,"partial_cmp","forest_blocks","",3,[[["ticket",3]],[["option",4],["ordering",4]]]],[11,"lt","","",3,[[["ticket",3]]]],[11,"le","","",3,[[["ticket",3]]]],[11,"gt","","",3,[[["ticket",3]]]],[11,"ge","","",3,[[["ticket",3]]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","forest_blocks::header","",13,[[["formatter",3]],["result",6]]],[11,"fmt","forest_blocks","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","forest_blocks::tipset","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",17,[[["formatter",3]],["result",6]]],[11,"fmt","","",18,[[["formatter",3]],["result",6]]],[11,"fmt","forest_blocks","",6,[[["formatter",3]],["result",6]]],[11,"fmt","forest_blocks::header","",13,[[["formatter",3]],["result",6]]],[11,"hash","forest_blocks::tipset","",14,[[]]],[11,"serialize","forest_blocks","",1,[[],["result",4]]],[11,"serialize","","",2,[[],["result",4]]],[11,"serialize","forest_blocks::gossip_block","",7,[[],["result",4]]],[11,"serialize","forest_blocks::gossip_block::json","",8,[[],["result",4]]],[11,"serialize","","",9,[[],["result",4]]],[11,"serialize","forest_blocks::header::json","",10,[[],["result",4]]],[11,"serialize","","",11,[[],["result",4]]],[11,"serialize","forest_blocks::header","",13,[[],["result",4]]],[11,"serialize","forest_blocks","",3,[[],["result",4]]],[11,"serialize","","",4,[[],["result",4]]],[11,"serialize","","",5,[[],["result",4]]],[11,"serialize","forest_blocks::tipset","",14,[[],["result",4]]],[11,"serialize","forest_blocks::tipset::tipset_json","",15,[[],["result",4]]],[11,"serialize","","",16,[[],["result",4]]],[11,"deserialize","forest_blocks","",1,[[],["result",4]]],[11,"deserialize","","",2,[[],["result",4]]],[11,"deserialize","forest_blocks::gossip_block","",7,[[],["result",4]]],[11,"deserialize","forest_blocks::gossip_block::json","",8,[[],["result",4]]],[11,"deserialize","forest_blocks::header::json","",10,[[],["result",4]]],[11,"deserialize","forest_blocks::header","",13,[[],["result",4]]],[11,"deserialize","forest_blocks","",3,[[],["result",4]]],[11,"deserialize","","",4,[[],["result",4]]],[11,"deserialize","","",5,[[],["result",4]]],[11,"deserialize","forest_blocks::tipset","",14,[[],["result",4]]],[11,"deserialize","forest_blocks::tipset::tipset_json","",15,[[],["result",4]]],[11,"cid","forest_blocks::header","",13,[[],[["result",4],["cid",3],["encodingerror",3]]]]],"p":[[3,"Block"],[3,"TxMeta"],[3,"ElectionProof"],[3,"Ticket"],[3,"EPostTicket"],[3,"EPostProof"],[4,"Error"],[3,"GossipBlock"],[3,"GossipBlockJson"],[3,"GossipBlockJsonRef"],[3,"BlockHeaderJson"],[3,"BlockHeaderJsonRef"],[3,"BlockHeaderBuilder"],[3,"BlockHeader"],[3,"TipsetKeys"],[3,"TipsetJson"],[3,"TipsetJsonRef"],[3,"Tipset"],[3,"FullTipset"]]},\
"forest_car":{"doc":"","i":[[3,"CarHeader","forest_car","CAR file header",null,null],[12,"roots","","",0,null],[12,"version","","",0,null],[3,"CarReader","","Reads CAR files that are in a BufReader",null,null],[12,"reader","","",1,null],[12,"header","","",1,null],[3,"Block","","IPLD Block",null,null],[5,"load_car","","Loads a CAR buffer into a BlockStore",null,[[["read",8]],[["vec",3],["error",4],["result",4]]]],[11,"new","","Creates a new CAR file header",0,[[["vec",3],["cid",3]]]],[11,"new","","Creates a new CarReader and parses the CarHeader",1,[[],[["result",4],["error",4]]]],[11,"next_block","","Returns the next IPLD Block in the buffer",1,[[],[["option",4],["result",4],["error",4]]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"clone","","",2,[[],["block",3]]],[11,"default","","",0,[[],["carheader",3]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"serialize","","",0,[[],["result",4]]],[11,"deserialize","","",0,[[],["result",4]]]],"p":[[3,"CarHeader"],[3,"CarReader"],[3,"Block"]]},\
"forest_cid":{"doc":"","i":[[3,"Prefix","forest_cid","Prefix represents all metadata of a CID, without the…",null,null],[12,"version","","",0,null],[12,"codec","","",0,null],[12,"mh_type","","",0,null],[12,"mh_len","","",0,null],[3,"Cid","","Representation of a IPLD CID.",null,null],[12,"version","","",1,null],[12,"codec","","",1,null],[12,"hash","","",1,null],[4,"Codec","","",null,null],[13,"Raw","","",2,null],[13,"DagProtobuf","","",2,null],[13,"DagCBOR","","",2,null],[13,"GitRaw","","",2,null],[13,"EthereumBlock","","",2,null],[13,"EthereumBlockList","","",2,null],[13,"EthereumTxTrie","","",2,null],[13,"EthereumTx","","",2,null],[13,"EthereumTxReceiptTrie","","",2,null],[13,"EthereumTxReceipt","","",2,null],[13,"EthereumStateTrie","","",2,null],[13,"EthereumAccountSnapshot","","",2,null],[13,"EthereumStorageTrie","","",2,null],[13,"BitcoinBlock","","",2,null],[13,"BitcoinTx","","",2,null],[13,"ZcashBlock","","",2,null],[13,"ZcashTx","","",2,null],[13,"FilCommitmentUnsealed","","",2,null],[13,"FilCommitmentSealed","","",2,null],[13,"DagJSON","","",2,null],[13,"Other","","",2,null],[4,"Error","","Cid Error",null,null],[13,"UnknownCodec","","",3,null],[13,"InputTooShort","","",3,null],[13,"ParsingError","","",3,null],[13,"InvalidCidVersion","","",3,null],[13,"Other","","",3,null],[4,"Version","","Cid protocol version",null,null],[13,"V0","","",4,null],[13,"V1","","",4,null],[11,"from","","Convert a number to the matching codec",2,[[]]],[11,"new_from_bytes","","Generate new prefix from encoded bytes",0,[[],[["prefix",3],["result",4],["error",4]]]],[11,"to_bytes","","Encodes prefix to bytes",0,[[],["vec",3]]],[11,"from","","Generates version from integer value",4,[[],[["error",4],["version",4],["result",4]]]],[11,"is_v0_str","","Returns true if string is version 0",4,[[]]],[11,"is_v0_binary","","Returns true if bytes is version 0",4,[[]]],[0,"json","","",null,null],[3,"CidJson","forest_cid::json","Wrapper for serializing and deserializing a Cid from JSON.",null,null],[12,"0","","",5,null],[3,"CidJsonRef","","Wrapper for serializing a cid reference to JSON.",null,null],[12,"0","","",6,null],[5,"serialize","","",null,[[["cid",3]],["result",4]]],[5,"deserialize","","",null,[[],[["cid",3],["result",4]]]],[0,"vec","","",null,null],[3,"CidJsonVec","forest_cid::json::vec","Wrapper for serializing and deserializing a Cid vector…",null,null],[12,"0","","",7,null],[3,"CidJsonSlice","","Wrapper for serializing a cid slice to JSON.",null,null],[12,"0","","",8,null],[5,"serialize","","",null,[[],["result",4]]],[5,"deserialize","","",null,[[],[["result",4],["vec",3]]]],[11,"new","forest_cid","Create a new CID.",1,[[["multihash",3],["codec",4],["version",4]],["cid",3]]],[11,"new_v1","","Create a new v1 CID.",1,[[["multihash",3],["codec",4]],["cid",3]]],[11,"new_v0","","Create a new v0 CID.",1,[[["multihash",3],["codec",4]],["cid",3]]],[11,"new_from_cbor","","Constructs a cid with bytes using default version and codec",1,[[["multihashdigest",8]]]],[11,"from_raw_cid","","Create a new CID from raw data (binary or multibase…",1,[[["cid",3],["tryinto",8]],[["cid",3],["result",4]]]],[11,"new_from_prefix","","Create a new CID from a prefix and some data.",1,[[["prefix",3]],[["cid",3],["result",4],["error",4]]]],[11,"to_bytes","","Returns encoded bytes of a cid",1,[[],["vec",3]]],[11,"prefix","","Returns prefix for Cid format",1,[[],["prefix",3]]],[11,"key","","Returns cid in bytes to be stored in datastore",1,[[],["vec",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"to_string","","",1,[[],["string",3]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"to_string","","",3,[[],["string",3]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","forest_cid::json","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","forest_cid::json::vec","",7,[[]]],[11,"into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","forest_cid","",3,[[["error",3]],["error",4]]],[11,"from","","",3,[[["error",4]],["error",4]]],[11,"from","","",3,[[["decodeownederror",3]],["error",4]]],[11,"from","","",3,[[["encodeerror",4]],["error",4]]],[11,"from","","",3,[[["decodeerror",4]],["error",4]]],[11,"from","","",1,[[["cidjson",3]]]],[11,"clone","","",2,[[],["codec",4]]],[11,"clone","","",3,[[],["error",4]]],[11,"clone","","",0,[[],["prefix",3]]],[11,"clone","","",4,[[],["version",4]]],[11,"clone","forest_cid::json","",5,[[],["cidjson",3]]],[11,"clone","forest_cid","",1,[[],["cid",3]]],[11,"default","","",1,[[]]],[11,"eq","","",2,[[["codec",4]]]],[11,"ne","","",2,[[["codec",4]]]],[11,"eq","","",3,[[["error",4]]]],[11,"ne","","",3,[[["error",4]]]],[11,"eq","","",0,[[["prefix",3]]]],[11,"ne","","",0,[[["prefix",3]]]],[11,"eq","","",4,[[["version",4]]]],[11,"eq","","",1,[[["cid",3]]]],[11,"ne","","",1,[[["cid",3]]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","forest_cid::json","",5,[[["formatter",3]],["result",6]]],[11,"fmt","forest_cid","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"hash","","",2,[[]]],[11,"hash","","",4,[[]]],[11,"hash","","",1,[[]]],[11,"try_from","","",1,[[["string",3]],["result",4]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_from","","",1,[[["vec",3]],["result",4]]],[11,"try_from","","",1,[[],["result",4]]],[11,"from_str","","",1,[[],[["result",4],["error",4]]]],[11,"serialize","forest_cid::json","",5,[[],["result",4]]],[11,"serialize","","",6,[[],["result",4]]],[11,"serialize","forest_cid::json::vec","",7,[[],["result",4]]],[11,"serialize","","",8,[[],["result",4]]],[11,"serialize","forest_cid","",1,[[],["result",4]]],[11,"deserialize","forest_cid::json","",5,[[],["result",4]]],[11,"deserialize","forest_cid::json::vec","",7,[[],["result",4]]],[11,"deserialize","forest_cid","",1,[[],["result",4]]]],"p":[[3,"Prefix"],[3,"Cid"],[4,"Codec"],[4,"Error"],[4,"Version"],[3,"CidJson"],[3,"CidJsonRef"],[3,"CidJsonVec"],[3,"CidJsonSlice"]]},\
"forest_crypto":{"doc":"","i":[[4,"Error","forest_crypto","Crypto error",null,null],[13,"SigningError","","Failed to produce a signature",0,null],[13,"InvalidRecovery","","Unable to perform ecrecover with the given params",0,null],[13,"InvalidPubKey","","Provided public key is not understood",0,null],[4,"DomainSeparationTag","","Specifies a domain for randomness generation.",null,null],[13,"TicketProduction","","",1,null],[13,"ElectionProofProduction","","",1,null],[13,"WinningPoStChallengeSeed","","",1,null],[13,"WindowedPoStChallengeSeed","","",1,null],[13,"SealRandomness","","",1,null],[13,"InteractiveSealChallengeSeed","","",1,null],[13,"WindowPoStDeadlineAssignment","","",1,null],[13,"MarketDealCronSeed","","",1,null],[13,"PoStChainCommit","","",1,null],[11,"from_byte","","from_byte allows generating DST from encoded byte",1,[[],["option",4]]],[0,"signature","","",null,null],[3,"Signature","forest_crypto::signature","A cryptographic signature, represented in bytes, of any…",null,null],[4,"SignatureType","","Signature variants for Forest signatures",null,null],[13,"Secp256k1","","",2,null],[13,"BLS","","",2,null],[5,"verify_bls_aggregate","","Aggregates and verifies bls signatures collectively",null,[[["signature",3]]]],[5,"ecrecover","","Return Address for a message given it\'s signing bytes hash…",null,[[],[["address",3],["result",4],["error",4]]]],[0,"json","","",null,null],[3,"SignatureJson","forest_crypto::signature::json","",null,null],[12,"0","","",3,null],[3,"SignatureJsonRef","","Wrapper for serializing a Signature reference to JSON.",null,null],[12,"0","","",4,null],[5,"serialize","","",null,[[["signature",3]],["result",4]]],[5,"deserialize","","",null,[[],[["signature",3],["result",4]]]],[0,"opt","","",null,null],[5,"serialize","forest_crypto::signature::json::opt","",null,[[["option",4]],["result",4]]],[5,"deserialize","","",null,[[],[["result",4],["option",4]]]],[17,"BLS_SIG_LEN","forest_crypto::signature","BLS signature length in bytes.",null,null],[17,"BLS_PUB_LEN","","BLS Public key length in bytes.",null,null],[17,"SECP_SIG_LEN","","Secp256k1 signature length in bytes.",null,null],[17,"SECP_PUB_LEN","","Secp256k1 Public key length in bytes.",null,null],[11,"new_secp256k1","","Creates a SECP Signature given the raw bytes",5,[[["vec",3]]]],[11,"new_bls","","Creates a BLS Signature given the raw bytes",5,[[["vec",3]]]],[11,"bytes","","Returns reference to signature bytes",5,[[]]],[11,"signature_type","","Returns reference to signature type",5,[[],["signaturetype",4]]],[11,"verify","","Checks if a signature is valid given data and address",5,[[["address",3]],[["result",4],["string",3]]]],[0,"vrf","forest_crypto","",null,null],[3,"VRFProof","forest_crypto::vrf","The output from running a VRF",null,null],[12,"0","","",6,null],[5,"verify_vrf","","",null,[[["address",3]],[["result",4],["string",3]]]],[0,"json","","",null,null],[5,"serialize","forest_crypto::vrf::json","",null,[[["vrfproof",3]],["result",4]]],[5,"deserialize","","",null,[[],[["vrfproof",3],["result",4]]]],[11,"new","forest_crypto::vrf","Creates a VRFProof from a raw vector",6,[[["vec",3]]]],[11,"as_bytes","","Returns reference to underlying vector",6,[[]]],[11,"digest","","Compute the blake2b256 digest of the proof",6,[[]]],[8,"Signer","forest_crypto","Signer is a trait which allows a key implementation to…",null,null],[10,"sign_bytes","","",7,[[["address",3]],[["result",4],["signature",3],["box",3]]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","forest_crypto::signature","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"vzip","","",5,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","forest_crypto::signature::json","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"from","forest_crypto::vrf","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"vzip","","",6,[[]]],[11,"from","forest_crypto","",0,[[["addresserror",4]]]],[11,"from","","",0,[[["error",8],["box",3]],["error",4]]],[11,"from","","",0,[[["secperror",4]],["error",4]]],[11,"from","","",0,[[["encodingerror",3]],["error",4]]],[11,"clone","","",1,[[],["domainseparationtag",4]]],[11,"clone","forest_crypto::signature","",2,[[],["signaturetype",4]]],[11,"clone","","",5,[[],["signature",3]]],[11,"clone","forest_crypto::vrf","",6,[[],["vrfproof",3]]],[11,"default","forest_crypto::signature","",2,[[]]],[11,"default","","",5,[[],["signature",3]]],[11,"default","forest_crypto::vrf","",6,[[],["vrfproof",3]]],[11,"cmp","","",6,[[["vrfproof",3]],["ordering",4]]],[11,"eq","forest_crypto","",0,[[["error",4]]]],[11,"ne","","",0,[[["error",4]]]],[11,"eq","","",1,[[["domainseparationtag",4]]]],[11,"eq","forest_crypto::signature","",2,[[["signaturetype",4]]]],[11,"eq","","",5,[[["signature",3]]]],[11,"ne","","",5,[[["signature",3]]]],[11,"eq","forest_crypto::vrf","",6,[[["vrfproof",3]]]],[11,"ne","","",6,[[["vrfproof",3]]]],[11,"partial_cmp","","",6,[[["vrfproof",3]],[["option",4],["ordering",4]]]],[11,"lt","","",6,[[["vrfproof",3]]]],[11,"le","","",6,[[["vrfproof",3]]]],[11,"gt","","",6,[[["vrfproof",3]]]],[11,"ge","","",6,[[["vrfproof",3]]]],[11,"fmt","forest_crypto","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","forest_crypto::signature","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","forest_crypto::vrf","",6,[[["formatter",3]],["result",6]]],[11,"fmt","forest_crypto","",0,[[["formatter",3]],["result",6]]],[11,"hash","","",1,[[]]],[11,"hash","forest_crypto::signature","",2,[[]]],[11,"hash","","",5,[[]]],[11,"source","forest_crypto","",0,[[],[["error",8],["option",4]]]],[11,"from_i64","","",1,[[],["option",4]]],[11,"from_u64","","",1,[[],["option",4]]],[11,"from_i64","forest_crypto::signature","",2,[[],["option",4]]],[11,"from_u64","","",2,[[],["option",4]]],[11,"deserialize","","",2,[[],["result",4]]],[11,"deserialize","","",5,[[],["result",4]]],[11,"deserialize","forest_crypto::signature::json","",3,[[],["result",4]]],[11,"deserialize","forest_crypto::vrf","",6,[[],["result",4]]],[11,"serialize","forest_crypto::signature","",2,[[],["result",4]]],[11,"serialize","","",5,[[],["result",4]]],[11,"serialize","forest_crypto::signature::json","",3,[[],["result",4]]],[11,"serialize","","",4,[[],["result",4]]],[11,"serialize","forest_crypto::vrf","",6,[[],["result",4]]]],"p":[[4,"Error"],[4,"DomainSeparationTag"],[4,"SignatureType"],[3,"SignatureJson"],[3,"SignatureJsonRef"],[3,"Signature"],[3,"VRFProof"],[8,"Signer"]]},\
"forest_encoding":{"doc":"","i":[[0,"de","forest_encoding","Generic data structure deserialization framework.",null,null],[0,"value","forest_encoding::de","Building blocks for deserializing basic values using the…",null,null],[3,"Error","forest_encoding::de::value","A minimal representation of all possible errors that can…",null,null],[3,"UnitDeserializer","","A deserializer holding a `()`.",null,null],[3,"BoolDeserializer","","A deserializer holding a `bool`.",null,null],[3,"I8Deserializer","","A deserializer holding an `i8`.",null,null],[3,"I16Deserializer","","A deserializer holding an `i16`.",null,null],[3,"I32Deserializer","","A deserializer holding an `i32`.",null,null],[3,"I64Deserializer","","A deserializer holding an `i64`.",null,null],[3,"IsizeDeserializer","","A deserializer holding an `isize`.",null,null],[3,"U8Deserializer","","A deserializer holding a `u8`.",null,null],[3,"U16Deserializer","","A deserializer holding a `u16`.",null,null],[3,"U64Deserializer","","A deserializer holding a `u64`.",null,null],[3,"UsizeDeserializer","","A deserializer holding a `usize`.",null,null],[3,"F32Deserializer","","A deserializer holding an `f32`.",null,null],[3,"F64Deserializer","","A deserializer holding an `f64`.",null,null],[3,"CharDeserializer","","A deserializer holding a `char`.",null,null],[3,"I128Deserializer","","A deserializer holding an `i128`.",null,null],[3,"U128Deserializer","","A deserializer holding a `u128`.",null,null],[3,"U32Deserializer","","A deserializer holding a `u32`.",null,null],[3,"StrDeserializer","","A deserializer holding a `&str`.",null,null],[3,"BorrowedStrDeserializer","","A deserializer holding a `&str` with a lifetime tied to…",null,null],[3,"StringDeserializer","","A deserializer holding a `String`.",null,null],[3,"CowStrDeserializer","","A deserializer holding a `Cow<str>`.",null,null],[3,"BorrowedBytesDeserializer","","A deserializer holding a `&[u8]` with a lifetime tied to…",null,null],[3,"SeqDeserializer","","A deserializer that iterates over a sequence.",null,null],[3,"SeqAccessDeserializer","","A deserializer holding a `SeqAccess`.",null,null],[3,"MapDeserializer","","A deserializer that iterates over a map.",null,null],[3,"MapAccessDeserializer","","A deserializer holding a `MapAccess`.",null,null],[8,"Error","forest_encoding::de","The `Error` trait allows `Deserialize` implementations to…",null,null],[10,"custom","","Raised when there is general error when deserializing a…",0,[[]]],[11,"invalid_type","","Raised when a `Deserialize` receives a type different from…",0,[[["unexpected",4],["expected",8]]]],[11,"invalid_value","","Raised when a `Deserialize` receives a value of the right…",0,[[["unexpected",4],["expected",8]]]],[11,"invalid_length","","Raised when deserializing a sequence or map and the input…",0,[[["expected",8]]]],[11,"unknown_variant","","Raised when a `Deserialize` enum type received a variant…",0,[[]]],[11,"unknown_field","","Raised when a `Deserialize` struct type received a field…",0,[[]]],[11,"missing_field","","Raised when a `Deserialize` struct type expected to…",0,[[]]],[11,"duplicate_field","","Raised when a `Deserialize` struct type received more than…",0,[[]]],[4,"Unexpected","","`Unexpected` represents an unexpected invocation of any…",null,null],[13,"Bool","","The input contained a boolean value that was not expected.",1,null],[13,"Unsigned","","The input contained an unsigned integer `u8`, `u16`, `u32`…",1,null],[13,"Signed","","The input contained a signed integer `i8`, `i16`, `i32` or…",1,null],[13,"Float","","The input contained a floating point `f32` or `f64` that…",1,null],[13,"Char","","The input contained a `char` that was not expected.",1,null],[13,"Str","","The input contained a `&str` or `String` that was not…",1,null],[13,"Bytes","","The input contained a `&[u8]` or `Vec<u8>` that was not…",1,null],[13,"Unit","","The input contained a unit `()` that was not expected.",1,null],[13,"Option","","The input contained an `Option<T>` that was not expected.",1,null],[13,"NewtypeStruct","","The input contained a newtype struct that was not expected.",1,null],[13,"Seq","","The input contained a sequence that was not expected.",1,null],[13,"Map","","The input contained a map that was not expected.",1,null],[13,"Enum","","The input contained an enum that was not expected.",1,null],[13,"UnitVariant","","The input contained a unit variant that was not expected.",1,null],[13,"NewtypeVariant","","The input contained a newtype variant that was not expected.",1,null],[13,"TupleVariant","","The input contained a tuple variant that was not expected.",1,null],[13,"StructVariant","","The input contained a struct variant that was not expected.",1,null],[13,"Other","","A message stating what uncategorized thing the input…",1,null],[8,"Expected","","`Expected` represents an explanation of what data a…",null,null],[10,"fmt","","Format an explanation of what data was being expected.…",2,[[["formatter",3]],[["error",3],["result",4]]]],[8,"Deserialize","","A data structure that can be deserialized from any data…",null,null],[10,"deserialize","","Deserialize this value from the given Serde deserializer.",3,[[],["result",4]]],[8,"DeserializeOwned","","A data structure that can be deserialized without…",null,null],[8,"DeserializeSeed","","`DeserializeSeed` is the stateful form of the…",null,null],[16,"Value","","The type produced by using this seed.",4,null],[10,"deserialize","","Equivalent to the more common `Deserialize::deserialize`…",4,[[],["result",4]]],[8,"Deserializer","","A data format that can deserialize any data structure…",null,null],[16,"Error","","The error type that can be returned if some error occurs…",5,null],[10,"deserialize_any","","Require the `Deserializer` to figure out how to drive the…",5,[[],["result",4]]],[10,"deserialize_bool","","Hint that the `Deserialize` type is expecting a `bool`…",5,[[],["result",4]]],[10,"deserialize_i8","","Hint that the `Deserialize` type is expecting an `i8` value.",5,[[],["result",4]]],[10,"deserialize_i16","","Hint that the `Deserialize` type is expecting an `i16`…",5,[[],["result",4]]],[10,"deserialize_i32","","Hint that the `Deserialize` type is expecting an `i32`…",5,[[],["result",4]]],[10,"deserialize_i64","","Hint that the `Deserialize` type is expecting an `i64`…",5,[[],["result",4]]],[11,"deserialize_i128","","Hint that the `Deserialize` type is expecting an `i128`…",5,[[],["result",4]]],[10,"deserialize_u8","","Hint that the `Deserialize` type is expecting a `u8` value.",5,[[],["result",4]]],[10,"deserialize_u16","","Hint that the `Deserialize` type is expecting a `u16` value.",5,[[],["result",4]]],[10,"deserialize_u32","","Hint that the `Deserialize` type is expecting a `u32` value.",5,[[],["result",4]]],[10,"deserialize_u64","","Hint that the `Deserialize` type is expecting a `u64` value.",5,[[],["result",4]]],[11,"deserialize_u128","","Hint that the `Deserialize` type is expecting an `u128`…",5,[[],["result",4]]],[10,"deserialize_f32","","Hint that the `Deserialize` type is expecting a `f32` value.",5,[[],["result",4]]],[10,"deserialize_f64","","Hint that the `Deserialize` type is expecting a `f64` value.",5,[[],["result",4]]],[10,"deserialize_char","","Hint that the `Deserialize` type is expecting a `char`…",5,[[],["result",4]]],[10,"deserialize_str","","Hint that the `Deserialize` type is expecting a string…",5,[[],["result",4]]],[10,"deserialize_string","","Hint that the `Deserialize` type is expecting a string…",5,[[],["result",4]]],[10,"deserialize_bytes","","Hint that the `Deserialize` type is expecting a byte array…",5,[[],["result",4]]],[10,"deserialize_byte_buf","","Hint that the `Deserialize` type is expecting a byte array…",5,[[],["result",4]]],[10,"deserialize_option","","Hint that the `Deserialize` type is expecting an optional…",5,[[],["result",4]]],[10,"deserialize_unit","","Hint that the `Deserialize` type is expecting a unit value.",5,[[],["result",4]]],[10,"deserialize_unit_struct","","Hint that the `Deserialize` type is expecting a unit…",5,[[],["result",4]]],[10,"deserialize_newtype_struct","","Hint that the `Deserialize` type is expecting a newtype…",5,[[],["result",4]]],[10,"deserialize_seq","","Hint that the `Deserialize` type is expecting a sequence…",5,[[],["result",4]]],[10,"deserialize_tuple","","Hint that the `Deserialize` type is expecting a sequence…",5,[[],["result",4]]],[10,"deserialize_tuple_struct","","Hint that the `Deserialize` type is expecting a tuple…",5,[[],["result",4]]],[10,"deserialize_map","","Hint that the `Deserialize` type is expecting a map of…",5,[[],["result",4]]],[10,"deserialize_struct","","Hint that the `Deserialize` type is expecting a struct…",5,[[],["result",4]]],[10,"deserialize_enum","","Hint that the `Deserialize` type is expecting an enum…",5,[[],["result",4]]],[10,"deserialize_identifier","","Hint that the `Deserialize` type is expecting the name of…",5,[[],["result",4]]],[10,"deserialize_ignored_any","","Hint that the `Deserialize` type needs to deserialize a…",5,[[],["result",4]]],[11,"is_human_readable","","Determine whether `Deserialize` implementations should…",5,[[]]],[8,"Visitor","","This trait represents a visitor that walks through a…",null,null],[16,"Value","","The value produced by this visitor.",6,null],[10,"expecting","","Format a message stating what data this Visitor expects to…",6,[[["formatter",3]],[["error",3],["result",4]]]],[11,"visit_bool","","The input contains a boolean.",6,[[],["result",4]]],[11,"visit_i8","","The input contains an `i8`.",6,[[],["result",4]]],[11,"visit_i16","","The input contains an `i16`.",6,[[],["result",4]]],[11,"visit_i32","","The input contains an `i32`.",6,[[],["result",4]]],[11,"visit_i64","","The input contains an `i64`.",6,[[],["result",4]]],[11,"visit_i128","","The input contains a `i128`.",6,[[],["result",4]]],[11,"visit_u8","","The input contains a `u8`.",6,[[],["result",4]]],[11,"visit_u16","","The input contains a `u16`.",6,[[],["result",4]]],[11,"visit_u32","","The input contains a `u32`.",6,[[],["result",4]]],[11,"visit_u64","","The input contains a `u64`.",6,[[],["result",4]]],[11,"visit_u128","","The input contains a `u128`.",6,[[],["result",4]]],[11,"visit_f32","","The input contains an `f32`.",6,[[],["result",4]]],[11,"visit_f64","","The input contains an `f64`.",6,[[],["result",4]]],[11,"visit_char","","The input contains a `char`.",6,[[],["result",4]]],[11,"visit_str","","The input contains a string. The lifetime of the string is…",6,[[],["result",4]]],[11,"visit_borrowed_str","","The input contains a string that lives at least as long as…",6,[[],["result",4]]],[11,"visit_string","","The input contains a string and ownership of the string is…",6,[[["string",3]],["result",4]]],[11,"visit_bytes","","The input contains a byte array. The lifetime of the byte…",6,[[],["result",4]]],[11,"visit_borrowed_bytes","","The input contains a byte array that lives at least as…",6,[[],["result",4]]],[11,"visit_byte_buf","","The input contains a byte array and ownership of the byte…",6,[[["vec",3]],["result",4]]],[11,"visit_none","","The input contains an optional that is absent.",6,[[],["result",4]]],[11,"visit_some","","The input contains an optional that is present.",6,[[],["result",4]]],[11,"visit_unit","","The input contains a unit `()`.",6,[[],["result",4]]],[11,"visit_newtype_struct","","The input contains a newtype struct.",6,[[],["result",4]]],[11,"visit_seq","","The input contains a sequence of elements.",6,[[],["result",4]]],[11,"visit_map","","The input contains a key-value map.",6,[[],["result",4]]],[11,"visit_enum","","The input contains an enum.",6,[[],["result",4]]],[8,"SeqAccess","","Provides a `Visitor` access to each element of a sequence…",null,null],[16,"Error","","The error type that can be returned if some error occurs…",7,null],[10,"next_element_seed","","This returns `Ok(Some(value))` for the next value in the…",7,[[],[["option",4],["result",4]]]],[11,"next_element","","This returns `Ok(Some(value))` for the next value in the…",7,[[],[["result",4],["option",4]]]],[11,"size_hint","","Returns the number of elements remaining in the sequence,…",7,[[],["option",4]]],[8,"MapAccess","","Provides a `Visitor` access to each entry of a map in the…",null,null],[16,"Error","","The error type that can be returned if some error occurs…",8,null],[10,"next_key_seed","","This returns `Ok(Some(key))` for the next key in the map,…",8,[[],[["result",4],["option",4]]]],[10,"next_value_seed","","This returns a `Ok(value)` for the next value in the map.",8,[[],["result",4]]],[11,"next_entry_seed","","This returns `Ok(Some((key, value)))` for the next…",8,[[],[["result",4],["option",4]]]],[11,"next_key","","This returns `Ok(Some(key))` for the next key in the map,…",8,[[],[["option",4],["result",4]]]],[11,"next_value","","This returns a `Ok(value)` for the next value in the map.",8,[[],["result",4]]],[11,"next_entry","","This returns `Ok(Some((key, value)))` for the next…",8,[[],[["option",4],["result",4]]]],[11,"size_hint","","Returns the number of entries remaining in the map, if…",8,[[],["option",4]]],[8,"EnumAccess","","Provides a `Visitor` access to the data of an enum in the…",null,null],[16,"Error","","The error type that can be returned if some error occurs…",9,null],[16,"Variant","","The `Visitor` that will be used to deserialize the content…",9,null],[10,"variant_seed","","`variant` is called to identify which variant to…",9,[[],["result",4]]],[11,"variant","","`variant` is called to identify which variant to…",9,[[],["result",4]]],[8,"VariantAccess","","`VariantAccess` is a visitor that is created by the…",null,null],[16,"Error","","The error type that can be returned if some error occurs…",10,null],[10,"unit_variant","","Called when deserializing a variant with no values.",10,[[],["result",4]]],[10,"newtype_variant_seed","","Called when deserializing a variant with a single value.",10,[[],["result",4]]],[11,"newtype_variant","","Called when deserializing a variant with a single value.",10,[[],["result",4]]],[10,"tuple_variant","","Called when deserializing a tuple-like variant.",10,[[],["result",4]]],[10,"struct_variant","","Called when deserializing a struct-like variant.",10,[[],["result",4]]],[8,"IntoDeserializer","","Converts an existing value into a `Deserializer` from…",null,null],[16,"Deserializer","","The type of the deserializer being converted into.",11,null],[10,"into_deserializer","","Convert this value into a deserializer.",11,[[]]],[3,"IgnoredAny","","An efficient way of discarding data from a deserializer.",null,null],[8,"StdError","","`Error` is a trait representing the basic expectations for…",null,null],[11,"source","","The lower-level source of this error, if any.",12,[[],[["option",4],["error",8]]]],[11,"backtrace","","Returns a stack backtrace, if available, of where this…",12,[[],[["backtrace",3],["option",4]]]],[11,"description","","",12,[[]]],[11,"cause","","",12,[[],[["error",8],["option",4]]]],[0,"ser","forest_encoding","Generic data structure serialization framework.",null,null],[8,"Error","forest_encoding::ser","Trait used by `Serialize` implementations to generically…",null,null],[10,"custom","","Used when a `Serialize` implementation encounters any…",13,[[]]],[8,"Serialize","","A data structure that can be serialized into any data…",null,null],[10,"serialize","","Serialize this value into the given Serde serializer.",14,[[],["result",4]]],[8,"Serializer","","A data format that can serialize any data structure…",null,null],[16,"Ok","","The output type produced by this `Serializer` during…",15,null],[16,"Error","","The error type when some error occurs during serialization.",15,null],[16,"SerializeSeq","","Type returned from `serialize_seq` for serializing the…",15,null],[16,"SerializeTuple","","Type returned from `serialize_tuple` for serializing the…",15,null],[16,"SerializeTupleStruct","","Type returned from `serialize_tuple_struct` for…",15,null],[16,"SerializeTupleVariant","","Type returned from `serialize_tuple_variant` for…",15,null],[16,"SerializeMap","","Type returned from `serialize_map` for serializing the…",15,null],[16,"SerializeStruct","","Type returned from `serialize_struct` for serializing the…",15,null],[16,"SerializeStructVariant","","Type returned from `serialize_struct_variant` for…",15,null],[10,"serialize_bool","","Serialize a `bool` value.",15,[[],["result",4]]],[10,"serialize_i8","","Serialize an `i8` value.",15,[[],["result",4]]],[10,"serialize_i16","","Serialize an `i16` value.",15,[[],["result",4]]],[10,"serialize_i32","","Serialize an `i32` value.",15,[[],["result",4]]],[10,"serialize_i64","","Serialize an `i64` value.",15,[[],["result",4]]],[11,"serialize_i128","","Serialize an `i128` value.",15,[[],["result",4]]],[10,"serialize_u8","","Serialize a `u8` value.",15,[[],["result",4]]],[10,"serialize_u16","","Serialize a `u16` value.",15,[[],["result",4]]],[10,"serialize_u32","","Serialize a `u32` value.",15,[[],["result",4]]],[10,"serialize_u64","","Serialize a `u64` value.",15,[[],["result",4]]],[11,"serialize_u128","","Serialize a `u128` value.",15,[[],["result",4]]],[10,"serialize_f32","","Serialize an `f32` value.",15,[[],["result",4]]],[10,"serialize_f64","","Serialize an `f64` value.",15,[[],["result",4]]],[10,"serialize_char","","Serialize a character.",15,[[],["result",4]]],[10,"serialize_str","","Serialize a `&str`.",15,[[],["result",4]]],[10,"serialize_bytes","","Serialize a chunk of raw byte data.",15,[[],["result",4]]],[10,"serialize_none","","Serialize a `None` value.",15,[[],["result",4]]],[10,"serialize_some","","Serialize a `Some(T)` value.",15,[[],["result",4]]],[10,"serialize_unit","","Serialize a `()` value.",15,[[],["result",4]]],[10,"serialize_unit_struct","","Serialize a unit struct like `struct Unit` or…",15,[[],["result",4]]],[10,"serialize_unit_variant","","Serialize a unit variant like `E::A` in `enum E { A, B }`.",15,[[],["result",4]]],[10,"serialize_newtype_struct","","Serialize a newtype struct like `struct Millimeters(u8)`.",15,[[],["result",4]]],[10,"serialize_newtype_variant","","Serialize a newtype variant like `E::N` in `enum E { N(u8)…",15,[[],["result",4]]],[10,"serialize_seq","","Begin to serialize a variably sized sequence. This call…",15,[[["option",4]],["result",4]]],[10,"serialize_tuple","","Begin to serialize a statically sized sequence whose…",15,[[],["result",4]]],[10,"serialize_tuple_struct","","Begin to serialize a tuple struct like `struct Rgb(u8, u8,…",15,[[],["result",4]]],[10,"serialize_tuple_variant","","Begin to serialize a tuple variant like `E::T` in `enum E…",15,[[],["result",4]]],[10,"serialize_map","","Begin to serialize a map. This call must be followed by…",15,[[["option",4]],["result",4]]],[10,"serialize_struct","","Begin to serialize a struct like `struct Rgb { r: u8, g:…",15,[[],["result",4]]],[10,"serialize_struct_variant","","Begin to serialize a struct variant like `E::S` in `enum E…",15,[[],["result",4]]],[11,"collect_seq","","Collect an iterator as a sequence.",15,[[],["result",4]]],[11,"collect_map","","Collect an iterator as a map.",15,[[],["result",4]]],[11,"collect_str","","Serialize a string produced by an implementation of…",15,[[],["result",4]]],[11,"is_human_readable","","Determine whether `Serialize` implementations should…",15,[[]]],[8,"SerializeSeq","","Returned from `Serializer::serialize_seq`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",16,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",16,null],[10,"serialize_element","","Serialize a sequence element.",16,[[],["result",4]]],[10,"end","","Finish serializing a sequence.",16,[[],["result",4]]],[8,"SerializeTuple","","Returned from `Serializer::serialize_tuple`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",17,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",17,null],[10,"serialize_element","","Serialize a tuple element.",17,[[],["result",4]]],[10,"end","","Finish serializing a tuple.",17,[[],["result",4]]],[8,"SerializeTupleStruct","","Returned from `Serializer::serialize_tuple_struct`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",18,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",18,null],[10,"serialize_field","","Serialize a tuple struct field.",18,[[],["result",4]]],[10,"end","","Finish serializing a tuple struct.",18,[[],["result",4]]],[8,"SerializeTupleVariant","","Returned from `Serializer::serialize_tuple_variant`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",19,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",19,null],[10,"serialize_field","","Serialize a tuple variant field.",19,[[],["result",4]]],[10,"end","","Finish serializing a tuple variant.",19,[[],["result",4]]],[8,"SerializeMap","","Returned from `Serializer::serialize_map`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",20,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",20,null],[10,"serialize_key","","Serialize a map key.",20,[[],["result",4]]],[10,"serialize_value","","Serialize a map value.",20,[[],["result",4]]],[11,"serialize_entry","","Serialize a map entry consisting of a key and a value.",20,[[],["result",4]]],[10,"end","","Finish serializing a map.",20,[[],["result",4]]],[8,"SerializeStruct","","Returned from `Serializer::serialize_struct`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",21,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",21,null],[10,"serialize_field","","Serialize a struct field.",21,[[],["result",4]]],[11,"skip_field","","Indicate that a struct field has been skipped.",21,[[],["result",4]]],[10,"end","","Finish serializing a struct.",21,[[],["result",4]]],[8,"SerializeStructVariant","","Returned from `Serializer::serialize_struct_variant`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",22,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",22,null],[10,"serialize_field","","Serialize a struct variant field.",22,[[],["result",4]]],[11,"skip_field","","Indicate that a struct variant field has been skipped.",22,[[],["result",4]]],[10,"end","","Finish serializing a struct variant.",22,[[],["result",4]]],[3,"Impossible","","Helper type for implementing a `Serializer` that does not…",null,null],[8,"StdError","","`Error` is a trait representing the basic expectations for…",null,null],[11,"source","","The lower-level source of this error, if any.",12,[[],[["option",4],["error",8]]]],[11,"backtrace","","Returns a stack backtrace, if available, of where this…",12,[[],[["backtrace",3],["option",4]]]],[11,"description","","",12,[[]]],[11,"cause","","",12,[[],[["error",8],["option",4]]]],[0,"error","forest_encoding","When serializing or deserializing CBOR goes wrong.",null,null],[3,"Error","forest_encoding::error","This type represents all possible errors that can occur…",null,null],[6,"Result","","Alias for a `Result` with the error type…",null,null],[4,"Category","","Categorizes the cause of a `serde_cbor::Error`.",null,null],[13,"Io","","The error was caused by a failure to read or write bytes…",23,null],[13,"Syntax","","The error was caused by input that was not syntactically…",23,null],[13,"Data","","The error was caused by input data that was semantically…",23,null],[13,"Eof","","The error was caused by prematurely reaching the end of…",23,null],[5,"from_reader","forest_encoding","Decodes a value from CBOR data in a reader.",null,[[],[["result",4],["error",3]]]],[5,"from_slice","","Decodes a value from CBOR data in a slice.",null,[[],[["result",4],["error",3]]]],[0,"tags","","Support for cbor tags",null,null],[3,"Tagged","forest_encoding::tags","A value that is optionally tagged with a cbor tag",null,null],[12,"tag","","cbor tag",24,null],[12,"value","","value",24,null],[5,"current_cbor_tag","","function to get the current cbor tag",null,[[],["option",4]]],[5,"to_vec","forest_encoding","Serializes a value to a vector.",null,[[],[["vec",3],["error",3],["result",4]]]],[5,"to_writer","","Serializes a value to a writer.",null,[[],[["result",4],["error",3]]]],[0,"value","","CBOR values, keys and serialization routines.",null,null],[4,"Value","forest_encoding::value","The `Value` enum, a loosely typed way of representing any…",null,null],[13,"Null","","Represents the absence of a value or the value undefined.",25,null],[13,"Bool","","Represents a boolean value.",25,null],[13,"Integer","","Integer CBOR numbers.",25,null],[13,"Float","","Represents a floating point value.",25,null],[13,"Bytes","","Represents a byte string.",25,null],[13,"Text","","Represents an UTF-8 encoded string.",25,null],[13,"Array","","Represents an array of values.",25,null],[13,"Map","","Represents a map.",25,null],[13,"Tag","","Represents a tagged value",25,null],[5,"from_value","","Convert a `serde_cbor::Value` into a type `T`",null,[[["value",4]],[["result",4],["error",3]]]],[5,"to_value","","Convert a `T` into `serde_cbor::Value` which is an enum…",null,[[],[["result",4],["error",3],["value",4]]]],[3,"BytesSer","forest_encoding","Wrapper for serializing slice of bytes.",null,null],[12,"0","","",26,null],[3,"BytesDe","","Wrapper for deserializing dynamic sized Bytes.",null,null],[12,"0","","",27,null],[3,"Byte32De","","Wrapper for deserializing array of 32 Bytes.",null,null],[12,"0","","",28,null],[3,"Error","","Error type for encoding and decoding data through any…",null,null],[12,"description","","",29,null],[12,"protocol","","",29,null],[4,"CodecProtocol","","CodecProtocol defines the protocol in which the data is…",null,null],[13,"Cbor","","",30,null],[5,"blake2b_variable","","Generates blake2b hash with provided size.",null,[[],["vec",3]]],[5,"blake2b_256","","Generates blake2b hash of fixed 32 bytes size.",null,[[]]],[0,"tuple","","",null,null],[24,"Deserialize_tuple","forest_encoding::tuple","",null,null],[24,"Serialize_tuple","","",null,null],[0,"repr","forest_encoding","",null,null],[24,"Deserialize_repr","forest_encoding::repr","",null,null],[24,"Serialize_repr","","",null,null],[8,"Cbor","forest_encoding","Cbor utility functions for serializable objects",null,null],[11,"marshal_cbor","","Marshalls cbor encodable object into cbor bytes",31,[[],[["result",4],["vec",3],["error",3]]]],[11,"unmarshal_cbor","","Unmarshals cbor encoded bytes to object",31,[[],[["result",4],["error",3]]]],[11,"cid","","Returns the content identifier of the raw block of data…",31,[[],[["cid",3],["error",3],["result",4]]]],[11,"from","forest_encoding::de::value","",32,[[]]],[11,"into","","",32,[[]]],[11,"to_owned","","",32,[[]]],[11,"clone_into","","",32,[[]]],[11,"to_string","","",32,[[],["string",3]]],[11,"borrow","","",32,[[]]],[11,"borrow_mut","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"try_into","","",32,[[],["result",4]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"from","","",33,[[]]],[11,"into","","",33,[[]]],[11,"to_owned","","",33,[[]]],[11,"clone_into","","",33,[[]]],[11,"borrow","","",33,[[]]],[11,"borrow_mut","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"try_into","","",33,[[],["result",4]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"from","","",34,[[]]],[11,"into","","",34,[[]]],[11,"to_owned","","",34,[[]]],[11,"clone_into","","",34,[[]]],[11,"borrow","","",34,[[]]],[11,"borrow_mut","","",34,[[]]],[11,"try_from","","",34,[[],["result",4]]],[11,"try_into","","",34,[[],["result",4]]],[11,"type_id","","",34,[[],["typeid",3]]],[11,"from","","",35,[[]]],[11,"into","","",35,[[]]],[11,"to_owned","","",35,[[]]],[11,"clone_into","","",35,[[]]],[11,"borrow","","",35,[[]]],[11,"borrow_mut","","",35,[[]]],[11,"try_from","","",35,[[],["result",4]]],[11,"try_into","","",35,[[],["result",4]]],[11,"type_id","","",35,[[],["typeid",3]]],[11,"from","","",36,[[]]],[11,"into","","",36,[[]]],[11,"to_owned","","",36,[[]]],[11,"clone_into","","",36,[[]]],[11,"borrow","","",36,[[]]],[11,"borrow_mut","","",36,[[]]],[11,"try_from","","",36,[[],["result",4]]],[11,"try_into","","",36,[[],["result",4]]],[11,"type_id","","",36,[[],["typeid",3]]],[11,"from","","",37,[[]]],[11,"into","","",37,[[]]],[11,"to_owned","","",37,[[]]],[11,"clone_into","","",37,[[]]],[11,"borrow","","",37,[[]]],[11,"borrow_mut","","",37,[[]]],[11,"try_from","","",37,[[],["result",4]]],[11,"try_into","","",37,[[],["result",4]]],[11,"type_id","","",37,[[],["typeid",3]]],[11,"from","","",38,[[]]],[11,"into","","",38,[[]]],[11,"to_owned","","",38,[[]]],[11,"clone_into","","",38,[[]]],[11,"borrow","","",38,[[]]],[11,"borrow_mut","","",38,[[]]],[11,"try_from","","",38,[[],["result",4]]],[11,"try_into","","",38,[[],["result",4]]],[11,"type_id","","",38,[[],["typeid",3]]],[11,"from","","",39,[[]]],[11,"into","","",39,[[]]],[11,"to_owned","","",39,[[]]],[11,"clone_into","","",39,[[]]],[11,"borrow","","",39,[[]]],[11,"borrow_mut","","",39,[[]]],[11,"try_from","","",39,[[],["result",4]]],[11,"try_into","","",39,[[],["result",4]]],[11,"type_id","","",39,[[],["typeid",3]]],[11,"from","","",40,[[]]],[11,"into","","",40,[[]]],[11,"to_owned","","",40,[[]]],[11,"clone_into","","",40,[[]]],[11,"borrow","","",40,[[]]],[11,"borrow_mut","","",40,[[]]],[11,"try_from","","",40,[[],["result",4]]],[11,"try_into","","",40,[[],["result",4]]],[11,"type_id","","",40,[[],["typeid",3]]],[11,"from","","",41,[[]]],[11,"into","","",41,[[]]],[11,"to_owned","","",41,[[]]],[11,"clone_into","","",41,[[]]],[11,"borrow","","",41,[[]]],[11,"borrow_mut","","",41,[[]]],[11,"try_from","","",41,[[],["result",4]]],[11,"try_into","","",41,[[],["result",4]]],[11,"type_id","","",41,[[],["typeid",3]]],[11,"from","","",42,[[]]],[11,"into","","",42,[[]]],[11,"to_owned","","",42,[[]]],[11,"clone_into","","",42,[[]]],[11,"borrow","","",42,[[]]],[11,"borrow_mut","","",42,[[]]],[11,"try_from","","",42,[[],["result",4]]],[11,"try_into","","",42,[[],["result",4]]],[11,"type_id","","",42,[[],["typeid",3]]],[11,"from","","",43,[[]]],[11,"into","","",43,[[]]],[11,"to_owned","","",43,[[]]],[11,"clone_into","","",43,[[]]],[11,"borrow","","",43,[[]]],[11,"borrow_mut","","",43,[[]]],[11,"try_from","","",43,[[],["result",4]]],[11,"try_into","","",43,[[],["result",4]]],[11,"type_id","","",43,[[],["typeid",3]]],[11,"from","","",44,[[]]],[11,"into","","",44,[[]]],[11,"to_owned","","",44,[[]]],[11,"clone_into","","",44,[[]]],[11,"borrow","","",44,[[]]],[11,"borrow_mut","","",44,[[]]],[11,"try_from","","",44,[[],["result",4]]],[11,"try_into","","",44,[[],["result",4]]],[11,"type_id","","",44,[[],["typeid",3]]],[11,"from","","",45,[[]]],[11,"into","","",45,[[]]],[11,"to_owned","","",45,[[]]],[11,"clone_into","","",45,[[]]],[11,"borrow","","",45,[[]]],[11,"borrow_mut","","",45,[[]]],[11,"try_from","","",45,[[],["result",4]]],[11,"try_into","","",45,[[],["result",4]]],[11,"type_id","","",45,[[],["typeid",3]]],[11,"from","","",46,[[]]],[11,"into","","",46,[[]]],[11,"to_owned","","",46,[[]]],[11,"clone_into","","",46,[[]]],[11,"borrow","","",46,[[]]],[11,"borrow_mut","","",46,[[]]],[11,"try_from","","",46,[[],["result",4]]],[11,"try_into","","",46,[[],["result",4]]],[11,"type_id","","",46,[[],["typeid",3]]],[11,"from","","",47,[[]]],[11,"into","","",47,[[]]],[11,"to_owned","","",47,[[]]],[11,"clone_into","","",47,[[]]],[11,"borrow","","",47,[[]]],[11,"borrow_mut","","",47,[[]]],[11,"try_from","","",47,[[],["result",4]]],[11,"try_into","","",47,[[],["result",4]]],[11,"type_id","","",47,[[],["typeid",3]]],[11,"from","","",48,[[]]],[11,"into","","",48,[[]]],[11,"to_owned","","",48,[[]]],[11,"clone_into","","",48,[[]]],[11,"borrow","","",48,[[]]],[11,"borrow_mut","","",48,[[]]],[11,"try_from","","",48,[[],["result",4]]],[11,"try_into","","",48,[[],["result",4]]],[11,"type_id","","",48,[[],["typeid",3]]],[11,"from","","",49,[[]]],[11,"into","","",49,[[]]],[11,"to_owned","","",49,[[]]],[11,"clone_into","","",49,[[]]],[11,"borrow","","",49,[[]]],[11,"borrow_mut","","",49,[[]]],[11,"try_from","","",49,[[],["result",4]]],[11,"try_into","","",49,[[],["result",4]]],[11,"type_id","","",49,[[],["typeid",3]]],[11,"from","","",50,[[]]],[11,"into","","",50,[[]]],[11,"to_owned","","",50,[[]]],[11,"clone_into","","",50,[[]]],[11,"borrow","","",50,[[]]],[11,"borrow_mut","","",50,[[]]],[11,"try_from","","",50,[[],["result",4]]],[11,"try_into","","",50,[[],["result",4]]],[11,"type_id","","",50,[[],["typeid",3]]],[11,"from","","",51,[[]]],[11,"into","","",51,[[]]],[11,"to_owned","","",51,[[]]],[11,"clone_into","","",51,[[]]],[11,"borrow","","",51,[[]]],[11,"borrow_mut","","",51,[[]]],[11,"try_from","","",51,[[],["result",4]]],[11,"try_into","","",51,[[],["result",4]]],[11,"type_id","","",51,[[],["typeid",3]]],[11,"from","","",52,[[]]],[11,"into","","",52,[[]]],[11,"to_owned","","",52,[[]]],[11,"clone_into","","",52,[[]]],[11,"borrow","","",52,[[]]],[11,"borrow_mut","","",52,[[]]],[11,"try_from","","",52,[[],["result",4]]],[11,"try_into","","",52,[[],["result",4]]],[11,"type_id","","",52,[[],["typeid",3]]],[11,"from","","",53,[[]]],[11,"into","","",53,[[]]],[11,"to_owned","","",53,[[]]],[11,"clone_into","","",53,[[]]],[11,"borrow","","",53,[[]]],[11,"borrow_mut","","",53,[[]]],[11,"try_from","","",53,[[],["result",4]]],[11,"try_into","","",53,[[],["result",4]]],[11,"type_id","","",53,[[],["typeid",3]]],[11,"from","","",54,[[]]],[11,"into","","",54,[[]]],[11,"to_owned","","",54,[[]]],[11,"clone_into","","",54,[[]]],[11,"borrow","","",54,[[]]],[11,"borrow_mut","","",54,[[]]],[11,"try_from","","",54,[[],["result",4]]],[11,"try_into","","",54,[[],["result",4]]],[11,"type_id","","",54,[[],["typeid",3]]],[11,"from","","",55,[[]]],[11,"into","","",55,[[]]],[11,"to_owned","","",55,[[]]],[11,"clone_into","","",55,[[]]],[11,"borrow","","",55,[[]]],[11,"borrow_mut","","",55,[[]]],[11,"try_from","","",55,[[],["result",4]]],[11,"try_into","","",55,[[],["result",4]]],[11,"type_id","","",55,[[],["typeid",3]]],[11,"from","","",56,[[]]],[11,"into","","",56,[[]]],[11,"to_owned","","",56,[[]]],[11,"clone_into","","",56,[[]]],[11,"borrow","","",56,[[]]],[11,"borrow_mut","","",56,[[]]],[11,"try_from","","",56,[[],["result",4]]],[11,"try_into","","",56,[[],["result",4]]],[11,"type_id","","",56,[[],["typeid",3]]],[11,"from","","",57,[[]]],[11,"into","","",57,[[]]],[11,"to_owned","","",57,[[]]],[11,"clone_into","","",57,[[]]],[11,"borrow","","",57,[[]]],[11,"borrow_mut","","",57,[[]]],[11,"try_from","","",57,[[],["result",4]]],[11,"try_into","","",57,[[],["result",4]]],[11,"type_id","","",57,[[],["typeid",3]]],[11,"from","","",58,[[]]],[11,"into","","",58,[[]]],[11,"to_owned","","",58,[[]]],[11,"clone_into","","",58,[[]]],[11,"borrow","","",58,[[]]],[11,"borrow_mut","","",58,[[]]],[11,"try_from","","",58,[[],["result",4]]],[11,"try_into","","",58,[[],["result",4]]],[11,"type_id","","",58,[[],["typeid",3]]],[11,"from","forest_encoding::de","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"to_string","","",1,[[],["string",3]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",59,[[]]],[11,"into","","",59,[[]]],[11,"to_owned","","",59,[[]]],[11,"clone_into","","",59,[[]]],[11,"borrow","","",59,[[]]],[11,"borrow_mut","","",59,[[]]],[11,"try_from","","",59,[[],["result",4]]],[11,"try_into","","",59,[[],["result",4]]],[11,"type_id","","",59,[[],["typeid",3]]],[11,"fmt","","",59,[[["formatter",3]],[["error",3],["result",4]]]],[11,"from","forest_encoding::ser","",60,[[]]],[11,"into","","",60,[[]]],[11,"borrow","","",60,[[]]],[11,"borrow_mut","","",60,[[]]],[11,"try_from","","",60,[[],["result",4]]],[11,"try_into","","",60,[[],["result",4]]],[11,"type_id","","",60,[[],["typeid",3]]],[11,"from","forest_encoding::error","",61,[[]]],[11,"into","","",61,[[]]],[11,"to_string","","",61,[[],["string",3]]],[11,"borrow","","",61,[[]]],[11,"borrow_mut","","",61,[[]]],[11,"try_from","","",61,[[],["result",4]]],[11,"try_into","","",61,[[],["result",4]]],[11,"type_id","","",61,[[],["typeid",3]]],[11,"from","","",23,[[]]],[11,"into","","",23,[[]]],[11,"to_owned","","",23,[[]]],[11,"clone_into","","",23,[[]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"from","forest_encoding::tags","",24,[[]]],[11,"into","","",24,[[]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"from","forest_encoding::value","",25,[[]]],[11,"into","","",25,[[]]],[11,"to_owned","","",25,[[]]],[11,"clone_into","","",25,[[]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"from","forest_encoding","",26,[[]]],[11,"into","","",26,[[]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"from","","",27,[[]]],[11,"into","","",27,[[]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"from","","",28,[[]]],[11,"into","","",28,[[]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"from","","",29,[[]]],[11,"into","","",29,[[]]],[11,"to_string","","",29,[[],["string",3]]],[11,"borrow","","",29,[[]]],[11,"borrow_mut","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"try_into","","",29,[[],["result",4]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"from","","",30,[[]]],[11,"into","","",30,[[]]],[11,"to_string","","",30,[[],["string",3]]],[11,"borrow","","",30,[[]]],[11,"borrow_mut","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"try_into","","",30,[[],["result",4]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"serialize_field","forest_encoding::ser","",60,[[],["result",4]]],[11,"end","","",60,[[],["result",4]]],[11,"eq","forest_encoding::de","",1,[[["unexpected",4]]]],[11,"ne","","",1,[[["unexpected",4]]]],[11,"eq","forest_encoding::de::value","",32,[[["error",3]]]],[11,"ne","","",32,[[["error",3]]]],[11,"next_key_seed","","",57,[[],[["option",4],["result",4]]]],[11,"next_value_seed","","",57,[[],["result",4]]],[11,"next_entry_seed","","",57,[[],[["result",4],["option",4]]]],[11,"size_hint","","",57,[[],["option",4]]],[11,"clone","","",39,[[],["isizedeserializer",3]]],[11,"clone","","",42,[[],["u64deserializer",3]]],[11,"clone","","",51,[[],["borrowedstrdeserializer",3]]],[11,"clone","","",54,[[],["borrowedbytesdeserializer",3]]],[11,"clone","","",34,[[],["booldeserializer",3]]],[11,"clone","","",50,[[],["strdeserializer",3]]],[11,"clone","","",37,[[],["i32deserializer",3]]],[11,"clone","","",45,[[],["f64deserializer",3]]],[11,"clone","","",44,[[],["f32deserializer",3]]],[11,"clone","","",55,[[],["seqdeserializer",3]]],[11,"clone","forest_encoding::de","",1,[[],["unexpected",4]]],[11,"clone","forest_encoding::de::value","",35,[[],["i8deserializer",3]]],[11,"clone","","",58,[[],["mapaccessdeserializer",3]]],[11,"clone","","",38,[[],["i64deserializer",3]]],[11,"clone","forest_encoding::de","",59,[[],["ignoredany",3]]],[11,"clone","forest_encoding::de::value","",52,[[],["stringdeserializer",3]]],[11,"clone","","",41,[[],["u16deserializer",3]]],[11,"clone","","",46,[[],["chardeserializer",3]]],[11,"clone","","",36,[[],["i16deserializer",3]]],[11,"clone","","",40,[[],["u8deserializer",3]]],[11,"clone","","",53,[[],["cowstrdeserializer",3]]],[11,"clone","","",33,[[],["unitdeserializer",3]]],[11,"clone","","",32,[[],["error",3]]],[11,"clone","","",49,[[],["u32deserializer",3]]],[11,"clone","","",43,[[],["usizedeserializer",3]]],[11,"clone","","",57,[[],["mapdeserializer",3]]],[11,"clone","","",48,[[],["u128deserializer",3]]],[11,"clone","","",47,[[],["i128deserializer",3]]],[11,"clone","","",56,[[],["seqaccessdeserializer",3]]],[11,"serialize_field","forest_encoding::ser","",60,[[],["result",4]]],[11,"end","","",60,[[],["result",4]]],[11,"next_element_seed","forest_encoding::de::value","",57,[[],[["option",4],["result",4]]]],[11,"size_hint","","",57,[[],["option",4]]],[11,"next_element_seed","","",55,[[],[["result",4],["option",4]]]],[11,"size_hint","","",55,[[],["option",4]]],[11,"deserialize","forest_encoding::de","",59,[[],[["ignoredany",3],["result",4]]]],[11,"serialize_key","forest_encoding::ser","",60,[[],["result",4]]],[11,"serialize_value","","",60,[[],["result",4]]],[11,"end","","",60,[[],["result",4]]],[11,"fmt","forest_encoding::de::value","",54,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",49,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",43,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",37,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",32,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",39,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",42,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",51,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",53,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",33,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",57,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",52,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",35,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",44,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",34,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",58,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",55,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",56,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","forest_encoding::de","",59,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","forest_encoding::de::value","",47,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",40,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",38,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","forest_encoding::de","",1,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","forest_encoding::de::value","",36,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",45,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",50,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",48,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",46,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",41,[[["formatter",3]],[["error",3],["result",4]]]],[11,"serialize_field","forest_encoding::ser","",60,[[],["result",4]]],[11,"end","","",60,[[],["result",4]]],[11,"serialize_field","","",60,[[],["result",4]]],[11,"end","","",60,[[],["result",4]]],[11,"default","forest_encoding::de","",59,[[],["ignoredany",3]]],[11,"serialize_element","forest_encoding::ser","",60,[[],["result",4]]],[11,"end","","",60,[[],["result",4]]],[11,"serialize_element","","",60,[[],["result",4]]],[11,"end","","",60,[[],["result",4]]],[11,"deserialize_any","forest_encoding::de::value","",56,[[],["result",4]]],[11,"deserialize_bool","","",56,[[],["result",4]]],[11,"deserialize_i8","","",56,[[],["result",4]]],[11,"deserialize_i16","","",56,[[],["result",4]]],[11,"deserialize_i32","","",56,[[],["result",4]]],[11,"deserialize_i64","","",56,[[],["result",4]]],[11,"deserialize_i128","","",56,[[],["result",4]]],[11,"deserialize_u8","","",56,[[],["result",4]]],[11,"deserialize_u16","","",56,[[],["result",4]]],[11,"deserialize_u32","","",56,[[],["result",4]]],[11,"deserialize_u64","","",56,[[],["result",4]]],[11,"deserialize_u128","","",56,[[],["result",4]]],[11,"deserialize_f32","","",56,[[],["result",4]]],[11,"deserialize_f64","","",56,[[],["result",4]]],[11,"deserialize_char","","",56,[[],["result",4]]],[11,"deserialize_str","","",56,[[],["result",4]]],[11,"deserialize_string","","",56,[[],["result",4]]],[11,"deserialize_bytes","","",56,[[],["result",4]]],[11,"deserialize_byte_buf","","",56,[[],["result",4]]],[11,"deserialize_option","","",56,[[],["result",4]]],[11,"deserialize_unit","","",56,[[],["result",4]]],[11,"deserialize_unit_struct","","",56,[[],["result",4]]],[11,"deserialize_newtype_struct","","",56,[[],["result",4]]],[11,"deserialize_seq","","",56,[[],["result",4]]],[11,"deserialize_tuple","","",56,[[],["result",4]]],[11,"deserialize_tuple_struct","","",56,[[],["result",4]]],[11,"deserialize_map","","",56,[[],["result",4]]],[11,"deserialize_struct","","",56,[[],["result",4]]],[11,"deserialize_enum","","",56,[[],["result",4]]],[11,"deserialize_identifier","","",56,[[],["result",4]]],[11,"deserialize_ignored_any","","",56,[[],["result",4]]],[11,"deserialize_bool","","",42,[[],["result",4]]],[11,"deserialize_i8","","",42,[[],["result",4]]],[11,"deserialize_i16","","",42,[[],["result",4]]],[11,"deserialize_i32","","",42,[[],["result",4]]],[11,"deserialize_i64","","",42,[[],["result",4]]],[11,"deserialize_i128","","",42,[[],["result",4]]],[11,"deserialize_u8","","",42,[[],["result",4]]],[11,"deserialize_u16","","",42,[[],["result",4]]],[11,"deserialize_u32","","",42,[[],["result",4]]],[11,"deserialize_u64","","",42,[[],["result",4]]],[11,"deserialize_u128","","",42,[[],["result",4]]],[11,"deserialize_f32","","",42,[[],["result",4]]],[11,"deserialize_f64","","",42,[[],["result",4]]],[11,"deserialize_char","","",42,[[],["result",4]]],[11,"deserialize_str","","",42,[[],["result",4]]],[11,"deserialize_string","","",42,[[],["result",4]]],[11,"deserialize_bytes","","",42,[[],["result",4]]],[11,"deserialize_byte_buf","","",42,[[],["result",4]]],[11,"deserialize_option","","",42,[[],["result",4]]],[11,"deserialize_unit","","",42,[[],["result",4]]],[11,"deserialize_unit_struct","","",42,[[],["result",4]]],[11,"deserialize_newtype_struct","","",42,[[],["result",4]]],[11,"deserialize_seq","","",42,[[],["result",4]]],[11,"deserialize_tuple","","",42,[[],["result",4]]],[11,"deserialize_tuple_struct","","",42,[[],["result",4]]],[11,"deserialize_map","","",42,[[],["result",4]]],[11,"deserialize_struct","","",42,[[],["result",4]]],[11,"deserialize_enum","","",42,[[],["result",4]]],[11,"deserialize_identifier","","",42,[[],["result",4]]],[11,"deserialize_ignored_any","","",42,[[],["result",4]]],[11,"deserialize_any","","",42,[[],["result",4]]],[11,"deserialize_bool","","",37,[[],["result",4]]],[11,"deserialize_i8","","",37,[[],["result",4]]],[11,"deserialize_i16","","",37,[[],["result",4]]],[11,"deserialize_i32","","",37,[[],["result",4]]],[11,"deserialize_i64","","",37,[[],["result",4]]],[11,"deserialize_i128","","",37,[[],["result",4]]],[11,"deserialize_u8","","",37,[[],["result",4]]],[11,"deserialize_u16","","",37,[[],["result",4]]],[11,"deserialize_u32","","",37,[[],["result",4]]],[11,"deserialize_u64","","",37,[[],["result",4]]],[11,"deserialize_u128","","",37,[[],["result",4]]],[11,"deserialize_f32","","",37,[[],["result",4]]],[11,"deserialize_f64","","",37,[[],["result",4]]],[11,"deserialize_char","","",37,[[],["result",4]]],[11,"deserialize_str","","",37,[[],["result",4]]],[11,"deserialize_string","","",37,[[],["result",4]]],[11,"deserialize_bytes","","",37,[[],["result",4]]],[11,"deserialize_byte_buf","","",37,[[],["result",4]]],[11,"deserialize_option","","",37,[[],["result",4]]],[11,"deserialize_unit","","",37,[[],["result",4]]],[11,"deserialize_unit_struct","","",37,[[],["result",4]]],[11,"deserialize_newtype_struct","","",37,[[],["result",4]]],[11,"deserialize_seq","","",37,[[],["result",4]]],[11,"deserialize_tuple","","",37,[[],["result",4]]],[11,"deserialize_tuple_struct","","",37,[[],["result",4]]],[11,"deserialize_map","","",37,[[],["result",4]]],[11,"deserialize_struct","","",37,[[],["result",4]]],[11,"deserialize_enum","","",37,[[],["result",4]]],[11,"deserialize_identifier","","",37,[[],["result",4]]],[11,"deserialize_ignored_any","","",37,[[],["result",4]]],[11,"deserialize_any","","",37,[[],["result",4]]],[11,"deserialize_bool","","",40,[[],["result",4]]],[11,"deserialize_i8","","",40,[[],["result",4]]],[11,"deserialize_i16","","",40,[[],["result",4]]],[11,"deserialize_i32","","",40,[[],["result",4]]],[11,"deserialize_i64","","",40,[[],["result",4]]],[11,"deserialize_i128","","",40,[[],["result",4]]],[11,"deserialize_u8","","",40,[[],["result",4]]],[11,"deserialize_u16","","",40,[[],["result",4]]],[11,"deserialize_u32","","",40,[[],["result",4]]],[11,"deserialize_u64","","",40,[[],["result",4]]],[11,"deserialize_u128","","",40,[[],["result",4]]],[11,"deserialize_f32","","",40,[[],["result",4]]],[11,"deserialize_f64","","",40,[[],["result",4]]],[11,"deserialize_char","","",40,[[],["result",4]]],[11,"deserialize_str","","",40,[[],["result",4]]],[11,"deserialize_string","","",40,[[],["result",4]]],[11,"deserialize_bytes","","",40,[[],["result",4]]],[11,"deserialize_byte_buf","","",40,[[],["result",4]]],[11,"deserialize_option","","",40,[[],["result",4]]],[11,"deserialize_unit","","",40,[[],["result",4]]],[11,"deserialize_unit_struct","","",40,[[],["result",4]]],[11,"deserialize_newtype_struct","","",40,[[],["result",4]]],[11,"deserialize_seq","","",40,[[],["result",4]]],[11,"deserialize_tuple","","",40,[[],["result",4]]],[11,"deserialize_tuple_struct","","",40,[[],["result",4]]],[11,"deserialize_map","","",40,[[],["result",4]]],[11,"deserialize_struct","","",40,[[],["result",4]]],[11,"deserialize_enum","","",40,[[],["result",4]]],[11,"deserialize_identifier","","",40,[[],["result",4]]],[11,"deserialize_ignored_any","","",40,[[],["result",4]]],[11,"deserialize_any","","",40,[[],["result",4]]],[11,"deserialize_bool","","",44,[[],["result",4]]],[11,"deserialize_i8","","",44,[[],["result",4]]],[11,"deserialize_i16","","",44,[[],["result",4]]],[11,"deserialize_i32","","",44,[[],["result",4]]],[11,"deserialize_i64","","",44,[[],["result",4]]],[11,"deserialize_i128","","",44,[[],["result",4]]],[11,"deserialize_u8","","",44,[[],["result",4]]],[11,"deserialize_u16","","",44,[[],["result",4]]],[11,"deserialize_u32","","",44,[[],["result",4]]],[11,"deserialize_u64","","",44,[[],["result",4]]],[11,"deserialize_u128","","",44,[[],["result",4]]],[11,"deserialize_f32","","",44,[[],["result",4]]],[11,"deserialize_f64","","",44,[[],["result",4]]],[11,"deserialize_char","","",44,[[],["result",4]]],[11,"deserialize_str","","",44,[[],["result",4]]],[11,"deserialize_string","","",44,[[],["result",4]]],[11,"deserialize_bytes","","",44,[[],["result",4]]],[11,"deserialize_byte_buf","","",44,[[],["result",4]]],[11,"deserialize_option","","",44,[[],["result",4]]],[11,"deserialize_unit","","",44,[[],["result",4]]],[11,"deserialize_unit_struct","","",44,[[],["result",4]]],[11,"deserialize_newtype_struct","","",44,[[],["result",4]]],[11,"deserialize_seq","","",44,[[],["result",4]]],[11,"deserialize_tuple","","",44,[[],["result",4]]],[11,"deserialize_tuple_struct","","",44,[[],["result",4]]],[11,"deserialize_map","","",44,[[],["result",4]]],[11,"deserialize_struct","","",44,[[],["result",4]]],[11,"deserialize_enum","","",44,[[],["result",4]]],[11,"deserialize_identifier","","",44,[[],["result",4]]],[11,"deserialize_ignored_any","","",44,[[],["result",4]]],[11,"deserialize_any","","",44,[[],["result",4]]],[11,"deserialize_bool","","",38,[[],["result",4]]],[11,"deserialize_i8","","",38,[[],["result",4]]],[11,"deserialize_i16","","",38,[[],["result",4]]],[11,"deserialize_i32","","",38,[[],["result",4]]],[11,"deserialize_i64","","",38,[[],["result",4]]],[11,"deserialize_i128","","",38,[[],["result",4]]],[11,"deserialize_u8","","",38,[[],["result",4]]],[11,"deserialize_u16","","",38,[[],["result",4]]],[11,"deserialize_u32","","",38,[[],["result",4]]],[11,"deserialize_u64","","",38,[[],["result",4]]],[11,"deserialize_u128","","",38,[[],["result",4]]],[11,"deserialize_f32","","",38,[[],["result",4]]],[11,"deserialize_f64","","",38,[[],["result",4]]],[11,"deserialize_char","","",38,[[],["result",4]]],[11,"deserialize_str","","",38,[[],["result",4]]],[11,"deserialize_string","","",38,[[],["result",4]]],[11,"deserialize_bytes","","",38,[[],["result",4]]],[11,"deserialize_byte_buf","","",38,[[],["result",4]]],[11,"deserialize_option","","",38,[[],["result",4]]],[11,"deserialize_unit","","",38,[[],["result",4]]],[11,"deserialize_unit_struct","","",38,[[],["result",4]]],[11,"deserialize_newtype_struct","","",38,[[],["result",4]]],[11,"deserialize_seq","","",38,[[],["result",4]]],[11,"deserialize_tuple","","",38,[[],["result",4]]],[11,"deserialize_tuple_struct","","",38,[[],["result",4]]],[11,"deserialize_map","","",38,[[],["result",4]]],[11,"deserialize_struct","","",38,[[],["result",4]]],[11,"deserialize_enum","","",38,[[],["result",4]]],[11,"deserialize_identifier","","",38,[[],["result",4]]],[11,"deserialize_ignored_any","","",38,[[],["result",4]]],[11,"deserialize_any","","",38,[[],["result",4]]],[11,"deserialize_any","","",51,[[],["result",4]]],[11,"deserialize_enum","","",51,[[],["result",4]]],[11,"deserialize_bool","","",51,[[],["result",4]]],[11,"deserialize_i8","","",51,[[],["result",4]]],[11,"deserialize_i16","","",51,[[],["result",4]]],[11,"deserialize_i32","","",51,[[],["result",4]]],[11,"deserialize_i64","","",51,[[],["result",4]]],[11,"deserialize_i128","","",51,[[],["result",4]]],[11,"deserialize_u8","","",51,[[],["result",4]]],[11,"deserialize_u16","","",51,[[],["result",4]]],[11,"deserialize_u32","","",51,[[],["result",4]]],[11,"deserialize_u64","","",51,[[],["result",4]]],[11,"deserialize_u128","","",51,[[],["result",4]]],[11,"deserialize_f32","","",51,[[],["result",4]]],[11,"deserialize_f64","","",51,[[],["result",4]]],[11,"deserialize_char","","",51,[[],["result",4]]],[11,"deserialize_str","","",51,[[],["result",4]]],[11,"deserialize_string","","",51,[[],["result",4]]],[11,"deserialize_bytes","","",51,[[],["result",4]]],[11,"deserialize_byte_buf","","",51,[[],["result",4]]],[11,"deserialize_option","","",51,[[],["result",4]]],[11,"deserialize_unit","","",51,[[],["result",4]]],[11,"deserialize_unit_struct","","",51,[[],["result",4]]],[11,"deserialize_newtype_struct","","",51,[[],["result",4]]],[11,"deserialize_seq","","",51,[[],["result",4]]],[11,"deserialize_tuple","","",51,[[],["result",4]]],[11,"deserialize_tuple_struct","","",51,[[],["result",4]]],[11,"deserialize_map","","",51,[[],["result",4]]],[11,"deserialize_struct","","",51,[[],["result",4]]],[11,"deserialize_identifier","","",51,[[],["result",4]]],[11,"deserialize_ignored_any","","",51,[[],["result",4]]],[11,"deserialize_bool","","",33,[[],["result",4]]],[11,"deserialize_i8","","",33,[[],["result",4]]],[11,"deserialize_i16","","",33,[[],["result",4]]],[11,"deserialize_i32","","",33,[[],["result",4]]],[11,"deserialize_i64","","",33,[[],["result",4]]],[11,"deserialize_i128","","",33,[[],["result",4]]],[11,"deserialize_u8","","",33,[[],["result",4]]],[11,"deserialize_u16","","",33,[[],["result",4]]],[11,"deserialize_u32","","",33,[[],["result",4]]],[11,"deserialize_u64","","",33,[[],["result",4]]],[11,"deserialize_u128","","",33,[[],["result",4]]],[11,"deserialize_f32","","",33,[[],["result",4]]],[11,"deserialize_f64","","",33,[[],["result",4]]],[11,"deserialize_char","","",33,[[],["result",4]]],[11,"deserialize_str","","",33,[[],["result",4]]],[11,"deserialize_string","","",33,[[],["result",4]]],[11,"deserialize_bytes","","",33,[[],["result",4]]],[11,"deserialize_byte_buf","","",33,[[],["result",4]]],[11,"deserialize_unit","","",33,[[],["result",4]]],[11,"deserialize_unit_struct","","",33,[[],["result",4]]],[11,"deserialize_newtype_struct","","",33,[[],["result",4]]],[11,"deserialize_seq","","",33,[[],["result",4]]],[11,"deserialize_tuple","","",33,[[],["result",4]]],[11,"deserialize_tuple_struct","","",33,[[],["result",4]]],[11,"deserialize_map","","",33,[[],["result",4]]],[11,"deserialize_struct","","",33,[[],["result",4]]],[11,"deserialize_enum","","",33,[[],["result",4]]],[11,"deserialize_identifier","","",33,[[],["result",4]]],[11,"deserialize_ignored_any","","",33,[[],["result",4]]],[11,"deserialize_any","","",33,[[],["result",4]]],[11,"deserialize_option","","",33,[[],["result",4]]],[11,"deserialize_any","","",52,[[],["result",4]]],[11,"deserialize_enum","","",52,[[],["result",4]]],[11,"deserialize_bool","","",52,[[],["result",4]]],[11,"deserialize_i8","","",52,[[],["result",4]]],[11,"deserialize_i16","","",52,[[],["result",4]]],[11,"deserialize_i32","","",52,[[],["result",4]]],[11,"deserialize_i64","","",52,[[],["result",4]]],[11,"deserialize_i128","","",52,[[],["result",4]]],[11,"deserialize_u8","","",52,[[],["result",4]]],[11,"deserialize_u16","","",52,[[],["result",4]]],[11,"deserialize_u32","","",52,[[],["result",4]]],[11,"deserialize_u64","","",52,[[],["result",4]]],[11,"deserialize_u128","","",52,[[],["result",4]]],[11,"deserialize_f32","","",52,[[],["result",4]]],[11,"deserialize_f64","","",52,[[],["result",4]]],[11,"deserialize_char","","",52,[[],["result",4]]],[11,"deserialize_str","","",52,[[],["result",4]]],[11,"deserialize_string","","",52,[[],["result",4]]],[11,"deserialize_bytes","","",52,[[],["result",4]]],[11,"deserialize_byte_buf","","",52,[[],["result",4]]],[11,"deserialize_option","","",52,[[],["result",4]]],[11,"deserialize_unit","","",52,[[],["result",4]]],[11,"deserialize_unit_struct","","",52,[[],["result",4]]],[11,"deserialize_newtype_struct","","",52,[[],["result",4]]],[11,"deserialize_seq","","",52,[[],["result",4]]],[11,"deserialize_tuple","","",52,[[],["result",4]]],[11,"deserialize_tuple_struct","","",52,[[],["result",4]]],[11,"deserialize_map","","",52,[[],["result",4]]],[11,"deserialize_struct","","",52,[[],["result",4]]],[11,"deserialize_identifier","","",52,[[],["result",4]]],[11,"deserialize_ignored_any","","",52,[[],["result",4]]],[11,"deserialize_bool","","",49,[[],["result",4]]],[11,"deserialize_i8","","",49,[[],["result",4]]],[11,"deserialize_i16","","",49,[[],["result",4]]],[11,"deserialize_i32","","",49,[[],["result",4]]],[11,"deserialize_i64","","",49,[[],["result",4]]],[11,"deserialize_i128","","",49,[[],["result",4]]],[11,"deserialize_u8","","",49,[[],["result",4]]],[11,"deserialize_u16","","",49,[[],["result",4]]],[11,"deserialize_u32","","",49,[[],["result",4]]],[11,"deserialize_u64","","",49,[[],["result",4]]],[11,"deserialize_u128","","",49,[[],["result",4]]],[11,"deserialize_f32","","",49,[[],["result",4]]],[11,"deserialize_f64","","",49,[[],["result",4]]],[11,"deserialize_char","","",49,[[],["result",4]]],[11,"deserialize_str","","",49,[[],["result",4]]],[11,"deserialize_string","","",49,[[],["result",4]]],[11,"deserialize_bytes","","",49,[[],["result",4]]],[11,"deserialize_byte_buf","","",49,[[],["result",4]]],[11,"deserialize_option","","",49,[[],["result",4]]],[11,"deserialize_unit","","",49,[[],["result",4]]],[11,"deserialize_unit_struct","","",49,[[],["result",4]]],[11,"deserialize_newtype_struct","","",49,[[],["result",4]]],[11,"deserialize_seq","","",49,[[],["result",4]]],[11,"deserialize_tuple","","",49,[[],["result",4]]],[11,"deserialize_tuple_struct","","",49,[[],["result",4]]],[11,"deserialize_map","","",49,[[],["result",4]]],[11,"deserialize_struct","","",49,[[],["result",4]]],[11,"deserialize_identifier","","",49,[[],["result",4]]],[11,"deserialize_ignored_any","","",49,[[],["result",4]]],[11,"deserialize_any","","",49,[[],["result",4]]],[11,"deserialize_enum","","",49,[[],["result",4]]],[11,"deserialize_bool","","",39,[[],["result",4]]],[11,"deserialize_i8","","",39,[[],["result",4]]],[11,"deserialize_i16","","",39,[[],["result",4]]],[11,"deserialize_i32","","",39,[[],["result",4]]],[11,"deserialize_i64","","",39,[[],["result",4]]],[11,"deserialize_i128","","",39,[[],["result",4]]],[11,"deserialize_u8","","",39,[[],["result",4]]],[11,"deserialize_u16","","",39,[[],["result",4]]],[11,"deserialize_u32","","",39,[[],["result",4]]],[11,"deserialize_u64","","",39,[[],["result",4]]],[11,"deserialize_u128","","",39,[[],["result",4]]],[11,"deserialize_f32","","",39,[[],["result",4]]],[11,"deserialize_f64","","",39,[[],["result",4]]],[11,"deserialize_char","","",39,[[],["result",4]]],[11,"deserialize_str","","",39,[[],["result",4]]],[11,"deserialize_string","","",39,[[],["result",4]]],[11,"deserialize_bytes","","",39,[[],["result",4]]],[11,"deserialize_byte_buf","","",39,[[],["result",4]]],[11,"deserialize_option","","",39,[[],["result",4]]],[11,"deserialize_unit","","",39,[[],["result",4]]],[11,"deserialize_unit_struct","","",39,[[],["result",4]]],[11,"deserialize_newtype_struct","","",39,[[],["result",4]]],[11,"deserialize_seq","","",39,[[],["result",4]]],[11,"deserialize_tuple","","",39,[[],["result",4]]],[11,"deserialize_tuple_struct","","",39,[[],["result",4]]],[11,"deserialize_map","","",39,[[],["result",4]]],[11,"deserialize_struct","","",39,[[],["result",4]]],[11,"deserialize_enum","","",39,[[],["result",4]]],[11,"deserialize_identifier","","",39,[[],["result",4]]],[11,"deserialize_ignored_any","","",39,[[],["result",4]]],[11,"deserialize_any","","",39,[[],["result",4]]],[11,"deserialize_bool","","",46,[[],["result",4]]],[11,"deserialize_i8","","",46,[[],["result",4]]],[11,"deserialize_i16","","",46,[[],["result",4]]],[11,"deserialize_i32","","",46,[[],["result",4]]],[11,"deserialize_i64","","",46,[[],["result",4]]],[11,"deserialize_i128","","",46,[[],["result",4]]],[11,"deserialize_u8","","",46,[[],["result",4]]],[11,"deserialize_u16","","",46,[[],["result",4]]],[11,"deserialize_u32","","",46,[[],["result",4]]],[11,"deserialize_u64","","",46,[[],["result",4]]],[11,"deserialize_u128","","",46,[[],["result",4]]],[11,"deserialize_f32","","",46,[[],["result",4]]],[11,"deserialize_f64","","",46,[[],["result",4]]],[11,"deserialize_char","","",46,[[],["result",4]]],[11,"deserialize_str","","",46,[[],["result",4]]],[11,"deserialize_string","","",46,[[],["result",4]]],[11,"deserialize_bytes","","",46,[[],["result",4]]],[11,"deserialize_byte_buf","","",46,[[],["result",4]]],[11,"deserialize_option","","",46,[[],["result",4]]],[11,"deserialize_unit","","",46,[[],["result",4]]],[11,"deserialize_unit_struct","","",46,[[],["result",4]]],[11,"deserialize_newtype_struct","","",46,[[],["result",4]]],[11,"deserialize_seq","","",46,[[],["result",4]]],[11,"deserialize_tuple","","",46,[[],["result",4]]],[11,"deserialize_tuple_struct","","",46,[[],["result",4]]],[11,"deserialize_map","","",46,[[],["result",4]]],[11,"deserialize_struct","","",46,[[],["result",4]]],[11,"deserialize_enum","","",46,[[],["result",4]]],[11,"deserialize_identifier","","",46,[[],["result",4]]],[11,"deserialize_ignored_any","","",46,[[],["result",4]]],[11,"deserialize_any","","",46,[[],["result",4]]],[11,"deserialize_bool","","",34,[[],["result",4]]],[11,"deserialize_i8","","",34,[[],["result",4]]],[11,"deserialize_i16","","",34,[[],["result",4]]],[11,"deserialize_i32","","",34,[[],["result",4]]],[11,"deserialize_i64","","",34,[[],["result",4]]],[11,"deserialize_i128","","",34,[[],["result",4]]],[11,"deserialize_u8","","",34,[[],["result",4]]],[11,"deserialize_u16","","",34,[[],["result",4]]],[11,"deserialize_u32","","",34,[[],["result",4]]],[11,"deserialize_u64","","",34,[[],["result",4]]],[11,"deserialize_u128","","",34,[[],["result",4]]],[11,"deserialize_f32","","",34,[[],["result",4]]],[11,"deserialize_f64","","",34,[[],["result",4]]],[11,"deserialize_char","","",34,[[],["result",4]]],[11,"deserialize_str","","",34,[[],["result",4]]],[11,"deserialize_string","","",34,[[],["result",4]]],[11,"deserialize_bytes","","",34,[[],["result",4]]],[11,"deserialize_byte_buf","","",34,[[],["result",4]]],[11,"deserialize_option","","",34,[[],["result",4]]],[11,"deserialize_unit","","",34,[[],["result",4]]],[11,"deserialize_unit_struct","","",34,[[],["result",4]]],[11,"deserialize_newtype_struct","","",34,[[],["result",4]]],[11,"deserialize_seq","","",34,[[],["result",4]]],[11,"deserialize_tuple","","",34,[[],["result",4]]],[11,"deserialize_tuple_struct","","",34,[[],["result",4]]],[11,"deserialize_map","","",34,[[],["result",4]]],[11,"deserialize_struct","","",34,[[],["result",4]]],[11,"deserialize_enum","","",34,[[],["result",4]]],[11,"deserialize_identifier","","",34,[[],["result",4]]],[11,"deserialize_ignored_any","","",34,[[],["result",4]]],[11,"deserialize_any","","",34,[[],["result",4]]],[11,"deserialize_bool","","",47,[[],["result",4]]],[11,"deserialize_i8","","",47,[[],["result",4]]],[11,"deserialize_i16","","",47,[[],["result",4]]],[11,"deserialize_i32","","",47,[[],["result",4]]],[11,"deserialize_i64","","",47,[[],["result",4]]],[11,"deserialize_i128","","",47,[[],["result",4]]],[11,"deserialize_u8","","",47,[[],["result",4]]],[11,"deserialize_u16","","",47,[[],["result",4]]],[11,"deserialize_u32","","",47,[[],["result",4]]],[11,"deserialize_u64","","",47,[[],["result",4]]],[11,"deserialize_u128","","",47,[[],["result",4]]],[11,"deserialize_f32","","",47,[[],["result",4]]],[11,"deserialize_f64","","",47,[[],["result",4]]],[11,"deserialize_char","","",47,[[],["result",4]]],[11,"deserialize_str","","",47,[[],["result",4]]],[11,"deserialize_string","","",47,[[],["result",4]]],[11,"deserialize_bytes","","",47,[[],["result",4]]],[11,"deserialize_byte_buf","","",47,[[],["result",4]]],[11,"deserialize_option","","",47,[[],["result",4]]],[11,"deserialize_unit","","",47,[[],["result",4]]],[11,"deserialize_unit_struct","","",47,[[],["result",4]]],[11,"deserialize_newtype_struct","","",47,[[],["result",4]]],[11,"deserialize_seq","","",47,[[],["result",4]]],[11,"deserialize_tuple","","",47,[[],["result",4]]],[11,"deserialize_tuple_struct","","",47,[[],["result",4]]],[11,"deserialize_map","","",47,[[],["result",4]]],[11,"deserialize_struct","","",47,[[],["result",4]]],[11,"deserialize_enum","","",47,[[],["result",4]]],[11,"deserialize_identifier","","",47,[[],["result",4]]],[11,"deserialize_ignored_any","","",47,[[],["result",4]]],[11,"deserialize_any","","",47,[[],["result",4]]],[11,"deserialize_bool","","",48,[[],["result",4]]],[11,"deserialize_i8","","",48,[[],["result",4]]],[11,"deserialize_i16","","",48,[[],["result",4]]],[11,"deserialize_i32","","",48,[[],["result",4]]],[11,"deserialize_i64","","",48,[[],["result",4]]],[11,"deserialize_i128","","",48,[[],["result",4]]],[11,"deserialize_u8","","",48,[[],["result",4]]],[11,"deserialize_u16","","",48,[[],["result",4]]],[11,"deserialize_u32","","",48,[[],["result",4]]],[11,"deserialize_u64","","",48,[[],["result",4]]],[11,"deserialize_u128","","",48,[[],["result",4]]],[11,"deserialize_f32","","",48,[[],["result",4]]],[11,"deserialize_f64","","",48,[[],["result",4]]],[11,"deserialize_char","","",48,[[],["result",4]]],[11,"deserialize_str","","",48,[[],["result",4]]],[11,"deserialize_string","","",48,[[],["result",4]]],[11,"deserialize_bytes","","",48,[[],["result",4]]],[11,"deserialize_byte_buf","","",48,[[],["result",4]]],[11,"deserialize_option","","",48,[[],["result",4]]],[11,"deserialize_unit","","",48,[[],["result",4]]],[11,"deserialize_unit_struct","","",48,[[],["result",4]]],[11,"deserialize_newtype_struct","","",48,[[],["result",4]]],[11,"deserialize_seq","","",48,[[],["result",4]]],[11,"deserialize_tuple","","",48,[[],["result",4]]],[11,"deserialize_tuple_struct","","",48,[[],["result",4]]],[11,"deserialize_map","","",48,[[],["result",4]]],[11,"deserialize_struct","","",48,[[],["result",4]]],[11,"deserialize_enum","","",48,[[],["result",4]]],[11,"deserialize_identifier","","",48,[[],["result",4]]],[11,"deserialize_ignored_any","","",48,[[],["result",4]]],[11,"deserialize_any","","",48,[[],["result",4]]],[11,"deserialize_any","","",53,[[],["result",4]]],[11,"deserialize_enum","","",53,[[],["result",4]]],[11,"deserialize_bool","","",53,[[],["result",4]]],[11,"deserialize_i8","","",53,[[],["result",4]]],[11,"deserialize_i16","","",53,[[],["result",4]]],[11,"deserialize_i32","","",53,[[],["result",4]]],[11,"deserialize_i64","","",53,[[],["result",4]]],[11,"deserialize_i128","","",53,[[],["result",4]]],[11,"deserialize_u8","","",53,[[],["result",4]]],[11,"deserialize_u16","","",53,[[],["result",4]]],[11,"deserialize_u32","","",53,[[],["result",4]]],[11,"deserialize_u64","","",53,[[],["result",4]]],[11,"deserialize_u128","","",53,[[],["result",4]]],[11,"deserialize_f32","","",53,[[],["result",4]]],[11,"deserialize_f64","","",53,[[],["result",4]]],[11,"deserialize_char","","",53,[[],["result",4]]],[11,"deserialize_str","","",53,[[],["result",4]]],[11,"deserialize_string","","",53,[[],["result",4]]],[11,"deserialize_bytes","","",53,[[],["result",4]]],[11,"deserialize_byte_buf","","",53,[[],["result",4]]],[11,"deserialize_option","","",53,[[],["result",4]]],[11,"deserialize_unit","","",53,[[],["result",4]]],[11,"deserialize_unit_struct","","",53,[[],["result",4]]],[11,"deserialize_newtype_struct","","",53,[[],["result",4]]],[11,"deserialize_seq","","",53,[[],["result",4]]],[11,"deserialize_tuple","","",53,[[],["result",4]]],[11,"deserialize_tuple_struct","","",53,[[],["result",4]]],[11,"deserialize_map","","",53,[[],["result",4]]],[11,"deserialize_struct","","",53,[[],["result",4]]],[11,"deserialize_identifier","","",53,[[],["result",4]]],[11,"deserialize_ignored_any","","",53,[[],["result",4]]],[11,"deserialize_any","","",55,[[],["result",4]]],[11,"deserialize_bool","","",55,[[],["result",4]]],[11,"deserialize_i8","","",55,[[],["result",4]]],[11,"deserialize_i16","","",55,[[],["result",4]]],[11,"deserialize_i32","","",55,[[],["result",4]]],[11,"deserialize_i64","","",55,[[],["result",4]]],[11,"deserialize_i128","","",55,[[],["result",4]]],[11,"deserialize_u8","","",55,[[],["result",4]]],[11,"deserialize_u16","","",55,[[],["result",4]]],[11,"deserialize_u32","","",55,[[],["result",4]]],[11,"deserialize_u64","","",55,[[],["result",4]]],[11,"deserialize_u128","","",55,[[],["result",4]]],[11,"deserialize_f32","","",55,[[],["result",4]]],[11,"deserialize_f64","","",55,[[],["result",4]]],[11,"deserialize_char","","",55,[[],["result",4]]],[11,"deserialize_str","","",55,[[],["result",4]]],[11,"deserialize_string","","",55,[[],["result",4]]],[11,"deserialize_bytes","","",55,[[],["result",4]]],[11,"deserialize_byte_buf","","",55,[[],["result",4]]],[11,"deserialize_option","","",55,[[],["result",4]]],[11,"deserialize_unit","","",55,[[],["result",4]]],[11,"deserialize_unit_struct","","",55,[[],["result",4]]],[11,"deserialize_newtype_struct","","",55,[[],["result",4]]],[11,"deserialize_seq","","",55,[[],["result",4]]],[11,"deserialize_tuple","","",55,[[],["result",4]]],[11,"deserialize_tuple_struct","","",55,[[],["result",4]]],[11,"deserialize_map","","",55,[[],["result",4]]],[11,"deserialize_struct","","",55,[[],["result",4]]],[11,"deserialize_enum","","",55,[[],["result",4]]],[11,"deserialize_identifier","","",55,[[],["result",4]]],[11,"deserialize_ignored_any","","",55,[[],["result",4]]],[11,"deserialize_bool","","",45,[[],["result",4]]],[11,"deserialize_i8","","",45,[[],["result",4]]],[11,"deserialize_i16","","",45,[[],["result",4]]],[11,"deserialize_i32","","",45,[[],["result",4]]],[11,"deserialize_i64","","",45,[[],["result",4]]],[11,"deserialize_i128","","",45,[[],["result",4]]],[11,"deserialize_u8","","",45,[[],["result",4]]],[11,"deserialize_u16","","",45,[[],["result",4]]],[11,"deserialize_u32","","",45,[[],["result",4]]],[11,"deserialize_u64","","",45,[[],["result",4]]],[11,"deserialize_u128","","",45,[[],["result",4]]],[11,"deserialize_f32","","",45,[[],["result",4]]],[11,"deserialize_f64","","",45,[[],["result",4]]],[11,"deserialize_char","","",45,[[],["result",4]]],[11,"deserialize_str","","",45,[[],["result",4]]],[11,"deserialize_string","","",45,[[],["result",4]]],[11,"deserialize_bytes","","",45,[[],["result",4]]],[11,"deserialize_byte_buf","","",45,[[],["result",4]]],[11,"deserialize_option","","",45,[[],["result",4]]],[11,"deserialize_unit","","",45,[[],["result",4]]],[11,"deserialize_unit_struct","","",45,[[],["result",4]]],[11,"deserialize_newtype_struct","","",45,[[],["result",4]]],[11,"deserialize_seq","","",45,[[],["result",4]]],[11,"deserialize_tuple","","",45,[[],["result",4]]],[11,"deserialize_tuple_struct","","",45,[[],["result",4]]],[11,"deserialize_map","","",45,[[],["result",4]]],[11,"deserialize_struct","","",45,[[],["result",4]]],[11,"deserialize_enum","","",45,[[],["result",4]]],[11,"deserialize_identifier","","",45,[[],["result",4]]],[11,"deserialize_ignored_any","","",45,[[],["result",4]]],[11,"deserialize_any","","",45,[[],["result",4]]],[11,"deserialize_any","","",58,[[],["result",4]]],[11,"deserialize_enum","","",58,[[],["result",4]]],[11,"deserialize_bool","","",58,[[],["result",4]]],[11,"deserialize_i8","","",58,[[],["result",4]]],[11,"deserialize_i16","","",58,[[],["result",4]]],[11,"deserialize_i32","","",58,[[],["result",4]]],[11,"deserialize_i64","","",58,[[],["result",4]]],[11,"deserialize_i128","","",58,[[],["result",4]]],[11,"deserialize_u8","","",58,[[],["result",4]]],[11,"deserialize_u16","","",58,[[],["result",4]]],[11,"deserialize_u32","","",58,[[],["result",4]]],[11,"deserialize_u64","","",58,[[],["result",4]]],[11,"deserialize_u128","","",58,[[],["result",4]]],[11,"deserialize_f32","","",58,[[],["result",4]]],[11,"deserialize_f64","","",58,[[],["result",4]]],[11,"deserialize_char","","",58,[[],["result",4]]],[11,"deserialize_str","","",58,[[],["result",4]]],[11,"deserialize_string","","",58,[[],["result",4]]],[11,"deserialize_bytes","","",58,[[],["result",4]]],[11,"deserialize_byte_buf","","",58,[[],["result",4]]],[11,"deserialize_option","","",58,[[],["result",4]]],[11,"deserialize_unit","","",58,[[],["result",4]]],[11,"deserialize_unit_struct","","",58,[[],["result",4]]],[11,"deserialize_newtype_struct","","",58,[[],["result",4]]],[11,"deserialize_seq","","",58,[[],["result",4]]],[11,"deserialize_tuple","","",58,[[],["result",4]]],[11,"deserialize_tuple_struct","","",58,[[],["result",4]]],[11,"deserialize_map","","",58,[[],["result",4]]],[11,"deserialize_struct","","",58,[[],["result",4]]],[11,"deserialize_identifier","","",58,[[],["result",4]]],[11,"deserialize_ignored_any","","",58,[[],["result",4]]],[11,"deserialize_any","","",50,[[],["result",4]]],[11,"deserialize_enum","","",50,[[],["result",4]]],[11,"deserialize_bool","","",50,[[],["result",4]]],[11,"deserialize_i8","","",50,[[],["result",4]]],[11,"deserialize_i16","","",50,[[],["result",4]]],[11,"deserialize_i32","","",50,[[],["result",4]]],[11,"deserialize_i64","","",50,[[],["result",4]]],[11,"deserialize_i128","","",50,[[],["result",4]]],[11,"deserialize_u8","","",50,[[],["result",4]]],[11,"deserialize_u16","","",50,[[],["result",4]]],[11,"deserialize_u32","","",50,[[],["result",4]]],[11,"deserialize_u64","","",50,[[],["result",4]]],[11,"deserialize_u128","","",50,[[],["result",4]]],[11,"deserialize_f32","","",50,[[],["result",4]]],[11,"deserialize_f64","","",50,[[],["result",4]]],[11,"deserialize_char","","",50,[[],["result",4]]],[11,"deserialize_str","","",50,[[],["result",4]]],[11,"deserialize_string","","",50,[[],["result",4]]],[11,"deserialize_bytes","","",50,[[],["result",4]]],[11,"deserialize_byte_buf","","",50,[[],["result",4]]],[11,"deserialize_option","","",50,[[],["result",4]]],[11,"deserialize_unit","","",50,[[],["result",4]]],[11,"deserialize_unit_struct","","",50,[[],["result",4]]],[11,"deserialize_newtype_struct","","",50,[[],["result",4]]],[11,"deserialize_seq","","",50,[[],["result",4]]],[11,"deserialize_tuple","","",50,[[],["result",4]]],[11,"deserialize_tuple_struct","","",50,[[],["result",4]]],[11,"deserialize_map","","",50,[[],["result",4]]],[11,"deserialize_struct","","",50,[[],["result",4]]],[11,"deserialize_identifier","","",50,[[],["result",4]]],[11,"deserialize_ignored_any","","",50,[[],["result",4]]],[11,"deserialize_bool","","",41,[[],["result",4]]],[11,"deserialize_i8","","",41,[[],["result",4]]],[11,"deserialize_i16","","",41,[[],["result",4]]],[11,"deserialize_i32","","",41,[[],["result",4]]],[11,"deserialize_i64","","",41,[[],["result",4]]],[11,"deserialize_i128","","",41,[[],["result",4]]],[11,"deserialize_u8","","",41,[[],["result",4]]],[11,"deserialize_u16","","",41,[[],["result",4]]],[11,"deserialize_u32","","",41,[[],["result",4]]],[11,"deserialize_u64","","",41,[[],["result",4]]],[11,"deserialize_u128","","",41,[[],["result",4]]],[11,"deserialize_f32","","",41,[[],["result",4]]],[11,"deserialize_f64","","",41,[[],["result",4]]],[11,"deserialize_char","","",41,[[],["result",4]]],[11,"deserialize_str","","",41,[[],["result",4]]],[11,"deserialize_string","","",41,[[],["result",4]]],[11,"deserialize_bytes","","",41,[[],["result",4]]],[11,"deserialize_byte_buf","","",41,[[],["result",4]]],[11,"deserialize_option","","",41,[[],["result",4]]],[11,"deserialize_unit","","",41,[[],["result",4]]],[11,"deserialize_unit_struct","","",41,[[],["result",4]]],[11,"deserialize_newtype_struct","","",41,[[],["result",4]]],[11,"deserialize_seq","","",41,[[],["result",4]]],[11,"deserialize_tuple","","",41,[[],["result",4]]],[11,"deserialize_tuple_struct","","",41,[[],["result",4]]],[11,"deserialize_map","","",41,[[],["result",4]]],[11,"deserialize_struct","","",41,[[],["result",4]]],[11,"deserialize_enum","","",41,[[],["result",4]]],[11,"deserialize_identifier","","",41,[[],["result",4]]],[11,"deserialize_ignored_any","","",41,[[],["result",4]]],[11,"deserialize_any","","",41,[[],["result",4]]],[11,"deserialize_bool","","",35,[[],["result",4]]],[11,"deserialize_i8","","",35,[[],["result",4]]],[11,"deserialize_i16","","",35,[[],["result",4]]],[11,"deserialize_i32","","",35,[[],["result",4]]],[11,"deserialize_i64","","",35,[[],["result",4]]],[11,"deserialize_i128","","",35,[[],["result",4]]],[11,"deserialize_u8","","",35,[[],["result",4]]],[11,"deserialize_u16","","",35,[[],["result",4]]],[11,"deserialize_u32","","",35,[[],["result",4]]],[11,"deserialize_u64","","",35,[[],["result",4]]],[11,"deserialize_u128","","",35,[[],["result",4]]],[11,"deserialize_f32","","",35,[[],["result",4]]],[11,"deserialize_f64","","",35,[[],["result",4]]],[11,"deserialize_char","","",35,[[],["result",4]]],[11,"deserialize_str","","",35,[[],["result",4]]],[11,"deserialize_string","","",35,[[],["result",4]]],[11,"deserialize_bytes","","",35,[[],["result",4]]],[11,"deserialize_byte_buf","","",35,[[],["result",4]]],[11,"deserialize_option","","",35,[[],["result",4]]],[11,"deserialize_unit","","",35,[[],["result",4]]],[11,"deserialize_unit_struct","","",35,[[],["result",4]]],[11,"deserialize_newtype_struct","","",35,[[],["result",4]]],[11,"deserialize_seq","","",35,[[],["result",4]]],[11,"deserialize_tuple","","",35,[[],["result",4]]],[11,"deserialize_tuple_struct","","",35,[[],["result",4]]],[11,"deserialize_map","","",35,[[],["result",4]]],[11,"deserialize_struct","","",35,[[],["result",4]]],[11,"deserialize_enum","","",35,[[],["result",4]]],[11,"deserialize_identifier","","",35,[[],["result",4]]],[11,"deserialize_ignored_any","","",35,[[],["result",4]]],[11,"deserialize_any","","",35,[[],["result",4]]],[11,"deserialize_any","","",54,[[],["result",4]]],[11,"deserialize_bool","","",54,[[],["result",4]]],[11,"deserialize_i8","","",54,[[],["result",4]]],[11,"deserialize_i16","","",54,[[],["result",4]]],[11,"deserialize_i32","","",54,[[],["result",4]]],[11,"deserialize_i64","","",54,[[],["result",4]]],[11,"deserialize_i128","","",54,[[],["result",4]]],[11,"deserialize_u8","","",54,[[],["result",4]]],[11,"deserialize_u16","","",54,[[],["result",4]]],[11,"deserialize_u32","","",54,[[],["result",4]]],[11,"deserialize_u64","","",54,[[],["result",4]]],[11,"deserialize_u128","","",54,[[],["result",4]]],[11,"deserialize_f32","","",54,[[],["result",4]]],[11,"deserialize_f64","","",54,[[],["result",4]]],[11,"deserialize_char","","",54,[[],["result",4]]],[11,"deserialize_str","","",54,[[],["result",4]]],[11,"deserialize_string","","",54,[[],["result",4]]],[11,"deserialize_bytes","","",54,[[],["result",4]]],[11,"deserialize_byte_buf","","",54,[[],["result",4]]],[11,"deserialize_option","","",54,[[],["result",4]]],[11,"deserialize_unit","","",54,[[],["result",4]]],[11,"deserialize_unit_struct","","",54,[[],["result",4]]],[11,"deserialize_newtype_struct","","",54,[[],["result",4]]],[11,"deserialize_seq","","",54,[[],["result",4]]],[11,"deserialize_tuple","","",54,[[],["result",4]]],[11,"deserialize_tuple_struct","","",54,[[],["result",4]]],[11,"deserialize_map","","",54,[[],["result",4]]],[11,"deserialize_struct","","",54,[[],["result",4]]],[11,"deserialize_identifier","","",54,[[],["result",4]]],[11,"deserialize_ignored_any","","",54,[[],["result",4]]],[11,"deserialize_enum","","",54,[[],["result",4]]],[11,"deserialize_any","","",57,[[],["result",4]]],[11,"deserialize_seq","","",57,[[],["result",4]]],[11,"deserialize_tuple","","",57,[[],["result",4]]],[11,"deserialize_bool","","",57,[[],["result",4]]],[11,"deserialize_i8","","",57,[[],["result",4]]],[11,"deserialize_i16","","",57,[[],["result",4]]],[11,"deserialize_i32","","",57,[[],["result",4]]],[11,"deserialize_i64","","",57,[[],["result",4]]],[11,"deserialize_i128","","",57,[[],["result",4]]],[11,"deserialize_u8","","",57,[[],["result",4]]],[11,"deserialize_u16","","",57,[[],["result",4]]],[11,"deserialize_u32","","",57,[[],["result",4]]],[11,"deserialize_u64","","",57,[[],["result",4]]],[11,"deserialize_u128","","",57,[[],["result",4]]],[11,"deserialize_f32","","",57,[[],["result",4]]],[11,"deserialize_f64","","",57,[[],["result",4]]],[11,"deserialize_char","","",57,[[],["result",4]]],[11,"deserialize_str","","",57,[[],["result",4]]],[11,"deserialize_string","","",57,[[],["result",4]]],[11,"deserialize_bytes","","",57,[[],["result",4]]],[11,"deserialize_byte_buf","","",57,[[],["result",4]]],[11,"deserialize_option","","",57,[[],["result",4]]],[11,"deserialize_unit","","",57,[[],["result",4]]],[11,"deserialize_unit_struct","","",57,[[],["result",4]]],[11,"deserialize_newtype_struct","","",57,[[],["result",4]]],[11,"deserialize_tuple_struct","","",57,[[],["result",4]]],[11,"deserialize_map","","",57,[[],["result",4]]],[11,"deserialize_struct","","",57,[[],["result",4]]],[11,"deserialize_enum","","",57,[[],["result",4]]],[11,"deserialize_identifier","","",57,[[],["result",4]]],[11,"deserialize_ignored_any","","",57,[[],["result",4]]],[11,"deserialize_bool","","",36,[[],["result",4]]],[11,"deserialize_i8","","",36,[[],["result",4]]],[11,"deserialize_i16","","",36,[[],["result",4]]],[11,"deserialize_i32","","",36,[[],["result",4]]],[11,"deserialize_i64","","",36,[[],["result",4]]],[11,"deserialize_i128","","",36,[[],["result",4]]],[11,"deserialize_u8","","",36,[[],["result",4]]],[11,"deserialize_u16","","",36,[[],["result",4]]],[11,"deserialize_u32","","",36,[[],["result",4]]],[11,"deserialize_u64","","",36,[[],["result",4]]],[11,"deserialize_u128","","",36,[[],["result",4]]],[11,"deserialize_f32","","",36,[[],["result",4]]],[11,"deserialize_f64","","",36,[[],["result",4]]],[11,"deserialize_char","","",36,[[],["result",4]]],[11,"deserialize_str","","",36,[[],["result",4]]],[11,"deserialize_string","","",36,[[],["result",4]]],[11,"deserialize_bytes","","",36,[[],["result",4]]],[11,"deserialize_byte_buf","","",36,[[],["result",4]]],[11,"deserialize_option","","",36,[[],["result",4]]],[11,"deserialize_unit","","",36,[[],["result",4]]],[11,"deserialize_unit_struct","","",36,[[],["result",4]]],[11,"deserialize_newtype_struct","","",36,[[],["result",4]]],[11,"deserialize_seq","","",36,[[],["result",4]]],[11,"deserialize_tuple","","",36,[[],["result",4]]],[11,"deserialize_tuple_struct","","",36,[[],["result",4]]],[11,"deserialize_map","","",36,[[],["result",4]]],[11,"deserialize_struct","","",36,[[],["result",4]]],[11,"deserialize_enum","","",36,[[],["result",4]]],[11,"deserialize_identifier","","",36,[[],["result",4]]],[11,"deserialize_ignored_any","","",36,[[],["result",4]]],[11,"deserialize_any","","",36,[[],["result",4]]],[11,"deserialize_bool","","",43,[[],["result",4]]],[11,"deserialize_i8","","",43,[[],["result",4]]],[11,"deserialize_i16","","",43,[[],["result",4]]],[11,"deserialize_i32","","",43,[[],["result",4]]],[11,"deserialize_i64","","",43,[[],["result",4]]],[11,"deserialize_i128","","",43,[[],["result",4]]],[11,"deserialize_u8","","",43,[[],["result",4]]],[11,"deserialize_u16","","",43,[[],["result",4]]],[11,"deserialize_u32","","",43,[[],["result",4]]],[11,"deserialize_u64","","",43,[[],["result",4]]],[11,"deserialize_u128","","",43,[[],["result",4]]],[11,"deserialize_f32","","",43,[[],["result",4]]],[11,"deserialize_f64","","",43,[[],["result",4]]],[11,"deserialize_char","","",43,[[],["result",4]]],[11,"deserialize_str","","",43,[[],["result",4]]],[11,"deserialize_string","","",43,[[],["result",4]]],[11,"deserialize_bytes","","",43,[[],["result",4]]],[11,"deserialize_byte_buf","","",43,[[],["result",4]]],[11,"deserialize_option","","",43,[[],["result",4]]],[11,"deserialize_unit","","",43,[[],["result",4]]],[11,"deserialize_unit_struct","","",43,[[],["result",4]]],[11,"deserialize_newtype_struct","","",43,[[],["result",4]]],[11,"deserialize_seq","","",43,[[],["result",4]]],[11,"deserialize_tuple","","",43,[[],["result",4]]],[11,"deserialize_tuple_struct","","",43,[[],["result",4]]],[11,"deserialize_map","","",43,[[],["result",4]]],[11,"deserialize_struct","","",43,[[],["result",4]]],[11,"deserialize_enum","","",43,[[],["result",4]]],[11,"deserialize_identifier","","",43,[[],["result",4]]],[11,"deserialize_ignored_any","","",43,[[],["result",4]]],[11,"deserialize_any","","",43,[[],["result",4]]],[11,"custom","","",32,[[],["error",3]]],[11,"variant_seed","","",51,[[],["result",4]]],[11,"variant_seed","","",58,[[],["result",4]]],[11,"variant_seed","","",52,[[],["result",4]]],[11,"variant_seed","","",49,[[],["result",4]]],[11,"variant_seed","","",53,[[],["result",4]]],[11,"variant_seed","","",50,[[],["result",4]]],[11,"custom","","",32,[[],["error",3]]],[11,"description","","",32,[[]]],[11,"expecting","forest_encoding::de","",59,[[["formatter",3]],[["error",3],["result",4]]]],[11,"visit_bool","","",59,[[],["result",4]]],[11,"visit_i64","","",59,[[],["result",4]]],[11,"visit_u64","","",59,[[],["result",4]]],[11,"visit_f64","","",59,[[],["result",4]]],[11,"visit_str","","",59,[[],["result",4]]],[11,"visit_none","","",59,[[],["result",4]]],[11,"visit_some","","",59,[[],["result",4]]],[11,"visit_newtype_struct","","",59,[[],["result",4]]],[11,"visit_unit","","",59,[[],["result",4]]],[11,"visit_seq","","",59,[[],["result",4]]],[11,"visit_map","","",59,[[],["result",4]]],[11,"visit_bytes","","",59,[[],["result",4]]],[11,"visit_enum","","",59,[[],["result",4]]],[11,"fmt","","",1,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","forest_encoding::de::value","",32,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","forest_encoding::de","",2,[[["formatter",3]],[["error",3],["result",4]]]],[11,"from","forest_encoding::value","",25,[[],["value",4]]],[11,"from","","",25,[[["string",3]],["value",4]]],[11,"from","","",25,[[],["value",4]]],[11,"from","","",25,[[["vec",3],["value",4]],["value",4]]],[11,"from","","",25,[[["btreemap",3],["value",4]],["value",4]]],[11,"from","","",25,[[],["value",4]]],[11,"from","","",25,[[["vec",3]],["value",4]]],[11,"from","forest_encoding::error","",61,[[["error",3]],["error",3]]],[11,"from","forest_encoding::value","",25,[[],["value",4]]],[11,"from","","",25,[[],["value",4]]],[11,"from","","",25,[[],["value",4]]],[11,"from","","",25,[[],["value",4]]],[11,"from","","",25,[[],["value",4]]],[11,"from","","",25,[[],["value",4]]],[11,"from","","",25,[[],["value",4]]],[11,"from","","",25,[[],["value",4]]],[11,"cmp","","",25,[[["value",4]],["ordering",4]]],[11,"eq","","",25,[[["value",4]]]],[11,"eq","forest_encoding::error","",23,[[["category",4]]]],[11,"deserialize","forest_encoding::tags","",24,[[],[["tagged",3],["result",4]]]],[11,"deserialize","forest_encoding::value","",25,[[],[["result",4],["value",4]]]],[11,"clone","","",25,[[],["value",4]]],[11,"clone","forest_encoding::error","",23,[[],["category",4]]],[11,"fmt","","",23,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","forest_encoding::value","",25,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","forest_encoding::error","",61,[[["formatter",3]],[["error",3],["result",4]]]],[11,"custom","","",61,[[],["error",3]]],[11,"invalid_type","","",61,[[["unexpected",4],["expected",8]],["error",3]]],[11,"partial_cmp","forest_encoding::value","",25,[[["value",4]],[["ordering",4],["option",4]]]],[11,"custom","forest_encoding::error","",61,[[],["error",3]]],[11,"source","","",61,[[],[["option",4],["error",8]]]],[11,"fmt","","",61,[[["formatter",3]],[["error",3],["result",4]]]],[11,"serialize","forest_encoding::value","",25,[[],["result",4]]],[11,"serialize","forest_encoding::tags","",24,[[],["result",4]]],[11,"from","forest_encoding","",29,[[["cborerror",3]],["error",3]]],[11,"from","","",29,[[["ciderror",4]]]],[11,"eq","","",27,[[["bytesde",3]]]],[11,"ne","","",27,[[["bytesde",3]]]],[11,"eq","","",29,[[["error",3]]]],[11,"ne","","",29,[[["error",3]]]],[11,"eq","","",30,[[["codecprotocol",4]]]],[11,"fmt","","",27,[[["formatter",3]],["result",6]]],[11,"fmt","","",29,[[["formatter",3]],["result",6]]],[11,"fmt","","",30,[[["formatter",3]],["result",6]]],[11,"fmt","","",29,[[["formatter",3]],["result",6]]],[11,"fmt","","",30,[[["formatter",3]],["result",6]]],[11,"serialize","","",26,[[],["result",4]]],[11,"serialize","","",27,[[],["result",4]]],[11,"serialize","","",28,[[],["result",4]]],[11,"deserialize","","",27,[[],["result",4]]],[11,"deserialize","","",28,[[],["result",4]]],[11,"new","forest_encoding::de::value","Create a new borrowed deserializer from the given string.",51,[[],["borrowedstrdeserializer",3]]],[11,"new","","Create a new borrowed deserializer from the given byte…",54,[[],["borrowedbytesdeserializer",3]]],[11,"new","","Construct a new `SeqDeserializer<I, E>`.",55,[[],["seqdeserializer",3]]],[11,"end","","Check for remaining elements after passing a…",55,[[],["result",4]]],[11,"new","","Construct a new `SeqAccessDeserializer<A>`.",56,[[],["seqaccessdeserializer",3]]],[11,"new","","Construct a new `MapDeserializer<I, E>`.",57,[[],["mapdeserializer",3]]],[11,"end","","Check for remaining elements after passing a…",57,[[],["result",4]]],[11,"new","","Construct a new `MapAccessDeserializer<A>`.",58,[[],["mapaccessdeserializer",3]]],[11,"is","forest_encoding::ser","Returns `true` if the boxed type is the same as `T`",12,[[]]],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type…",12,[[],["option",4]]],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is…",12,[[],["option",4]]],[11,"is","","Forwards to the method defined on the type `dyn Error`.",12,[[]]],[11,"downcast_ref","","Forwards to the method defined on the type `dyn Error`.",12,[[],["option",4]]],[11,"downcast_mut","","Forwards to the method defined on the type `dyn Error`.",12,[[],["option",4]]],[11,"is","","Forwards to the method defined on the type `dyn Error`.",12,[[]]],[11,"downcast_ref","","Forwards to the method defined on the type `dyn Error`.",12,[[],["option",4]]],[11,"downcast_mut","","Forwards to the method defined on the type `dyn Error`.",12,[[],["option",4]]],[11,"downcast","","Attempts to downcast the box to a concrete type.",12,[[["error",8],["box",3]],[["box",3],["result",4],["box",3]]]],[11,"chain","","Returns an iterator starting with the current error and…",12,[[],["chain",3]]],[11,"downcast","","Attempts to downcast the box to a concrete type.",12,[[["box",3],["error",8]],[["box",3],["box",3],["result",4]]]],[11,"downcast","","Attempts to downcast the box to a concrete type.",12,[[["error",8],["box",3]],[["box",3],["box",3],["result",4]]]],[11,"offset","forest_encoding::error","The byte offset at which the error occurred.",61,[[]]],[11,"classify","","Categorizes the cause of this error.",61,[[],["category",4]]],[11,"is_io","","Returns true if this error was caused by a failure to read…",61,[[]]],[11,"is_syntax","","Returns true if this error was caused by input that was…",61,[[]]],[11,"is_data","","Returns true if this error was caused by data that was…",61,[[]]],[11,"is_eof","","Returns true if this error was caused by prematurely…",61,[[]]],[11,"is_scratch_too_small","","Returns true if this error was caused by the scratch…",61,[[]]],[11,"new","forest_encoding::tags","Create a new tagged value",24,[[["option",4]],["tagged",3]]],[11,"marshal_cbor","forest_encoding","Marshalls cbor encodable object into cbor bytes",31,[[],[["result",4],["vec",3],["error",3]]]],[11,"unmarshal_cbor","","Unmarshals cbor encoded bytes to object",31,[[],[["result",4],["error",3]]]],[11,"cid","","Returns the content identifier of the raw block of data…",31,[[],[["cid",3],["error",3],["result",4]]]]],"p":[[8,"Error"],[4,"Unexpected"],[8,"Expected"],[8,"Deserialize"],[8,"DeserializeSeed"],[8,"Deserializer"],[8,"Visitor"],[8,"SeqAccess"],[8,"MapAccess"],[8,"EnumAccess"],[8,"VariantAccess"],[8,"IntoDeserializer"],[8,"StdError"],[8,"Error"],[8,"Serialize"],[8,"Serializer"],[8,"SerializeSeq"],[8,"SerializeTuple"],[8,"SerializeTupleStruct"],[8,"SerializeTupleVariant"],[8,"SerializeMap"],[8,"SerializeStruct"],[8,"SerializeStructVariant"],[4,"Category"],[3,"Tagged"],[4,"Value"],[3,"BytesSer"],[3,"BytesDe"],[3,"Byte32De"],[3,"Error"],[4,"CodecProtocol"],[8,"Cbor"],[3,"Error"],[3,"UnitDeserializer"],[3,"BoolDeserializer"],[3,"I8Deserializer"],[3,"I16Deserializer"],[3,"I32Deserializer"],[3,"I64Deserializer"],[3,"IsizeDeserializer"],[3,"U8Deserializer"],[3,"U16Deserializer"],[3,"U64Deserializer"],[3,"UsizeDeserializer"],[3,"F32Deserializer"],[3,"F64Deserializer"],[3,"CharDeserializer"],[3,"I128Deserializer"],[3,"U128Deserializer"],[3,"U32Deserializer"],[3,"StrDeserializer"],[3,"BorrowedStrDeserializer"],[3,"StringDeserializer"],[3,"CowStrDeserializer"],[3,"BorrowedBytesDeserializer"],[3,"SeqDeserializer"],[3,"SeqAccessDeserializer"],[3,"MapDeserializer"],[3,"MapAccessDeserializer"],[3,"IgnoredAny"],[3,"Impossible"],[3,"Error"]]},\
"forest_ipld":{"doc":"","i":[[3,"Path","forest_ipld","Describes a series of steps across a tree or DAG of Ipld,…",null,null],[4,"Error","","Ipld error",null,null],[13,"Encoding","","",0,null],[13,"Other","","",0,null],[13,"Link","","",0,null],[13,"Custom","","",0,null],[4,"PathSegment","","Represents either a key in a map or an index in a list.",null,null],[13,"String","","Key in a map",1,null],[13,"Int","","Index in a list",1,null],[4,"Ipld","","Represents IPLD data structure used when serializing and…",null,null],[13,"Null","","Represents a null value.",2,null],[13,"Bool","","Represents a boolean value.",2,null],[13,"Integer","","Represents a signed integer value.",2,null],[13,"Float","","Represents a floating point value.",2,null],[13,"String","","Represents a String.",2,null],[13,"Bytes","","Represents Bytes.",2,null],[13,"List","","Represents List of IPLD objects.",2,null],[13,"Map","","Represents a map of strings to Ipld objects.",2,null],[13,"Link","","Represents a link to another piece of data through a…",2,null],[5,"to_ipld","","Convert any object into an IPLD object",null,[[],[["ipld",4],["error",4],["result",4]]]],[5,"from_ipld","","Convert a `Ipld` structure into a type `T` Currently…",null,[[["ipld",4]],[["string",3],["result",4]]]],[11,"new","","",3,[[["pathsegment",4],["vec",3]]]],[11,"extend","","Extend `Path` with another `Path` by cloning and appending…",3,[[["path",3]]]],[11,"segments","","Returns slice of `PathSegment`s of the `Path`.",3,[[]]],[11,"push","","Pushes a `PathSegment` to the end of the `Path`.",3,[[["pathsegment",4]]]],[11,"pop","","Pops a `PathSegment` from the end of the path.",3,[[],[["pathsegment",4],["option",4]]]],[11,"to_index","","Return index or conversion from string to index. If path…",1,[[],["option",4]]],[0,"selector","","",null,null],[3,"Progress","forest_ipld::selector","Contains progress of traversal and last block information…",null,null],[3,"LastBlockInfo","","Contains information about the last block that was…",null,null],[12,"path","","",4,null],[12,"link","","",4,null],[4,"VisitReason","","Provides reason for callback in traversal for `walk_all`.",null,null],[13,"SelectionMatch","","Ipld node visited was a specific match.",5,null],[13,"SelectionCandidate","","Ipld node was visited while searching for matches.",5,null],[4,"Selector","","Selectors are expressions that identify and select a…",null,null],[13,"Matcher","","Matcher marks a node to be included in the \\\"result\\\" set.…",6,null],[13,"ExploreAll","","ExploreAll is similar to a `*` -- it traverses all…",6,null],[12,"next","forest_ipld::selector::Selector","",7,null],[13,"ExploreFields","forest_ipld::selector","ExploreFields traverses named fields in a map (or…",6,null],[12,"fields","forest_ipld::selector::Selector","",8,null],[13,"ExploreIndex","forest_ipld::selector","ExploreIndex traverses a specific index in a list, and…",6,null],[12,"index","forest_ipld::selector::Selector","",9,null],[12,"next","","",9,null],[13,"ExploreRange","forest_ipld::selector","ExploreRange traverses a list, and for each element in the…",6,null],[12,"start","forest_ipld::selector::Selector","",10,null],[12,"end","","",10,null],[12,"next","","",10,null],[13,"ExploreRecursive","forest_ipld::selector","ExploreRecursive traverses some structure recursively. To…",6,null],[12,"sequence","forest_ipld::selector::Selector","",11,null],[12,"limit","","",11,null],[12,"stop_at","","if a node matches, we won\'t match it nor explore its…",11,null],[12,"current","","Used to index current",11,null],[13,"ExploreUnion","forest_ipld::selector","ExploreUnion allows selection to continue with two or more…",6,null],[13,"ExploreRecursiveEdge","","ExploreRecursiveEdge is a special sentinel value which is…",6,null],[4,"RecursionLimit","","",null,null],[13,"None","","",12,null],[13,"Depth","","",12,null],[4,"Condition","","Condition is expresses a predicate with a boolean result.",null,null],[13,"HasField","","",13,null],[13,"HasValue","","",13,null],[13,"HasKind","","",13,null],[13,"IsLink","","",13,null],[13,"GreaterThan","","",13,null],[13,"LessThan","","",13,null],[13,"And","","",13,null],[13,"Or","","",13,null],[11,"walk_all","","Walks all nodes visited (not just matched nodes) and…",6,[[["option",4],["ipld",4]]]],[11,"walk_matching","","Walks a graph of Ipld nodes, executing the callback only…",6,[[["option",4],["ipld",4]]]],[11,"path","","Returns the path of the current progress",14,[[],["path",3]]],[11,"last_block","","Returns the last block information from a link traversal.",14,[[],[["option",4],["lastblockinfo",3]]]],[8,"LinkResolver","","",null,null],[10,"load_link","","Resolves a Cid link into it\'s respective Ipld node, if it…",15,[[["cid",3]],[["pin",3],["box",3]]]],[11,"interests","","Returns a vector of all sectors of interest, `None`…",6,[[],[["option",4],["vec",3]]]],[11,"explore","","Processes and returns resultant selector node",6,[[["pathsegment",4],["ipld",4]],[["option",4],["selector",4]]]],[11,"decide","","Returns true if matcher, false otherwise",6,[[]]],[0,"json","forest_ipld","",null,null],[3,"IpldJson","forest_ipld::json","Wrapper for serializing and deserializing a Ipld from JSON.",null,null],[12,"0","","",16,null],[3,"IpldJsonRef","","Wrapper for serializing a ipld reference to JSON.",null,null],[12,"0","","",17,null],[5,"serialize","","",null,[[["ipld",4]],["result",4]]],[5,"deserialize","","",null,[[],[["result",4],["ipld",4]]]],[14,"ipld","forest_ipld","Construct a `forest_ipld::Ipld` roughly matching JSON…",null,null],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"to_string","","",3,[[],["string",3]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"to_string","","",1,[[],["string",3]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","forest_ipld::selector","",14,[[]]],[11,"into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"from","forest_ipld::json","",16,[[]]],[11,"into","","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"from","","",17,[[]]],[11,"into","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"from","forest_ipld","",0,[[["cborerror",3]],["error",4]]],[11,"from","","",3,[[]]],[11,"from","","",1,[[]]],[11,"from","","",1,[[["string",3]]]],[11,"from","","",1,[[]]],[11,"clone","","",3,[[],["path",3]]],[11,"clone","","",1,[[],["pathsegment",4]]],[11,"clone","forest_ipld::selector","",5,[[],["visitreason",4]]],[11,"clone","","",4,[[],["lastblockinfo",3]]],[11,"clone","","",6,[[],["selector",4]]],[11,"clone","","",12,[[],["recursionlimit",4]]],[11,"clone","","",13,[[],["condition",4]]],[11,"clone","forest_ipld","",2,[[],["ipld",4]]],[11,"default","","",3,[[],["path",3]]],[11,"default","forest_ipld::selector","",14,[[],["progress",3]]],[11,"eq","forest_ipld","",0,[[["error",4]]]],[11,"ne","","",0,[[["error",4]]]],[11,"eq","","",3,[[["path",3]]]],[11,"ne","","",3,[[["path",3]]]],[11,"eq","","",1,[[["pathsegment",4]]]],[11,"ne","","",1,[[["pathsegment",4]]]],[11,"eq","forest_ipld::selector","",5,[[["visitreason",4]]]],[11,"eq","","",4,[[["lastblockinfo",3]]]],[11,"ne","","",4,[[["lastblockinfo",3]]]],[11,"eq","","",6,[[["selector",4]]]],[11,"ne","","",6,[[["selector",4]]]],[11,"eq","","",12,[[["recursionlimit",4]]]],[11,"ne","","",12,[[["recursionlimit",4]]]],[11,"eq","","",13,[[["condition",4]]]],[11,"eq","forest_ipld","",2,[[["ipld",4]]]],[11,"ne","","",2,[[["ipld",4]]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","forest_ipld::selector","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","forest_ipld","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"sub_assign","forest_ipld::selector","",12,[[]]],[11,"custom","forest_ipld","",0,[[["display",8]],["error",4]]],[11,"serialize","forest_ipld::selector","",6,[[],["result",4]]],[11,"serialize","","",12,[[],["result",4]]],[11,"serialize","","",13,[[],["result",4]]],[11,"serialize","forest_ipld","",2,[[],["result",4]]],[11,"serialize","forest_ipld::json","",16,[[],["result",4]]],[11,"serialize","","",17,[[],["result",4]]],[11,"deserialize","forest_ipld","",2,[[],["result",4]]],[11,"deserialize","","",1,[[],["result",4]]],[11,"deserialize","forest_ipld::selector","",6,[[],["result",4]]],[11,"deserialize","","",12,[[],["result",4]]],[11,"deserialize","","",13,[[],["result",4]]],[11,"deserialize","forest_ipld::json","",16,[[],["result",4]]]],"p":[[4,"Error"],[4,"PathSegment"],[4,"Ipld"],[3,"Path"],[3,"LastBlockInfo"],[4,"VisitReason"],[4,"Selector"],[13,"ExploreAll"],[13,"ExploreFields"],[13,"ExploreIndex"],[13,"ExploreRange"],[13,"ExploreRecursive"],[4,"RecursionLimit"],[4,"Condition"],[3,"Progress"],[8,"LinkResolver"],[3,"IpldJson"],[3,"IpldJsonRef"]]},\
"forest_json_utils":{"doc":"","i":[[3,"GoVecVisitor","forest_json_utils","Helper visitor to match Go\'s default behaviour of…",null,null],[11,"new","","",0,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"fmt","","",0,[[["formatter",3]],[["error",3],["result",4]]]],[11,"default","","",0,[[],["govecvisitor",3]]],[11,"expecting","","",0,[[["formatter",3]],["result",6]]],[11,"visit_seq","","",0,[[],[["vec",3],["result",4]]]],[11,"visit_none","","",0,[[],["result",4]]],[11,"visit_unit","","",0,[[],["result",4]]]],"p":[[3,"GoVecVisitor"]]},\
"forest_libp2p":{"doc":"","i":[[3,"Topic","forest_libp2p","A gossipsub topic.",null,null],[3,"ForestBehaviour","","",null,null],[3,"BlockSyncRequest","","The payload that gets sent to another node to request for…",null,null],[12,"start","","The tipset to start sync from",0,null],[12,"request_len","","The amount of epochs to sync by",0,null],[12,"options","","1 = Block only, 2 = Messages only, 3 = Blocks and Messages",0,null],[3,"Libp2pConfig","","",null,null],[12,"listening_multiaddr","","",1,null],[12,"bootstrap_peers","","",1,null],[12,"mdns","","",1,null],[12,"kademlia","","",1,null],[3,"Libp2pService","","The Libp2pService listens to events from the Libp2p swarm.",null,null],[12,"swarm","","",2,null],[4,"ForestBehaviourEvent","","",null,null],[13,"PeerDialed","","",3,null],[13,"PeerDisconnected","","",3,null],[13,"GossipMessage","","",3,null],[12,"source","forest_libp2p::ForestBehaviourEvent","",4,null],[12,"topics","","",4,null],[12,"message","","",4,null],[13,"BitswapReceivedBlock","forest_libp2p","",3,null],[13,"BitswapReceivedWant","","",3,null],[13,"HelloRequest","","",3,null],[12,"peer","forest_libp2p::ForestBehaviourEvent","",5,null],[12,"request","","",5,null],[12,"channel","","",5,null],[13,"HelloResponse","forest_libp2p","",3,null],[12,"peer","forest_libp2p::ForestBehaviourEvent","",6,null],[12,"request_id","","",6,null],[12,"response","","",6,null],[13,"BlockSyncRequest","forest_libp2p","",3,null],[12,"peer","forest_libp2p::ForestBehaviourEvent","",7,null],[12,"request","","",7,null],[12,"channel","","",7,null],[13,"BlockSyncResponse","forest_libp2p","",3,null],[12,"peer","forest_libp2p::ForestBehaviourEvent","",8,null],[12,"request_id","","",8,null],[12,"response","","",8,null],[4,"NetworkEvent","forest_libp2p","Events emitted by this Service",null,null],[13,"PubsubMessage","","",9,null],[12,"source","forest_libp2p::NetworkEvent","",10,null],[12,"topics","","",10,null],[12,"message","","",10,null],[13,"HelloRequest","forest_libp2p","",9,null],[12,"request","forest_libp2p::NetworkEvent","",11,null],[12,"channel","","",11,null],[13,"HelloResponse","forest_libp2p","",9,null],[12,"request_id","forest_libp2p::NetworkEvent","",12,null],[12,"response","","",12,null],[13,"BlockSyncRequest","forest_libp2p","",9,null],[12,"request","forest_libp2p::NetworkEvent","",13,null],[12,"channel","","",13,null],[13,"BlockSyncResponse","forest_libp2p","",9,null],[12,"request_id","forest_libp2p::NetworkEvent","",14,null],[12,"response","","",14,null],[13,"PeerDialed","forest_libp2p","",9,null],[12,"peer_id","forest_libp2p::NetworkEvent","",15,null],[13,"BitswapBlock","forest_libp2p","",9,null],[12,"cid","forest_libp2p::NetworkEvent","",16,null],[4,"NetworkMessage","forest_libp2p","Events into this Service",null,null],[13,"PubsubMessage","","",17,null],[12,"topic","forest_libp2p::NetworkMessage","",18,null],[12,"message","","",18,null],[13,"BlockSyncRequest","forest_libp2p","",17,null],[12,"peer_id","forest_libp2p::NetworkMessage","",19,null],[12,"request","","",19,null],[12,"response_channel","","",19,null],[13,"HelloRequest","forest_libp2p","",17,null],[12,"peer_id","forest_libp2p::NetworkMessage","",20,null],[12,"request","","",20,null],[5,"build_transport","forest_libp2p","Builds the transport stack that LibP2P will communicate over",null,[[["keypair",4]],[["boxed",3],["error",3]]]],[5,"get_keypair","","Fetch keypair from disk, returning none if it cannot be…",null,[[],[["option",4],["keypair",4]]]],[11,"new","","",21,[[["keypair",4],["libp2pconfig",3]]]],[11,"bootstrap","","Bootstrap Kademlia network",21,[[],[["string",3],["queryid",3],["result",4]]]],[11,"publish","","Publish data over the gossip network.",21,[[["topic",3]],[["result",4],["publisherror",4]]]],[11,"subscribe","","Subscribe to a gossip topic.",21,[[["topic",3]]]],[11,"send_rpc_request","","Send an RPC request or response to some peer.",21,[[["rpcrequest",4],["peerid",3]],["requestid",3]]],[11,"add_peer","","Adds peer to the peer set.",21,[[["peerid",3]]]],[11,"remove_peer","","Adds peer to the peer set.",21,[[["peerid",3]]]],[11,"peers","","Adds peer to the peer set.",21,[[],["hashset",3]]],[11,"send_block","","Send a block to a peer over bitswap",21,[[["box",3],["peerid",3],["cid",3]],[["box",3],["result",4]]]],[11,"want_block","","Send a request for data over bitswap",21,[[["priority",6],["cid",3]],[["box",3],["result",4]]]],[11,"cancel_block","","Cancel a bitswap request",21,[[["cid",3]],[["box",3],["result",4]]]],[0,"blocksync","","",null,null],[3,"BlockSyncRequest","forest_libp2p::blocksync","The payload that gets sent to another node to request for…",null,null],[12,"start","","The tipset to start sync from",0,null],[12,"request_len","","The amount of epochs to sync by",0,null],[12,"options","","1 = Block only, 2 = Messages only, 3 = Blocks and Messages",0,null],[3,"BlockSyncResponse","","The response to a BlockSync request.",null,null],[12,"status","","Error code",22,null],[12,"message","","Status message indicating failure reason",22,null],[12,"chain","","The tipsets requested",22,null],[3,"CompactedMessages","","Contains all bls and secp messages and their indexes per…",null,null],[12,"bls_msgs","","Unsigned bls messages",23,null],[12,"bls_msg_includes","","Describes which block each message belongs to",23,null],[12,"secp_msgs","","Signed secp messages",23,null],[12,"secp_msg_includes","","Describes which block each message belongs to",23,null],[3,"TipsetBundle","","Contains the blocks and messages in a particular tipset",null,null],[12,"blocks","","The blocks in the tipset",24,null],[12,"messages","","Compressed messages format",24,null],[3,"BlockSyncProtocolName","","Type to satisfy `ProtocolName` interface for BlockSync RPC.",null,null],[3,"BlockSyncCodec","","BlockSync protocol codec to be used within the RPC service.",null,null],[4,"BlockSyncResponseStatus","","Status codes of a blocksync response.",null,null],[13,"Success","","All is well.",25,null],[13,"PartialResponse","","We could not fetch all blocks requested (but at least we…",25,null],[13,"BlockNotFound","","Request.Start not found.",25,null],[13,"GoAway","","Requester is making too many requests.",25,null],[13,"InternalError","","Internal error occured.",25,null],[13,"BadRequest","","Request was bad",25,null],[13,"Other","","Other undefined response code.",25,null],[5,"make_blocksync_response","","Builds blocksync response out of chain data.",null,[[["blocksyncrequest",3]],["blocksyncresponse",3]]],[11,"include_blocks","forest_libp2p","If a request expects blocks to be included in response.",0,[[]]],[11,"include_messages","","If a request expects messages to be included in response.",0,[[]]],[11,"into_result","forest_libp2p::blocksync","Converts blocksync response into result. Returns an error…",22,[[],[["vec",3],["string",3],["result",4]]]],[17,"BLOCKS","","Blocksync request options",null,null],[17,"MESSAGES","","",null,null],[17,"BLOCKS_MESSAGES","","",null,null],[17,"BLOCKSYNC_PROTOCOL_ID","","",null,null],[0,"hello","forest_libp2p","",null,null],[3,"HelloRequest","forest_libp2p::hello","Hello message…",null,null],[12,"heaviest_tip_set","","",26,null],[12,"heaviest_tipset_height","","",26,null],[12,"heaviest_tipset_weight","","",26,null],[12,"genesis_hash","","",26,null],[3,"HelloResponse","","Response to a Hello",null,null],[12,"arrival","","Time of arrival in unix nanoseconds",27,null],[12,"sent","","Time sent in unix nanoseconds",27,null],[3,"HelloProtocolName","","Type to satisfy `ProtocolName` interface for BlockSync RPC.",null,null],[3,"HelloCodec","","Hello protocol codec to be used within the RPC service.",null,null],[17,"HELLO_PROTOCOL_ID","","",null,null],[0,"rpc","forest_libp2p","",null,null],[3,"RequestId","forest_libp2p::rpc","The (local) ID of an outgoing request.",null,null],[12,"0","","",28,null],[3,"ResponseChannel","","A channel for sending a response to an inbound request.",null,null],[12,"peer","","",29,null],[12,"sender","","",29,null],[4,"RPCResponse","","RPCResponse payloads for request/response calls",null,null],[13,"BlockSync","","",30,null],[13,"Hello","","",30,null],[4,"RPCRequest","","RPCRequest payloads for request/response calls",null,null],[13,"BlockSync","","",31,null],[13,"Hello","","",31,null],[11,"new","forest_libp2p","Constructs a Libp2pService",2,[[["keypair",4],["libp2pconfig",3],["arc",3]]]],[11,"run","","Starts the `Libp2pService` networking stack. This Future…",2,[[]]],[11,"network_sender","","Returns a `Sender` allowing you to send messages over…",2,[[],[["networkmessage",4],["sender",3]]]],[11,"network_receiver","","Returns a `Receiver` to listen to network events",2,[[],[["networkevent",4],["receiver",3]]]],[17,"MESSAGES","","",null,null],[17,"PUBSUB_BLOCK_STR","","",null,null],[17,"PUBSUB_MSG_STR","","",null,null],[11,"from","","",32,[[]]],[11,"into","","",32,[[]]],[11,"to_owned","","",32,[[]]],[11,"clone_into","","",32,[[]]],[11,"to_string","","",32,[[],["string",3]]],[11,"borrow","","",32,[[]]],[11,"borrow_mut","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"try_into","","",32,[[],["result",4]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"vzip","","",32,[[]]],[11,"equivalent","","",32,[[]]],[11,"from","","",21,[[]]],[11,"into","","",21,[[]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"vzip","","",21,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"vzip","","",9,[[]]],[11,"from","","",17,[[]]],[11,"into","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"vzip","","",17,[[]]],[11,"from","forest_libp2p::blocksync","",22,[[]]],[11,"into","","",22,[[]]],[11,"to_owned","","",22,[[]]],[11,"clone_into","","",22,[[]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"vzip","","",22,[[]]],[11,"from","","",23,[[]]],[11,"into","","",23,[[]]],[11,"to_owned","","",23,[[]]],[11,"clone_into","","",23,[[]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"vzip","","",23,[[]]],[11,"from","","",24,[[]]],[11,"into","","",24,[[]]],[11,"to_owned","","",24,[[]]],[11,"clone_into","","",24,[[]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"vzip","","",24,[[]]],[11,"from","","",33,[[]]],[11,"into","","",33,[[]]],[11,"to_owned","","",33,[[]]],[11,"clone_into","","",33,[[]]],[11,"borrow","","",33,[[]]],[11,"borrow_mut","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"try_into","","",33,[[],["result",4]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"protocol_name","","",33,[[]]],[11,"vzip","","",33,[[]]],[11,"from","","",34,[[]]],[11,"into","","",34,[[]]],[11,"to_owned","","",34,[[]]],[11,"clone_into","","",34,[[]]],[11,"borrow","","",34,[[]]],[11,"borrow_mut","","",34,[[]]],[11,"try_from","","",34,[[],["result",4]]],[11,"try_into","","",34,[[],["result",4]]],[11,"type_id","","",34,[[],["typeid",3]]],[11,"vzip","","",34,[[]]],[11,"from","","",25,[[]]],[11,"into","","",25,[[]]],[11,"to_owned","","",25,[[]]],[11,"clone_into","","",25,[[]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"vzip","","",25,[[]]],[11,"from","forest_libp2p::hello","",26,[[]]],[11,"into","","",26,[[]]],[11,"to_owned","","",26,[[]]],[11,"clone_into","","",26,[[]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"vzip","","",26,[[]]],[11,"from","","",27,[[]]],[11,"into","","",27,[[]]],[11,"to_owned","","",27,[[]]],[11,"clone_into","","",27,[[]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"vzip","","",27,[[]]],[11,"from","","",35,[[]]],[11,"into","","",35,[[]]],[11,"to_owned","","",35,[[]]],[11,"clone_into","","",35,[[]]],[11,"borrow","","",35,[[]]],[11,"borrow_mut","","",35,[[]]],[11,"try_from","","",35,[[],["result",4]]],[11,"try_into","","",35,[[],["result",4]]],[11,"type_id","","",35,[[],["typeid",3]]],[11,"protocol_name","","",35,[[]]],[11,"vzip","","",35,[[]]],[11,"from","","",36,[[]]],[11,"into","","",36,[[]]],[11,"to_owned","","",36,[[]]],[11,"clone_into","","",36,[[]]],[11,"borrow","","",36,[[]]],[11,"borrow_mut","","",36,[[]]],[11,"try_from","","",36,[[],["result",4]]],[11,"try_into","","",36,[[],["result",4]]],[11,"type_id","","",36,[[],["typeid",3]]],[11,"vzip","","",36,[[]]],[11,"from","forest_libp2p::rpc","",28,[[]]],[11,"into","","",28,[[]]],[11,"to_owned","","",28,[[]]],[11,"clone_into","","",28,[[]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"vzip","","",28,[[]]],[11,"equivalent","","",28,[[]]],[11,"get_hash","","",28,[[]]],[11,"from","","",29,[[]]],[11,"into","","",29,[[]]],[11,"to_owned","","",29,[[]]],[11,"clone_into","","",29,[[]]],[11,"borrow","","",29,[[]]],[11,"borrow_mut","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"try_into","","",29,[[],["result",4]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"vzip","","",29,[[]]],[11,"from","","",30,[[]]],[11,"into","","",30,[[]]],[11,"to_owned","","",30,[[]]],[11,"clone_into","","",30,[[]]],[11,"borrow","","",30,[[]]],[11,"borrow_mut","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"try_into","","",30,[[],["result",4]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"vzip","","",30,[[]]],[11,"from","","",31,[[]]],[11,"into","","",31,[[]]],[11,"to_owned","","",31,[[]]],[11,"clone_into","","",31,[[]]],[11,"borrow","","",31,[[]]],[11,"borrow_mut","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"try_into","","",31,[[],["result",4]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"vzip","","",31,[[]]],[11,"cmp","forest_libp2p","",32,[[["topic",3]],["ordering",4]]],[11,"partial_cmp","","",32,[[["topic",3]],[["ordering",4],["option",4]]]],[11,"lt","","",32,[[["topic",3]]]],[11,"le","","",32,[[["topic",3]]]],[11,"gt","","",32,[[["topic",3]]]],[11,"ge","","",32,[[["topic",3]]]],[11,"eq","","",32,[[["topic",3]]]],[11,"ne","","",32,[[["topic",3]]]],[11,"clone","","",32,[[],["topic",3]]],[11,"fmt","","",32,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",32,[[["formatter",3]],[["error",3],["result",4]]]],[11,"clone","forest_libp2p::rpc","",28,[[],["requestid",3]]],[11,"clone","","",29,[[],["responsechannel",3]]],[11,"fmt","","",28,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",29,[[["formatter",3]],[["error",3],["result",4]]]],[11,"eq","","",28,[[["requestid",3]]]],[11,"ne","","",28,[[["requestid",3]]]],[11,"hash","","",28,[[]]],[11,"clone","forest_libp2p","",0,[[],["blocksyncrequest",3]]],[11,"clone","forest_libp2p::blocksync","",25,[[],["blocksyncresponsestatus",4]]],[11,"clone","","",22,[[],["blocksyncresponse",3]]],[11,"clone","","",23,[[],["compactedmessages",3]]],[11,"clone","","",24,[[],["tipsetbundle",3]]],[11,"clone","","",33,[[],["blocksyncprotocolname",3]]],[11,"clone","","",34,[[],["blocksynccodec",3]]],[11,"clone","forest_libp2p::hello","",26,[[],["hellorequest",3]]],[11,"clone","","",27,[[],["helloresponse",3]]],[11,"clone","","",35,[[],["helloprotocolname",3]]],[11,"clone","","",36,[[],["hellocodec",3]]],[11,"clone","forest_libp2p::rpc","",30,[[],["rpcresponse",4]]],[11,"clone","","",31,[[],["rpcrequest",4]]],[11,"clone","forest_libp2p","",9,[[],["networkevent",4]]],[11,"default","forest_libp2p::blocksync","",24,[[],["tipsetbundle",3]]],[11,"default","","",33,[[],["blocksyncprotocolname",3]]],[11,"default","","",34,[[],["blocksynccodec",3]]],[11,"default","forest_libp2p","",1,[[]]],[11,"default","forest_libp2p::hello","",26,[[],["hellorequest",3]]],[11,"default","","",35,[[],["helloprotocolname",3]]],[11,"default","","",36,[[],["hellocodec",3]]],[11,"eq","forest_libp2p","",0,[[["blocksyncrequest",3]]]],[11,"ne","","",0,[[["blocksyncrequest",3]]]],[11,"eq","forest_libp2p::blocksync","",25,[[["blocksyncresponsestatus",4]]]],[11,"ne","","",25,[[["blocksyncresponsestatus",4]]]],[11,"eq","","",22,[[["blocksyncresponse",3]]]],[11,"ne","","",22,[[["blocksyncresponse",3]]]],[11,"eq","","",23,[[["compactedmessages",3]]]],[11,"ne","","",23,[[["compactedmessages",3]]]],[11,"eq","","",24,[[["tipsetbundle",3]]]],[11,"ne","","",24,[[["tipsetbundle",3]]]],[11,"eq","","",33,[[["blocksyncprotocolname",3]]]],[11,"eq","forest_libp2p::hello","",26,[[["hellorequest",3]]]],[11,"ne","","",26,[[["hellorequest",3]]]],[11,"eq","","",27,[[["helloresponse",3]]]],[11,"ne","","",27,[[["helloresponse",3]]]],[11,"eq","","",35,[[["helloprotocolname",3]]]],[11,"eq","forest_libp2p::rpc","",30,[[["rpcresponse",4]]]],[11,"ne","","",30,[[["rpcresponse",4]]]],[11,"eq","","",31,[[["rpcrequest",4]]]],[11,"ne","","",31,[[["rpcrequest",4]]]],[11,"fmt","forest_libp2p","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","forest_libp2p::blocksync","",25,[[["formatter",3]],["result",6]]],[11,"fmt","","",22,[[["formatter",3]],["result",6]]],[11,"fmt","","",23,[[["formatter",3]],["result",6]]],[11,"fmt","","",24,[[["formatter",3]],["result",6]]],[11,"fmt","","",33,[[["formatter",3]],["result",6]]],[11,"fmt","","",34,[[["formatter",3]],["result",6]]],[11,"fmt","forest_libp2p","",1,[[["formatter",3]],["result",6]]],[11,"fmt","forest_libp2p::hello","",26,[[["formatter",3]],["result",6]]],[11,"fmt","","",27,[[["formatter",3]],["result",6]]],[11,"fmt","","",35,[[["formatter",3]],["result",6]]],[11,"fmt","","",36,[[["formatter",3]],["result",6]]],[11,"fmt","forest_libp2p::rpc","",30,[[["formatter",3]],["result",6]]],[11,"fmt","","",31,[[["formatter",3]],["result",6]]],[11,"fmt","forest_libp2p","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",17,[[["formatter",3]],["result",6]]],[11,"try_from","forest_libp2p::blocksync","",23,[[["tipsetbundle",3]],["result",4]]],[11,"serialize","forest_libp2p","",0,[[],["result",4]]],[11,"serialize","forest_libp2p::blocksync","",25,[[],["result",4]]],[11,"serialize","","",22,[[],["result",4]]],[11,"serialize","","",23,[[],["result",4]]],[11,"serialize","","",24,[[],["result",4]]],[11,"serialize","forest_libp2p::hello","",26,[[],["result",4]]],[11,"serialize","","",27,[[],["result",4]]],[11,"deserialize","forest_libp2p","",0,[[],["result",4]]],[11,"deserialize","forest_libp2p::blocksync","",25,[[],["result",4]]],[11,"deserialize","","",22,[[],["result",4]]],[11,"deserialize","","",23,[[],["result",4]]],[11,"deserialize","","",24,[[],["result",4]]],[11,"deserialize","forest_libp2p","",1,[[],["result",4]]],[11,"deserialize","forest_libp2p::hello","",26,[[],["result",4]]],[11,"deserialize","","",27,[[],["result",4]]],[11,"protocol_name","forest_libp2p::blocksync","",33,[[]]],[11,"protocol_name","forest_libp2p::hello","",35,[[]]],[11,"new_handler","forest_libp2p","",21,[[]]],[11,"addresses_of_peer","","",21,[[["peerid",3]],[["multiaddr",3],["vec",3]]]],[11,"inject_connected","","",21,[[["peerid",3]]]],[11,"inject_disconnected","","",21,[[["peerid",3]]]],[11,"inject_connection_established","","",21,[[["connectionid",3],["peerid",3],["connectedpoint",4]]]],[11,"inject_address_change","","",21,[[["connectionid",3],["peerid",3],["connectedpoint",4]]]],[11,"inject_connection_closed","","",21,[[["connectionid",3],["peerid",3],["connectedpoint",4]]]],[11,"inject_addr_reach_failure","","",21,[[["multiaddr",3],["option",4],["peerid",3],["error",8]]]],[11,"inject_dial_failure","","",21,[[["peerid",3]]]],[11,"inject_new_listen_addr","","",21,[[["multiaddr",3]]]],[11,"inject_expired_listen_addr","","",21,[[["multiaddr",3]]]],[11,"inject_new_external_addr","","",21,[[["multiaddr",3]]]],[11,"inject_listener_error","","",21,[[["listenerid",3],["error",8]]]],[11,"inject_listener_closed","","",21,[[["listenerid",3],["error",3],["result",4]]]],[11,"inject_event","","",21,[[["peerid",3],["connectionid",3]]]],[11,"poll","","",21,[[["context",3]],[["poll",4],["networkbehaviouraction",4]]]],[11,"inject_event","","",21,[[["mdnsevent",4]]]],[11,"inject_event","","",21,[[["kademliaevent",4]]]],[11,"inject_event","","",21,[[["bitswapevent",4]]]],[11,"inject_event","","",21,[[["gossipsubevent",4]]]],[11,"inject_event","","",21,[[["pingevent",3]]]],[11,"inject_event","","",21,[[["identifyevent",4]]]],[11,"inject_event","","",21,[[["hellorequest",3],["requestresponseevent",4],["helloresponse",3]]]],[11,"inject_event","","",21,[[["requestresponseevent",4],["blocksyncrequest",3],["blocksyncresponse",3]]]],[11,"read_request","forest_libp2p::blocksync","",34,[[],[["box",3],["pin",3]]]],[11,"read_response","","",34,[[],[["pin",3],["box",3]]]],[11,"write_request","","",34,[[],[["pin",3],["box",3]]]],[11,"write_response","","",34,[[],[["pin",3],["box",3]]]],[11,"read_request","forest_libp2p::hello","",36,[[],[["box",3],["pin",3]]]],[11,"read_response","","",36,[[],[["pin",3],["box",3]]]],[11,"write_request","","",36,[[],[["pin",3],["box",3]]]],[11,"write_response","","",36,[[],[["pin",3],["box",3]]]],[11,"new","forest_libp2p","",32,[[["string",3]],["topic",3]]],[11,"sha256_hash","","Creates a `TopicHash` by SHA256 hashing the topic then…",32,[[],["topichash",3]]],[11,"no_hash","","Creates a `TopicHash` as a raw string.",32,[[],["topichash",3]]],[11,"is_open","forest_libp2p::rpc","Checks whether the response channel is still open, i.e.…",29,[[]]],[11,"send","","Sends a response through the channel. If the receiving end…",29,[[]]]],"p":[[3,"BlockSyncRequest"],[3,"Libp2pConfig"],[3,"Libp2pService"],[4,"ForestBehaviourEvent"],[13,"GossipMessage"],[13,"HelloRequest"],[13,"HelloResponse"],[13,"BlockSyncRequest"],[13,"BlockSyncResponse"],[4,"NetworkEvent"],[13,"PubsubMessage"],[13,"HelloRequest"],[13,"HelloResponse"],[13,"BlockSyncRequest"],[13,"BlockSyncResponse"],[13,"PeerDialed"],[13,"BitswapBlock"],[4,"NetworkMessage"],[13,"PubsubMessage"],[13,"BlockSyncRequest"],[13,"HelloRequest"],[3,"ForestBehaviour"],[3,"BlockSyncResponse"],[3,"CompactedMessages"],[3,"TipsetBundle"],[4,"BlockSyncResponseStatus"],[3,"HelloRequest"],[3,"HelloResponse"],[3,"RequestId"],[3,"ResponseChannel"],[4,"RPCResponse"],[4,"RPCRequest"],[3,"Topic"],[3,"BlockSyncProtocolName"],[3,"BlockSyncCodec"],[3,"HelloProtocolName"],[3,"HelloCodec"]]},\
"forest_message":{"doc":"","i":[[0,"chain_message","forest_message","",null,null],[4,"ChainMessage","forest_message::chain_message","Enum to encpasulate signed and unsigned messages. Useful…",null,null],[13,"Unsigned","","",0,null],[13,"Signed","","",0,null],[11,"message","","",0,[[],["unsignedmessage",3]]],[0,"message_receipt","forest_message","",null,null],[3,"MessageReceipt","forest_message::message_receipt","Result of a state transition from a message",null,null],[12,"exit_code","","",1,null],[12,"return_data","","",1,null],[12,"gas_used","","",1,null],[0,"json","","",null,null],[3,"MessageReceiptJson","forest_message::message_receipt::json","Wrapper for serializing and deserializing a SignedMessage…",null,null],[12,"0","","",2,null],[3,"MessageReceiptJsonRef","","Wrapper for serializing a SignedMessage reference to JSON.",null,null],[12,"0","","",3,null],[5,"serialize","","",null,[[["messagereceipt",3]],["result",4]]],[5,"deserialize","","",null,[[],[["result",4],["messagereceipt",3]]]],[0,"vec","","",null,null],[5,"serialize","forest_message::message_receipt::json::vec","",null,[[],["result",4]]],[5,"deserialize","","",null,[[],[["result",4],["vec",3]]]],[0,"opt","forest_message::message_receipt::json","",null,null],[5,"serialize","forest_message::message_receipt::json::opt","",null,[[["option",4]],["result",4]]],[5,"deserialize","","",null,[[],[["option",4],["result",4]]]],[0,"signed_message","forest_message","",null,null],[3,"SignedMessage","forest_message::signed_message","Represents a wrapped message with signature bytes",null,null],[12,"message","","",4,null],[12,"signature","","",4,null],[0,"json","","",null,null],[3,"SignedMessageJson","forest_message::signed_message::json","Wrapper for serializing and deserializing a SignedMessage…",null,null],[12,"0","","",5,null],[3,"SignedMessageJsonRef","","Wrapper for serializing a SignedMessage reference to JSON.",null,null],[12,"0","","",6,null],[5,"serialize","","",null,[[["signedmessage",3]],["result",4]]],[5,"deserialize","","",null,[[],[["result",4],["signedmessage",3]]]],[0,"vec","","",null,null],[5,"serialize","forest_message::signed_message::json::vec","",null,[[],["result",4]]],[5,"deserialize","","",null,[[],[["result",4],["vec",3]]]],[11,"new","forest_message::signed_message","Generate new signed message from an unsigned message and a…",4,[[["unsignedmessage",3]],[["result",4],["cryptoerror",4]]]],[11,"new_from_parts","","Generate a new signed message from fields",4,[[["unsignedmessage",3],["signature",3]],[["signedmessage",3],["result",4],["string",3]]]],[11,"message","","Returns reference to the unsigned message.",4,[[],["unsignedmessage",3]]],[11,"signature","","Returns signature of the signed message.",4,[[],["signature",3]]],[11,"into_message","","Consumes self and returns it\'s unsigned message",4,[[],["unsignedmessage",3]]],[11,"is_bls","","Checks if the signed message is a BLS message.",4,[[]]],[11,"is_secp256k1","","Checks if the signed message is a Secp256k1 message.",4,[[]]],[11,"verify","","Verifies that the from address of the message generated…",4,[[],[["result",4],["string",3]]]],[0,"unsigned_message","forest_message","",null,null],[3,"UnsignedMessage","forest_message::unsigned_message","Default Unsigned VM message type which includes all data…",null,null],[12,"version","","",7,null],[12,"from","","",7,null],[12,"to","","",7,null],[12,"sequence","","",7,null],[12,"value","","",7,null],[12,"method_num","","",7,null],[12,"params","","",7,null],[12,"gas_limit","","",7,null],[12,"gas_fee_cap","","",7,null],[12,"gas_premium","","",7,null],[3,"MessageBuilder","","Builder for `UnsignedMessage`.",null,null],[0,"json","","",null,null],[3,"UnsignedMessageJson","forest_message::unsigned_message::json","Wrapper for serializing and deserializing a…",null,null],[12,"0","","",8,null],[3,"UnsignedMessageJsonRef","","Wrapper for serializing a UnsignedMessage reference to JSON.",null,null],[12,"0","","",9,null],[5,"serialize","","",null,[[["unsignedmessage",3]],["result",4]]],[5,"deserialize","","",null,[[],[["unsignedmessage",3],["result",4]]]],[0,"vec","","",null,null],[5,"serialize","forest_message::unsigned_message::json::vec","",null,[[],["result",4]]],[5,"deserialize","","",null,[[],[["vec",3],["result",4]]]],[11,"version","forest_message::unsigned_message","",10,[[]]],[11,"from","","",10,[[["address",3]]]],[11,"to","","",10,[[["address",3]]]],[11,"sequence","","",10,[[]]],[11,"value","","",10,[[["tokenamount",6]]]],[11,"method_num","","",10,[[["methodnum",6]]]],[11,"params","","",10,[[["serialized",3]]]],[11,"gas_limit","","",10,[[]]],[11,"gas_fee_cap","","",10,[[["tokenamount",6]]]],[11,"gas_premium","","",10,[[["tokenamount",6]]]],[11,"build","","Builds a new `UnsignedMessage`.",10,[[],[["unsignedmessage",3],["result",4],["string",3]]]],[11,"builder","","",7,[[],["messagebuilder",3]]],[11,"to_signing_bytes","","Helper function to convert the message into signing bytes.…",7,[[],["vec",3]]],[8,"Message","forest_message","",null,null],[10,"from","","Returns the from address of the message",11,[[],["address",3]]],[10,"to","","Returns the destination address of the message",11,[[],["address",3]]],[10,"sequence","","Returns the message sequence or nonce",11,[[]]],[10,"value","","Returns the amount sent in message",11,[[],["tokenamount",6]]],[10,"method_num","","Returns the method number to be called",11,[[],["methodnum",6]]],[10,"params","","Returns the encoded parameters for the method call",11,[[],["serialized",3]]],[10,"set_gas_limit","","sets the gas limit for the message",11,[[]]],[10,"set_sequence","","sets a new sequence to the message",11,[[]]],[10,"gas_limit","","Returns the gas limit for the message",11,[[]]],[10,"required_funds","","Returns the required funds for the message",11,[[],["tokenamount",6]]],[10,"gas_fee_cap","","gets gas fee cap for the message",11,[[],["tokenamount",6]]],[10,"gas_premium","","gets gas premium for the message",11,[[],["tokenamount",6]]],[10,"set_gas_fee_cap","","sets the gas fee cap",11,[[["tokenamount",6]]]],[10,"set_gas_premium","","sets the gas premium",11,[[["tokenamount",6]]]],[11,"from","forest_message::chain_message","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","forest_message::message_receipt","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","forest_message::message_receipt::json","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"from","forest_message::signed_message","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"from","forest_message::signed_message::json","",5,[[]]],[11,"into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"vzip","","",5,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"vzip","","",6,[[]]],[11,"from","forest_message::unsigned_message","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"vzip","","",7,[[]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"vzip","","",10,[[]]],[11,"from","forest_message::unsigned_message::json","",8,[[]]],[11,"into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"vzip","","",8,[[]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"vzip","","",9,[[]]],[11,"from","forest_message::chain_message","",0,[[],["address",3]]],[11,"to","","",0,[[],["address",3]]],[11,"sequence","","",0,[[]]],[11,"value","","",0,[[],["tokenamount",6]]],[11,"method_num","","",0,[[],["methodnum",6]]],[11,"params","","",0,[[],["serialized",3]]],[11,"gas_limit","","",0,[[]]],[11,"set_gas_limit","","",0,[[]]],[11,"set_sequence","","",0,[[]]],[11,"required_funds","","",0,[[],["tokenamount",6]]],[11,"gas_fee_cap","","",0,[[],["tokenamount",6]]],[11,"gas_premium","","",0,[[],["tokenamount",6]]],[11,"set_gas_fee_cap","","",0,[[["tokenamount",6]]]],[11,"set_gas_premium","","",0,[[["tokenamount",6]]]],[11,"from","forest_message::signed_message","",4,[[],["address",3]]],[11,"to","","",4,[[],["address",3]]],[11,"sequence","","",4,[[]]],[11,"value","","",4,[[],["tokenamount",6]]],[11,"method_num","","",4,[[],["methodnum",6]]],[11,"params","","",4,[[],["serialized",3]]],[11,"gas_limit","","",4,[[]]],[11,"set_gas_limit","","",4,[[]]],[11,"set_sequence","","",4,[[]]],[11,"required_funds","","",4,[[],["tokenamount",6]]],[11,"gas_fee_cap","","",4,[[],["tokenamount",6]]],[11,"gas_premium","","",4,[[],["tokenamount",6]]],[11,"set_gas_fee_cap","","",4,[[["tokenamount",6]]]],[11,"set_gas_premium","","",4,[[["tokenamount",6]]]],[11,"from","forest_message::unsigned_message","",7,[[],["address",3]]],[11,"to","","",7,[[],["address",3]]],[11,"sequence","","",7,[[]]],[11,"value","","",7,[[],["tokenamount",6]]],[11,"method_num","","",7,[[],["methodnum",6]]],[11,"params","","",7,[[],["serialized",3]]],[11,"set_sequence","","",7,[[]]],[11,"gas_limit","","",7,[[]]],[11,"gas_fee_cap","","",7,[[],["tokenamount",6]]],[11,"gas_premium","","",7,[[],["tokenamount",6]]],[11,"set_gas_limit","","",7,[[]]],[11,"set_gas_fee_cap","","",7,[[["tokenamount",6]]]],[11,"set_gas_premium","","",7,[[["tokenamount",6]]]],[11,"required_funds","","",7,[[],["tokenamount",6]]],[11,"from","forest_message::message_receipt","",1,[[["messagereceiptjson",3]]]],[11,"from","forest_message::message_receipt::json","",2,[[["messagereceipt",3]]]],[11,"from","forest_message::signed_message","",4,[[["signedmessagejson",3]]]],[11,"from","forest_message::unsigned_message","",7,[[["unsignedmessagejson",3]]]],[11,"from","forest_message::unsigned_message::json","",8,[[["unsignedmessage",3]]]],[11,"clone","forest_message::chain_message","",0,[[],["chainmessage",4]]],[11,"clone","forest_message::message_receipt","",1,[[],["messagereceipt",3]]],[11,"clone","forest_message::signed_message","",4,[[],["signedmessage",3]]],[11,"clone","forest_message::unsigned_message","",7,[[],["unsignedmessage",3]]],[11,"clone","","",10,[[],["messagebuilder",3]]],[11,"default","","",10,[[],["messagebuilder",3]]],[11,"eq","forest_message::message_receipt","",1,[[["messagereceipt",3]]]],[11,"ne","","",1,[[["messagereceipt",3]]]],[11,"eq","forest_message::signed_message","",4,[[["signedmessage",3]]]],[11,"ne","","",4,[[["signedmessage",3]]]],[11,"eq","forest_message::unsigned_message","",7,[[["unsignedmessage",3]]]],[11,"ne","","",7,[[["unsignedmessage",3]]]],[11,"fmt","forest_message::chain_message","",0,[[["formatter",3]],["result",6]]],[11,"fmt","forest_message::message_receipt","",1,[[["formatter",3]],["result",6]]],[11,"fmt","forest_message::signed_message","",4,[[["formatter",3]],["result",6]]],[11,"fmt","forest_message::unsigned_message","",7,[[["formatter",3]],["result",6]]],[11,"fmt","forest_message::unsigned_message::json","",8,[[["formatter",3]],["result",6]]],[11,"hash","forest_message::chain_message","",0,[[]]],[11,"hash","forest_message::signed_message","",4,[[]]],[11,"hash","forest_message::unsigned_message","",7,[[]]],[11,"serialize","forest_message::chain_message","",0,[[],["result",4]]],[11,"serialize","forest_message::message_receipt","",1,[[],["result",4]]],[11,"serialize","forest_message::message_receipt::json","",2,[[],["result",4]]],[11,"serialize","","",3,[[],["result",4]]],[11,"serialize","forest_message::signed_message","",4,[[],["result",4]]],[11,"serialize","forest_message::signed_message::json","",5,[[],["result",4]]],[11,"serialize","","",6,[[],["result",4]]],[11,"serialize","forest_message::unsigned_message","",7,[[],["result",4]]],[11,"serialize","forest_message::unsigned_message::json","",8,[[],["result",4]]],[11,"serialize","","",9,[[],["result",4]]],[11,"deserialize","forest_message::chain_message","",0,[[],["result",4]]],[11,"deserialize","forest_message::message_receipt","",1,[[],["result",4]]],[11,"deserialize","forest_message::message_receipt::json","",2,[[],["result",4]]],[11,"deserialize","forest_message::signed_message","",4,[[],["result",4]]],[11,"deserialize","forest_message::signed_message::json","",5,[[],["result",4]]],[11,"deserialize","forest_message::unsigned_message","",7,[[],["result",4]]],[11,"deserialize","forest_message::unsigned_message::json","",8,[[],["result",4]]],[11,"cid","forest_message::chain_message","Returns the content identifier of the raw block of data…",0,[[],[["result",4],["cid",3],["error",3]]]],[11,"marshal_cbor","forest_message::signed_message","",4,[[],[["vec",3],["error",3],["result",4]]]]],"p":[[4,"ChainMessage"],[3,"MessageReceipt"],[3,"MessageReceiptJson"],[3,"MessageReceiptJsonRef"],[3,"SignedMessage"],[3,"SignedMessageJson"],[3,"SignedMessageJsonRef"],[3,"UnsignedMessage"],[3,"UnsignedMessageJson"],[3,"UnsignedMessageJsonRef"],[3,"MessageBuilder"],[8,"Message"]]},\
"forest_vm":{"doc":"","i":[[3,"ActorState","forest_vm","State of all actor implementations",null,null],[12,"code","","",0,null],[12,"state","","",0,null],[12,"sequence","","",0,null],[12,"balance","","",0,null],[3,"ActorError","","The error type that gets returned by actor method calls.",null,null],[3,"InvocInput","","Input variables for actor method invocation.",null,null],[12,"to","","",1,null],[12,"method","","",1,null],[12,"params","","",1,null],[12,"value","","",1,null],[3,"Serialized","","Serialized bytes to be used as parameters into actor methods",null,null],[3,"EMPTY_ARR_BYTES","","Cbor bytes of an empty array serialized.",null,null],[3,"EMPTY_ARR_CID","","Cid of the empty array Cbor bytes (`EMPTY_ARR_BYTES`).",null,null],[4,"ExitCode","","ExitCode defines the exit code from the VM execution",null,null],[13,"Ok","","",2,null],[13,"SysErrSenderInvalid","","Indicates failure to find an actor in the state tree.",2,null],[13,"SysErrSenderStateInvalid","","Indicates failure to find the code for an actor.",2,null],[13,"SysErrInvalidMethod","","Indicates failure to find a method in an actor.",2,null],[13,"SysErrInvalidParameters","","Indicates syntactically invalid parameters for a method.",2,null],[13,"SysErrInvalidReceiver","","Indicates a message sender has insufficient funds for a…",2,null],[13,"SysErrInsufficientFunds","","Indicates a message invocation out of sequence.",2,null],[13,"SysErrOutOfGas","","Indicates message execution (including subcalls) used more…",2,null],[13,"SysErrForbidden","","Indicates a message execution is forbidden for the caller.",2,null],[13,"SysErrorIllegalActor","","Indicates actor code performed a disallowed operation.…",2,null],[13,"SysErrorIllegalArgument","","Indicates an invalid argument passed to a runtime method.",2,null],[13,"SysErrSerialization","","Indicates  an object failed to de/serialize for storage.",2,null],[13,"SysErrorReserved1","","Reserved exit codes, do not use.",2,null],[13,"SysErrorReserved2","","",2,null],[13,"SysErrorReserved3","","",2,null],[13,"SysErrInternal","","Indicates something broken within the VM.",2,null],[13,"ErrIllegalArgument","","Indicates a method parameter is invalid.",2,null],[13,"ErrNotFound","","Indicates a requested resource does not exist.",2,null],[13,"ErrForbidden","","Indicates an action is disallowed.",2,null],[13,"ErrInsufficientFunds","","Indicates a balance of funds is insufficient.",2,null],[13,"ErrIllegalState","","Indicates an actor\'s internal state is invalid.",2,null],[13,"ErrSerialization","","Indicates de/serialization failure within actor code.",2,null],[13,"ErrTooManyProveCommits","","Power actor specific exit code.",2,null],[13,"ErrPlaceholder","","",2,null],[11,"new","","Constructor for actor state",0,[[["tokenamount",6],["cid",3]]]],[11,"deduct_funds","","Safely deducts funds from an Actor",0,[[["tokenamount",6]],[["result",4],["string",3]]]],[11,"deposit_funds","","Deposits funds to an Actor",0,[[["tokenamount",6]]]],[11,"new","","",3,[[["string",3],["exitcode",4]]]],[11,"new_fatal","","",3,[[["string",3]]]],[11,"is_fatal","","Returns true if error is fatal.",3,[[]]],[11,"exit_code","","Returns the exit code of the error.",3,[[],["exitcode",4]]],[11,"is_ok","","Returns true when the exit code is `Ok`.",3,[[]]],[11,"msg","","Error message of the actor error.",3,[[]]],[11,"wrap","","Prefix error message with a string message.",3,[[]]],[11,"is_success","","returns true if the exit code was a success",2,[[]]],[11,"new","","Constructor if data is encoded already",4,[[["vec",3]]]],[11,"serialize","","Contructor for encoding Cbor encodable structure",4,[[["serialize",8]],[["result",4],["encodingerror",3]]]],[11,"bytes","","Returns serialized bytes",4,[[]]],[11,"deserialize","","Deserializes into a defined type",4,[[],[["encodingerror",3],["result",4],["deserializeowned",8]]]],[0,"json","","",null,null],[3,"ActorStateJson","forest_vm::json","Wrapper for serializing and deserializing a SignedMessage…",null,null],[12,"0","","",5,null],[3,"ActorStateJsonRef","","Wrapper for serializing a SignedMessage reference to JSON.",null,null],[12,"0","","",6,null],[5,"serialize","","",null,[[["actorstate",3]],["result",4]]],[5,"deserialize","","",null,[[],[["result",4],["actorstate",3]]]],[6,"DealID","forest_vm","Deal identifier used in market and miner actors",null,null],[6,"MethodNum","","Method number indicator for calling actor methods",null,null],[6,"TokenAmount","","",null,null],[17,"METHOD_SEND","","Base actor send method",null,null],[17,"METHOD_CONSTRUCTOR","","Base actor constructor method",null,null],[14,"actor_error","","Convenience macro for generating Actor Errors",null,null],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"to_string","","",3,[[],["string",3]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","forest_vm::json","",5,[[]]],[11,"into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","forest_vm","",0,[[["actorstatejson",3]]]],[11,"from","","",3,[[["encodingerror",3]]]],[11,"from","","",3,[[["cborerror",3]]]],[11,"clone","","",0,[[],["actorstate",3]]],[11,"clone","","",3,[[],["actorerror",3]]],[11,"clone","","",2,[[],["exitcode",4]]],[11,"clone","","",4,[[],["serialized",3]]],[11,"default","","",4,[[],["serialized",3]]],[11,"eq","","",0,[[["actorstate",3]]]],[11,"ne","","",0,[[["actorstate",3]]]],[11,"eq","","",3,[[["actorerror",3]]]],[11,"ne","","",3,[[["actorerror",3]]]],[11,"eq","","",2,[[["exitcode",4]]]],[11,"eq","","",4,[[["serialized",3]]]],[11,"ne","","",4,[[["serialized",3]]]],[11,"deref","","",4,[[]]],[11,"deref","","",7,[[],["vec",3]]],[11,"deref","","",8,[[],["cid",3]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"hash","","",4,[[]]],[11,"serialize","","",0,[[],["result",4]]],[11,"serialize","forest_vm::json","",5,[[],["result",4]]],[11,"serialize","","",6,[[],["result",4]]],[11,"serialize","forest_vm","",2,[[],["result",4]]],[11,"serialize","","",4,[[],["result",4]]],[11,"deserialize","","",0,[[],["result",4]]],[11,"deserialize","forest_vm::json","",5,[[],["result",4]]],[11,"deserialize","forest_vm","",2,[[],["result",4]]],[11,"deserialize","","",4,[[],["result",4]]],[11,"initialize","","",7,[[]]],[11,"initialize","","",8,[[]]],[11,"from_i64","","",2,[[],["option",4]]],[11,"from_u64","","",2,[[],["option",4]]]],"p":[[3,"ActorState"],[3,"InvocInput"],[4,"ExitCode"],[3,"ActorError"],[3,"Serialized"],[3,"ActorStateJson"],[3,"ActorStateJsonRef"],[3,"EMPTY_ARR_BYTES"],[3,"EMPTY_ARR_CID"]]},\
"graphsync":{"doc":"","i":[[3,"NewRequestPayload","graphsync","The data associated with a new graphsync request.",null,null],[12,"root","","",0,null],[12,"selector","","",0,null],[12,"priority","","",0,null],[12,"extensions","","",0,null],[3,"GraphSyncRequest","","Struct which contains all request data from a…",null,null],[12,"id","","",1,null],[12,"payload","","",1,null],[3,"GraphSyncResponse","","Struct which contains all response data from a…",null,null],[12,"id","","",2,null],[12,"status","","",2,null],[12,"extensions","","",2,null],[3,"GraphSyncMessage","","Contains all requests and responses",null,null],[3,"ExtensionData","","A name/data pair for a GraphSync extension.",null,null],[4,"Payload","","Defines the data associated with each request type.",null,null],[13,"New","","",3,null],[13,"Update","","",3,null],[12,"extensions","graphsync::Payload","",4,null],[13,"Cancel","graphsync","",3,null],[4,"ResponseStatusCode","","Status code returned for a GraphSync Request.",null,null],[13,"RequestAcknowledged","","RequestAcknowledged means the request was received and is…",5,null],[13,"AdditionalPeers","","AdditionalPeers means additional peers were found that may…",5,null],[13,"NotEnoughGas","","NotEnoughGas means fulfilling this request requires payment.",5,null],[13,"OtherProtocol","","OtherProtocol means a different type of response than…",5,null],[13,"PartialResponse","","PartialResponse may include blocks and metadata about the…",5,null],[13,"RequestPaused","","RequestPaused indicates a request is paused and will not…",5,null],[13,"RequestCompletedFull","","RequestCompletedFull means the entire fulfillment of the…",5,null],[13,"RequestCompletedPartial","","RequestCompletedPartial means the response is completed,…",5,null],[13,"RequestRejected","","RequestRejected means the node did not accept the incoming…",5,null],[13,"RequestFailedBusy","","RequestFailedBusy means the node is too busy, try again…",5,null],[13,"RequestFailedUnknown","","RequestFailedUnknown means the request failed for an…",5,null],[13,"RequestFailedLegal","","RequestFailedLegal means the request failed for legal…",5,null],[13,"RequestFailedContentNotFound","","RequestFailedContentNotFound means the respondent does not…",5,null],[13,"Other","","",5,null],[0,"libp2p","","",null,null],[3,"GraphSync","graphsync::libp2p","The GraphSync behaviour that gets consumed by the Swarm.",null,null],[3,"GraphSyncCodec","","Codec used for encoding and decoding protobuf messages",null,null],[3,"GraphSyncHandler","","Handler implementation for GraphSync protocol.",null,null],[11,"new","","Creates a new GraphSync behaviour",6,[[["graphsyncconfig",3]]]],[11,"send_request","","Initiates GraphSync request to peer given root and selector.",6,[[["peerid",3],["extensions",6],["cid",3],["selector",4]]]],[11,"new","","Constructor for new RPC handler",7,[[]]],[11,"new","graphsync","",1,[[["priority",6],["extensions",6],["cid",3],["requestid",6],["selector",4],["option",4]]]],[11,"update","","Generate a GraphSyncRequest to update an in progress…",1,[[["requestid",6],["extensions",6]]]],[11,"cancel","","Generate a GraphSyncRequest to cancel and in progress…",1,[[["requestid",6]]]],[11,"new","","",2,[[["responsestatuscode",4],["extensions",6],["requestid",6],["option",4]]]],[11,"requests","","Returns reference to requests hashmap.",8,[[],["fnvhashmap",6]]],[11,"responses","","Returns reference to responses hashmap.",8,[[],["fnvhashmap",6]]],[11,"blocks","","Returns reference to blocks hashmap.",8,[[],["hashmap",3]]],[11,"insert_request","","Adds a request to GraphSyncMessage requests.",8,[[["graphsyncrequest",3]]]],[11,"insert_response","","Adds a response to GraphSyncMessage responses.",8,[[["graphsyncresponse",3]]]],[11,"insert_block","","Add block to message.",8,[[["vec",3],["cid",3]]]],[11,"is_empty","","Returns true if empty GraphSyncMessage.",8,[[]]],[0,"proto","","",null,null],[3,"Message","graphsync::proto","Generated files are compatible only with the same version…",null,null],[12,"completeRequestList","","",9,null],[12,"requests","","",9,null],[12,"responses","","",9,null],[12,"data","","",9,null],[12,"unknown_fields","","",9,null],[12,"cached_size","","",9,null],[3,"Message_Request","","",null,null],[12,"id","","",10,null],[12,"root","","",10,null],[12,"selector","","",10,null],[12,"extensions","","",10,null],[12,"priority","","",10,null],[12,"cancel","","",10,null],[12,"update","","",10,null],[12,"unknown_fields","","",10,null],[12,"cached_size","","",10,null],[3,"Message_Response","","",null,null],[12,"id","","",11,null],[12,"status","","",11,null],[12,"extensions","","",11,null],[12,"unknown_fields","","",11,null],[12,"cached_size","","",11,null],[3,"Message_Block","","",null,null],[12,"prefix","","",12,null],[12,"data","","",12,null],[12,"unknown_fields","","",12,null],[12,"cached_size","","",12,null],[5,"file_descriptor_proto","","",null,[[],["filedescriptorproto",3]]],[6,"Priority","graphsync","Priority for a GraphSync request.",null,null],[6,"RequestID","","Unique identifier for a GraphSync request.",null,null],[6,"ExtensionName","","Name for a GraphSync extension.",null,null],[6,"Extensions","","Represents the data attached as extensions to the requests.",null,null],[17,"MAX_BLOCK_SIZE","","The maximum combined block size for a single message.",null,null],[17,"EXTENSION_METADATA","","Provides response metadata for a GraphSync request, see…",null,null],[17,"EXTENSION_DO_NOT_SEND_CIDS","","Tells the responding peer not to send certain blocks if…",null,null],[11,"to_i32","","Return the integer responding to the status code",5,[[]]],[11,"from_i32","","Return the status code for a given integer.",5,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"vzip","","",8,[[]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"vzip","","",13,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"equivalent","","",5,[[]]],[11,"vzip","","",5,[[]]],[11,"from","graphsync::libp2p","",6,[[]]],[11,"into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"vzip","","",6,[[]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"vzip","","",14,[[]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"into_handler","","",7,[[["connectedpoint",4],["peerid",3]]]],[11,"inbound_protocol","","",7,[[]]],[11,"vzip","","",7,[[]]],[11,"from","graphsync::proto","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"vzip","","",9,[[]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"vzip","","",10,[[]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"vzip","","",11,[[]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"vzip","","",12,[[]]],[11,"clone","","",9,[[],["message",3]]],[11,"clone","","",10,[[],["message_request",3]]],[11,"clone","","",11,[[],["message_response",3]]],[11,"clone","","",12,[[],["message_block",3]]],[11,"clone","graphsync","",0,[[],["newrequestpayload",3]]],[11,"clone","","",3,[[],["payload",4]]],[11,"clone","","",1,[[],["graphsyncrequest",3]]],[11,"clone","","",2,[[],["graphsyncresponse",3]]],[11,"clone","","",8,[[],["graphsyncmessage",3]]],[11,"clone","","",13,[[],["extensiondata",3]]],[11,"clone","","",5,[[],["responsestatuscode",4]]],[11,"default","graphsync::libp2p","",6,[[],["graphsync",3]]],[11,"default","","",7,[[]]],[11,"default","graphsync::proto","",9,[[],["message",3]]],[11,"default","","",10,[[],["message_request",3]]],[11,"default","","",11,[[],["message_response",3]]],[11,"default","","",12,[[],["message_block",3]]],[11,"default","graphsync","",8,[[],["graphsyncmessage",3]]],[11,"eq","graphsync::proto","",9,[[["message",3]]]],[11,"ne","","",9,[[["message",3]]]],[11,"eq","","",10,[[["message_request",3]]]],[11,"ne","","",10,[[["message_request",3]]]],[11,"eq","","",11,[[["message_response",3]]]],[11,"ne","","",11,[[["message_response",3]]]],[11,"eq","","",12,[[["message_block",3]]]],[11,"ne","","",12,[[["message_block",3]]]],[11,"eq","graphsync","",0,[[["newrequestpayload",3]]]],[11,"ne","","",0,[[["newrequestpayload",3]]]],[11,"eq","","",3,[[["payload",4]]]],[11,"ne","","",3,[[["payload",4]]]],[11,"eq","","",1,[[["graphsyncrequest",3]]]],[11,"ne","","",1,[[["graphsyncrequest",3]]]],[11,"eq","","",2,[[["graphsyncresponse",3]]]],[11,"ne","","",2,[[["graphsyncresponse",3]]]],[11,"eq","","",8,[[["graphsyncmessage",3]]]],[11,"ne","","",8,[[["graphsyncmessage",3]]]],[11,"eq","","",5,[[["responsestatuscode",4]]]],[11,"ne","","",5,[[["responsestatuscode",4]]]],[11,"fmt","graphsync::proto","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"fmt","graphsync","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"try_from","graphsync::proto","",9,[[["graphsyncmessage",3]],["result",4]]],[11,"try_from","graphsync","",8,[[["message",3]],["result",4]]],[11,"listen_protocol","graphsync::libp2p","",7,[[],["substreamprotocol",3]]],[11,"inject_fully_negotiated_inbound","","",7,[[]]],[11,"inject_fully_negotiated_outbound","","",7,[[]]],[11,"inject_event","","",7,[[]]],[11,"inject_dial_upgrade_error","","",7,[[["protocolshandlerupgrerr",4],["error",3]]]],[11,"connection_keep_alive","","",7,[[],["keepalive",4]]],[11,"poll","","",7,[[["context",3]],[["protocolshandlerevent",4],["poll",4]]]],[11,"new_handler","","",6,[[]]],[11,"addresses_of_peer","","",6,[[["peerid",3]],[["vec",3],["multiaddr",3]]]],[11,"inject_connected","","",6,[[["peerid",3]]]],[11,"inject_disconnected","","",6,[[["peerid",3]]]],[11,"inject_event","","",6,[[["connectionid",3],["peerid",3],["graphsyncmessage",3]]]],[11,"poll","","",6,[[["context",3]],[["poll",4],["networkbehaviouraction",4]]]],[11,"decode","","",14,[[["bytesmut",3]],[["result",4],["option",4]]]],[11,"encode","","",14,[[["bytesmut",3]],["result",4]]],[11,"clear","graphsync::proto","",9,[[]]],[11,"clear","","",10,[[]]],[11,"clear","","",11,[[]]],[11,"clear","","",12,[[]]],[11,"is_initialized","","",9,[[]]],[11,"merge_from","","",9,[[["codedinputstream",3]],["protobufresult",6]]],[11,"compute_size","","",9,[[]]],[11,"write_to_with_cached_sizes","","",9,[[["codedoutputstream",3]],["protobufresult",6]]],[11,"get_cached_size","","",9,[[]]],[11,"get_unknown_fields","","",9,[[],["unknownfields",3]]],[11,"mut_unknown_fields","","",9,[[],["unknownfields",3]]],[11,"as_any","","",9,[[],["any",8]]],[11,"as_any_mut","","",9,[[],["any",8]]],[11,"into_any","","",9,[[["box",3]],[["box",3],["any",8]]]],[11,"descriptor","","",9,[[],["messagedescriptor",3]]],[11,"new","","",9,[[],["message",3]]],[11,"descriptor_static","","",9,[[],["messagedescriptor",3]]],[11,"default_instance","","",9,[[],["message",3]]],[11,"is_initialized","","",10,[[]]],[11,"merge_from","","",10,[[["codedinputstream",3]],["protobufresult",6]]],[11,"compute_size","","",10,[[]]],[11,"write_to_with_cached_sizes","","",10,[[["codedoutputstream",3]],["protobufresult",6]]],[11,"get_cached_size","","",10,[[]]],[11,"get_unknown_fields","","",10,[[],["unknownfields",3]]],[11,"mut_unknown_fields","","",10,[[],["unknownfields",3]]],[11,"as_any","","",10,[[],["any",8]]],[11,"as_any_mut","","",10,[[],["any",8]]],[11,"into_any","","",10,[[["box",3]],[["box",3],["any",8]]]],[11,"descriptor","","",10,[[],["messagedescriptor",3]]],[11,"new","","",10,[[],["message_request",3]]],[11,"descriptor_static","","",10,[[],["messagedescriptor",3]]],[11,"default_instance","","",10,[[],["message_request",3]]],[11,"is_initialized","","",11,[[]]],[11,"merge_from","","",11,[[["codedinputstream",3]],["protobufresult",6]]],[11,"compute_size","","",11,[[]]],[11,"write_to_with_cached_sizes","","",11,[[["codedoutputstream",3]],["protobufresult",6]]],[11,"get_cached_size","","",11,[[]]],[11,"get_unknown_fields","","",11,[[],["unknownfields",3]]],[11,"mut_unknown_fields","","",11,[[],["unknownfields",3]]],[11,"as_any","","",11,[[],["any",8]]],[11,"as_any_mut","","",11,[[],["any",8]]],[11,"into_any","","",11,[[["box",3]],[["box",3],["any",8]]]],[11,"descriptor","","",11,[[],["messagedescriptor",3]]],[11,"new","","",11,[[],["message_response",3]]],[11,"descriptor_static","","",11,[[],["messagedescriptor",3]]],[11,"default_instance","","",11,[[],["message_response",3]]],[11,"is_initialized","","",12,[[]]],[11,"merge_from","","",12,[[["codedinputstream",3]],["protobufresult",6]]],[11,"compute_size","","",12,[[]]],[11,"write_to_with_cached_sizes","","",12,[[["codedoutputstream",3]],["protobufresult",6]]],[11,"get_cached_size","","",12,[[]]],[11,"get_unknown_fields","","",12,[[],["unknownfields",3]]],[11,"mut_unknown_fields","","",12,[[],["unknownfields",3]]],[11,"as_any","","",12,[[],["any",8]]],[11,"as_any_mut","","",12,[[],["any",8]]],[11,"into_any","","",12,[[["box",3]],[["box",3],["any",8]]]],[11,"descriptor","","",12,[[],["messagedescriptor",3]]],[11,"new","","",12,[[],["message_block",3]]],[11,"descriptor_static","","",12,[[],["messagedescriptor",3]]],[11,"default_instance","","",12,[[],["message_block",3]]],[11,"as_ref","","",9,[[],["reflectvalueref",4]]],[11,"as_ref","","",10,[[],["reflectvalueref",4]]],[11,"as_ref","","",11,[[],["reflectvalueref",4]]],[11,"as_ref","","",12,[[],["reflectvalueref",4]]],[11,"new","","",9,[[],["message",3]]],[11,"get_completeRequestList","","",9,[[]]],[11,"clear_completeRequestList","","",9,[[]]],[11,"set_completeRequestList","","",9,[[]]],[11,"get_requests","","",9,[[]]],[11,"clear_requests","","",9,[[]]],[11,"set_requests","","",9,[[["repeatedfield",3],["message_request",3]]]],[11,"mut_requests","","",9,[[],["repeatedfield",3]]],[11,"take_requests","","",9,[[],[["repeatedfield",3],["message_request",3]]]],[11,"get_responses","","",9,[[]]],[11,"clear_responses","","",9,[[]]],[11,"set_responses","","",9,[[["repeatedfield",3],["message_response",3]]]],[11,"mut_responses","","",9,[[],["repeatedfield",3]]],[11,"take_responses","","",9,[[],[["repeatedfield",3],["message_response",3]]]],[11,"get_data","","",9,[[]]],[11,"clear_data","","",9,[[]]],[11,"set_data","","",9,[[["repeatedfield",3],["message_block",3]]]],[11,"mut_data","","",9,[[],["repeatedfield",3]]],[11,"take_data","","",9,[[],[["repeatedfield",3],["message_block",3]]]],[11,"new","","",10,[[],["message_request",3]]],[11,"get_id","","",10,[[]]],[11,"clear_id","","",10,[[]]],[11,"set_id","","",10,[[]]],[11,"get_root","","",10,[[]]],[11,"clear_root","","",10,[[]]],[11,"set_root","","",10,[[["vec",3]]]],[11,"mut_root","","",10,[[],["vec",3]]],[11,"take_root","","",10,[[],["vec",3]]],[11,"get_selector","","",10,[[]]],[11,"clear_selector","","",10,[[]]],[11,"set_selector","","",10,[[["vec",3]]]],[11,"mut_selector","","",10,[[],["vec",3]]],[11,"take_selector","","",10,[[],["vec",3]]],[11,"get_extensions","","",10,[[],["hashmap",3]]],[11,"clear_extensions","","",10,[[]]],[11,"set_extensions","","",10,[[["hashmap",3],["string",3],["vec",3]]]],[11,"mut_extensions","","",10,[[],["hashmap",3]]],[11,"take_extensions","","",10,[[],[["hashmap",3],["string",3],["vec",3]]]],[11,"get_priority","","",10,[[]]],[11,"clear_priority","","",10,[[]]],[11,"set_priority","","",10,[[]]],[11,"get_cancel","","",10,[[]]],[11,"clear_cancel","","",10,[[]]],[11,"set_cancel","","",10,[[]]],[11,"get_update","","",10,[[]]],[11,"clear_update","","",10,[[]]],[11,"set_update","","",10,[[]]],[11,"new","","",11,[[],["message_response",3]]],[11,"get_id","","",11,[[]]],[11,"clear_id","","",11,[[]]],[11,"set_id","","",11,[[]]],[11,"get_status","","",11,[[]]],[11,"clear_status","","",11,[[]]],[11,"set_status","","",11,[[]]],[11,"get_extensions","","",11,[[],["hashmap",3]]],[11,"clear_extensions","","",11,[[]]],[11,"set_extensions","","",11,[[["hashmap",3],["string",3],["vec",3]]]],[11,"mut_extensions","","",11,[[],["hashmap",3]]],[11,"take_extensions","","",11,[[],[["hashmap",3],["string",3],["vec",3]]]],[11,"new","","",12,[[],["message_block",3]]],[11,"get_prefix","","",12,[[]]],[11,"clear_prefix","","",12,[[]]],[11,"set_prefix","","",12,[[["vec",3]]]],[11,"mut_prefix","","",12,[[],["vec",3]]],[11,"take_prefix","","",12,[[],["vec",3]]],[11,"get_data","","",12,[[]]],[11,"clear_data","","",12,[[]]],[11,"set_data","","",12,[[["vec",3]]]],[11,"mut_data","","",12,[[],["vec",3]]],[11,"take_data","","",12,[[],["vec",3]]]],"p":[[3,"NewRequestPayload"],[3,"GraphSyncRequest"],[3,"GraphSyncResponse"],[4,"Payload"],[13,"Update"],[4,"ResponseStatusCode"],[3,"GraphSync"],[3,"GraphSyncHandler"],[3,"GraphSyncMessage"],[3,"Message"],[3,"Message_Request"],[3,"Message_Response"],[3,"Message_Block"],[3,"ExtensionData"],[3,"GraphSyncCodec"]]},\
"interpreter":{"doc":"","i":[[3,"DefaultRuntime","interpreter","Implementation of the Runtime trait.",null,null],[3,"DefaultSyscalls","","Default syscalls information",null,null],[3,"GasCharge","","",null,null],[12,"name","","",0,null],[12,"compute_gas","","",0,null],[12,"storage_gas","","",0,null],[3,"PriceList","","Provides prices for operations in the VM",null,null],[12,"on_chain_message_compute_base","","Gas cost charged to the originator of an on-chain message…",1,null],[12,"on_chain_message_storage_base","","",1,null],[12,"on_chain_message_storage_per_byte","","",1,null],[12,"on_chain_return_value_per_byte","","Gas cost charged to the originator of a non-nil return…",1,null],[12,"send_base","","Gas cost for any message send execution(including the…",1,null],[12,"send_transfer_funds","","Gas cost charged, in addition to SendBase, if a message…",1,null],[12,"send_transfer_only_premium","","Gas cost charged, in addition to SendBase, if message only…",1,null],[12,"send_invoke_method","","Gas cost charged, in addition to SendBase, if a message…",1,null],[12,"ipld_get_base","","Gas cost (Base + len*PerByte) for any Get operation to the…",1,null],[12,"ipld_put_base","","Gas cost (Base + len*PerByte) for any Put operation to the…",1,null],[12,"ipld_put_per_byte","","",1,null],[12,"create_actor_compute","","Gas cost for creating a new actor (via InitActor\'s Exec…",1,null],[12,"create_actor_storage","","",1,null],[12,"delete_actor","","Gas cost for deleting an actor. Note: this partially…",1,null],[12,"bls_sig_cost","","Gas cost for verifying bls signature",1,null],[12,"secp256k1_sig_cost","","Gas cost for verifying secp256k1 signature",1,null],[12,"hashing_base","","",1,null],[12,"compute_unsealed_sector_cid_base","","",1,null],[12,"verify_seal_base","","",1,null],[12,"verify_post_lookup","","",1,null],[12,"verify_consensus_fault","","",1,null],[3,"ChainRand","","Allows for deriving the randomness from a particular tipset",null,null],[12,"blks","","",2,null],[3,"BlockMessages","","",null,null],[12,"miner","","",3,null],[12,"messages","","",3,null],[12,"win_count","","",3,null],[3,"VM","","Interpreter which handles execution of state transitioning…",null,null],[3,"ApplyRet","","Apply message return data",null,null],[12,"msg_receipt","","",4,null],[12,"act_error","","",4,null],[12,"penalty","","",4,null],[12,"miner_tip","","",4,null],[5,"vm_send","","Shared logic between the DefaultRuntime and the…",null,[[["unsignedmessage",3],["gascharge",3],["defaultruntime",3],["option",4]],[["actorerror",3],["serialized",3],["result",4]]]],[5,"resolve_to_key_addr","","returns the public key type of address (`BLS`/`SECP256K1`)…",null,[[["statetree",3],["address",3]],[["result",4],["actorerror",3],["address",3]]]],[5,"price_list_by_epoch","","Returns gas price list by Epoch for gas consumption",null,[[["chainepoch",6]],["pricelist",3]]],[5,"compute_gas_overestimation_burn","","",null,[[]]],[11,"new","","Constructs a new Runtime",5,[[["hashset",3],["unsignedmessage",3],["address",3],["chainepoch",6],["statetree",3]],[["result",4],["actorerror",3]]]],[11,"charge_gas","","Adds to amount of used",5,[[["gascharge",3]],[["actorerror",3],["result",4]]]],[11,"gas_used","","Returns gas used by runtime",5,[[]]],[11,"price_list","","Returns the price list for gas charges within the runtime",5,[[],["pricelist",3]]],[11,"try_create_account_actor","","creates account actors from only BLS/SECP256K1 addresses.",5,[[["address",3]],[["result",4],["actorerror",3],["actorstate",3]]]],[11,"new","","",6,[[]]],[11,"new","","",0,[[]]],[11,"total","","Calculates total gas charge based on compute and storage…",0,[[]]],[11,"on_chain_message","","Returns the gas required for storing a message of a given…",1,[[],["gascharge",3]]],[11,"on_chain_return_value","","Returns the gas required for storing the response of a…",1,[[],["gascharge",3]]],[11,"on_method_invocation","","Returns the gas required when invoking a method.",1,[[["tokenamount",6],["methodnum",6]],["gascharge",3]]],[11,"on_ipld_get","","Returns the gas required for storing an object",1,[[],["gascharge",3]]],[11,"on_ipld_put","","Returns the gas required for storing an object",1,[[],["gascharge",3]]],[11,"on_create_actor","","Returns the gas required for creating an actor",1,[[],["gascharge",3]]],[11,"on_delete_actor","","Returns the gas required for deleting an actor",1,[[],["gascharge",3]]],[11,"on_verify_signature","","Returns gas required for signature verification",1,[[["signaturetype",4]],["gascharge",3]]],[11,"on_hashing","","Returns gas required for hashing data",1,[[],["gascharge",3]]],[11,"on_compute_unsealed_sector_cid","","Returns gas required for computing unsealed sector Cid",1,[[["registeredsealproof",4]],["gascharge",3]]],[11,"on_verify_seal","","Returns gas required for seal verification",1,[[["sealverifyinfo",3]],["gascharge",3]]],[11,"on_verify_post","","Returns gas required for PoSt verification",1,[[["windowpostverifyinfo",3]],["gascharge",3]]],[11,"on_verify_consensus_fault","","Returns gas required for verifying consensus fault",1,[[],["gascharge",3]]],[11,"new","","Construct a new ChainRand",2,[[["tipsetkeys",3]]]],[11,"new","","",7,[[["bigint",3],["chainepoch",6],["cid",3]],[["string",3],["result",4]]]],[11,"register_actor","","Registers an actor that is not part of the set of default…",7,[[["cid",3]]]],[11,"registered_actors","","Gets registered actors that are not part of the set of…",7,[[],["hashset",3]]],[11,"flush","","Flush stores in VM and return state root.",7,[[],[["string",3],["cid",3],["result",4]]]],[11,"state","","",7,[[],["statetree",3]]],[11,"apply_block_messages","","Apply block messages from a Tipset. Returns the receipts…",7,[[["chainepoch",6],["option",4]],[["result",4],["vec",3],["box",3]]]],[11,"apply_implicit_message","","",7,[[["unsignedmessage",3]],["applyret",3]]],[11,"apply_message","","Applies the state transition for a single message Returns…",7,[[["chainmessage",4]],[["result",4],["applyret",3],["string",3]]]],[8,"Rand","","Randomness provider trait",null,null],[10,"get_chain_randomness","","Gets 32 bytes of randomness for ChainRand paramaterized by…",8,[[["domainseparationtag",4],["chainepoch",6]],[["result",4],["box",3]]]],[10,"get_beacon_randomness","","Gets 32 bytes of randomness for ChainRand paramaterized by…",8,[[["domainseparationtag",4],["chainepoch",6]],[["result",4],["box",3]]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"vzip","","",5,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"vzip","","",6,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"vzip","","",7,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"get_chain_randomness","","",2,[[["domainseparationtag",4],["chainepoch",6]],[["result",4],["box",3]]]],[11,"get_beacon_randomness","","",2,[[["domainseparationtag",4],["chainepoch",6]],[["result",4],["box",3]]]],[11,"clone","","",1,[[],["pricelist",3]]],[11,"clone","","",2,[[],["chainrand",3]]],[11,"clone","","",4,[[],["applyret",3]]],[11,"default","","",1,[[]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"verify_consensus_fault","","",6,[[],[["box",3],["result",4],["option",4]]]],[11,"verify_seal","","",6,[[["sealverifyinfo",3]],[["result",4],["box",3]]]],[11,"verify_post","","",6,[[["windowpostverifyinfo",3]],[["result",4],["box",3]]]],[11,"batch_verify_seals","","",6,[[],[["result",4],["hashmap",3],["box",3]]]]],"p":[[3,"GasCharge"],[3,"PriceList"],[3,"ChainRand"],[3,"BlockMessages"],[3,"ApplyRet"],[3,"DefaultRuntime"],[3,"DefaultSyscalls"],[3,"VM"],[8,"Rand"]]},\
"ipld_amt":{"doc":"AMT crate for use as rust IPLD data structure","i":[[3,"Amt","ipld_amt","Array Mapped Trie allows for the insertion and persistence…",null,null],[3,"BitMap","","Map of bits to indicate which indexes contain values and…",null,null],[4,"Error","","AMT Error",null,null],[13,"OutOfRange","","Index referenced it above arbitrary max set",0,null],[13,"MaxHeight","","Height of root node is greater than max.",0,null],[13,"Cid","","Error generating a Cid for data",0,null],[13,"Cached","","Error when trying to serialize an AMT without a flushed…",0,null],[13,"RootNotFound","","Cid root was not found in underling data store",0,null],[13,"InvalidVecLength","","Serialized vector less than number of bits set",0,null],[13,"CidNotFound","","Cid not found in store error",0,null],[13,"Dynamic","","Dynamic error for when the error needs to be forwarded as…",0,null],[13,"Other","","Custom AMT error",0,null],[11,"new","","Constructor for Root AMT node",1,[[]]],[11,"load","","Constructs an AMT with a blockstore and a Cid of the root…",1,[[["cid",3]],[["error",4],["result",4]]]],[11,"height","","",1,[[]]],[11,"count","","",1,[[]]],[11,"new_from_slice","","Generates an AMT with block store and array of cbor…",1,[[],[["cid",3],["error",4],["result",4]]]],[11,"get","","Get value at index of AMT",1,[[],[["option",4],["error",4],["result",4]]]],[11,"set","","Set value at index",1,[[],[["error",4],["result",4]]]],[11,"batch_set","","Batch set (naive for now)",1,[[],[["error",4],["result",4]]]],[11,"delete","","Delete item from AMT at index",1,[[],[["error",4],["result",4]]]],[11,"batch_delete","","Deletes multiple items from AMT",1,[[],[["error",4],["result",4]]]],[11,"flush","","flush root and return Cid used as key in block store",1,[[],[["cid",3],["error",4],["result",4]]]],[11,"for_each","","Iterates over each value in the Amt and runs a function on…",1,[[],[["result",4],["box",3]]]],[11,"for_each_while","","Iterates over each value in the Amt and runs a function on…",1,[[],[["result",4],["box",3]]]],[11,"for_each_mut","","Iterates over each value in the Amt and runs a function on…",1,[[],[["result",4],["box",3]]]],[11,"for_each_while_mut","","Iterates over each value in the Amt and runs a function on…",1,[[],[["result",4],["box",3]]]],[11,"new","","Constructor with predefined map",2,[[]]],[11,"to_byte_array","","Converts bitmap to array of bytes",2,[[]]],[11,"is_empty","","Checks if bitmap is empty",2,[[]]],[11,"get_bit","","Get bit from bitmap by index",2,[[]]],[11,"set_bit","","Set bit in bitmap for index",2,[[]]],[11,"clear_bit","","Clear bit at index for bitmap",2,[[]]],[17,"MAX_INDEX","","",null,null],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"to_string","","",2,[[],["string",3]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"equivalent","","",2,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",0,[[["ciderror",4]]]],[11,"from","","",0,[[["encodingerror",3]]]],[11,"from","","",0,[[["stderror",8],["box",3]]]],[11,"clone","","",2,[[],["bitmap",3]]],[11,"default","","",2,[[],["bitmap",3]]],[11,"eq","","",1,[[]]],[11,"eq","","",2,[[["bitmap",3]]]],[11,"ne","","",2,[[["bitmap",3]]]],[11,"eq","","",2,[[]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"source","","",0,[[],[["error",8],["option",4]]]],[11,"serialize","","",2,[[],["result",4]]],[11,"deserialize","","",2,[[],["result",4]]]],"p":[[4,"Error"],[3,"Amt"],[3,"BitMap"]]},\
"ipld_blockstore":{"doc":"","i":[[3,"BufferedBlockStore","ipld_blockstore","Wrapper around `BlockStore` to limit and have control over…",null,null],[3,"BSStats","","",null,null],[12,"r","","Number of reads",0,null],[12,"w","","Number of writes",0,null],[12,"br","","Bytes Read",0,null],[12,"bw","","Bytes Written",0,null],[3,"TrackingBlockStore","","Wrapper around `BlockStore` to tracking reads and writes…",null,null],[12,"stats","","",1,null],[11,"new","","",2,[[]]],[11,"flush","","Flushes the buffered cache based on the root node. This…",2,[[["cid",3]],[["result",4],["box",3]]]],[0,"resolve","","",null,null],[5,"resolve_cids_recursive","ipld_blockstore::resolve","Resolves link to recursively resolved Ipld with no hash…",null,[[["cid",3]],[["box",3],["ipld",4],["result",4]]]],[5,"resolve_ipld","","Resolves Ipld links recursively, building an Ipld…",null,[[["ipld",4]],[["result",4],["box",3]]]],[11,"new","ipld_blockstore","",1,[[]]],[8,"BlockStore","","Wrapper for database to handle inserting and retrieving…",null,null],[11,"get_bytes","","Get bytes from block store by Cid",3,[[["cid",3]],[["option",4],["box",3],["result",4]]]],[11,"get","","Get typed object from block store by Cid",3,[[["cid",3]],[["option",4],["result",4],["box",3]]]],[11,"put","","Put an object in the block store and return the Cid…",3,[[],[["cid",3],["box",3],["result",4]]]],[11,"bulk_put","","Batch put cbor objects into blockstore and returns vector…",3,[[],[["result",4],["box",3],["vec",3]]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"equivalent","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"get_bytes","","",2,[[["cid",3]],[["option",4],["box",3],["result",4]]]],[11,"put","","",2,[[],[["cid",3],["box",3],["result",4]]]],[11,"get_bytes","","",1,[[["cid",3]],[["option",4],["box",3],["result",4]]]],[11,"put","","",1,[[],[["cid",3],["box",3],["result",4]]]],[11,"clone","","",0,[[],["bsstats",3]]],[11,"default","","",0,[[],["bsstats",3]]],[11,"eq","","",0,[[["bsstats",3]]]],[11,"ne","","",0,[[["bsstats",3]]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"read","","",2,[[],[["result",4],["error",4],["option",4]]]],[11,"write","","",2,[[],[["error",4],["result",4]]]],[11,"delete","","",2,[[],[["error",4],["result",4]]]],[11,"exists","","",2,[[],[["result",4],["error",4]]]],[11,"bulk_read","","",2,[[],[["vec",3],["result",4],["error",4]]]],[11,"bulk_write","","",2,[[],[["error",4],["result",4]]]],[11,"bulk_delete","","",2,[[],[["error",4],["result",4]]]],[11,"read","","",1,[[],[["result",4],["error",4],["option",4]]]],[11,"write","","",1,[[],[["error",4],["result",4]]]],[11,"delete","","",1,[[],[["error",4],["result",4]]]],[11,"exists","","",1,[[],[["result",4],["error",4]]]],[11,"bulk_read","","",1,[[],[["vec",3],["result",4],["error",4]]]],[11,"bulk_write","","",1,[[],[["error",4],["result",4]]]],[11,"bulk_delete","","",1,[[],[["error",4],["result",4]]]]],"p":[[3,"BSStats"],[3,"TrackingBlockStore"],[3,"BufferedBlockStore"],[8,"BlockStore"]]},\
"ipld_hamt":{"doc":"HAMT crate for use as rust IPLD data structure","i":[[3,"Hamt","ipld_hamt","Implementation of the HAMT data structure for IPLD.",null,null],[3,"BytesKey","","Key type to be used to isolate usage of unsafe code and…",null,null],[12,"0","","",0,null],[4,"Error","","HAMT Error",null,null],[13,"MaxDepth","","Maximum depth error",1,null],[13,"InvalidHashBitLen","","Hash bits does not support greater than 8 bit width",1,null],[13,"ZeroPointers","","This should be treated as a fatal error, must have at…",1,null],[13,"CidNotFound","","Cid not found in store error",1,null],[13,"Dynamic","","Dynamic error for when the error needs to be forwarded as…",1,null],[13,"Other","","Custom HAMT error",1,null],[4,"Sha256","","",null,null],[4,"Identity","","",null,null],[11,"new","","",2,[[]]],[11,"new_with_bit_width","","Construct hamt with a bit width",2,[[]]],[11,"load","","Lazily instantiate a hamt from this root Cid.",2,[[["cid",3]],[["error",4],["result",4]]]],[11,"load_with_bit_width","","Lazily instantiate a hamt from this root Cid with a…",2,[[["cid",3]],[["error",4],["result",4]]]],[11,"set_root","","Sets the root based on the Cid of the root node using the…",2,[[["cid",3]],[["error",4],["result",4]]]],[11,"store","","Returns a reference to the underlying store of the Hamt.",2,[[]]],[11,"set","","Inserts a key-value pair into the HAMT.",2,[[],[["error",4],["result",4]]]],[11,"get","","Returns a reference to the value corresponding to the key.",2,[[],[["option",4],["error",4],["result",4]]]],[11,"contains_key","","Returns `true` if a value exists for the given key in the…",2,[[],[["result",4],["error",4]]]],[11,"delete","","Removes a key from the HAMT, returning the value at the…",2,[[],[["error",4],["result",4],["option",4]]]],[11,"flush","","Flush root and return Cid for hamt",2,[[],[["cid",3],["result",4],["error",4]]]],[11,"is_empty","","Returns true if the HAMT has no entries",2,[[]]],[11,"for_each","","Iterates over each KV in the Hamt and runs a function on…",2,[[],[["result",4],["box",3]]]],[8,"Hash","","Custom trait to avoid issues like…",null,null],[10,"hash","","",3,[[]]],[11,"hash_slice","","",3,[[]]],[8,"HashAlgorithm","","Algorithm used as the hasher for the Hamt.",null,null],[10,"hash","","",4,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"equivalent","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_string","","",1,[[],["string",3]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"hash","","",0,[[]]],[11,"hash","","",5,[[]]],[11,"hash","","",6,[[]]],[11,"from","","",1,[[["encodingerror",3]]]],[11,"from","","",1,[[["stderror",8],["box",3]]]],[11,"from","","",0,[[["vec",3]]]],[11,"from","","",0,[[]]],[11,"from","","",0,[[]]],[11,"clone","","",0,[[],["byteskey",3]]],[11,"eq","","",2,[[]]],[11,"eq","","",0,[[]]],[11,"partial_cmp","","",0,[[["byteskey",3]],[["option",4],["ordering",4]]]],[11,"lt","","",0,[[["byteskey",3]]]],[11,"le","","",0,[[["byteskey",3]]]],[11,"gt","","",0,[[["byteskey",3]]]],[11,"ge","","",0,[[["byteskey",3]]]],[11,"deref","","",0,[[]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"borrow","","",0,[[]]],[11,"borrow","","",0,[[],["vec",3]]],[11,"serialize","","",2,[[],["result",4]]],[11,"serialize","","",0,[[],["result",4]]],[11,"deserialize","","",0,[[],["result",4]]],[11,"hash_slice","","",3,[[]]]],"p":[[3,"BytesKey"],[4,"Error"],[3,"Hamt"],[8,"Hash"],[8,"HashAlgorithm"],[4,"Sha256"],[4,"Identity"]]},\
"key_management":{"doc":"","i":[[3,"KeyInfo","key_management","KeyInfo struct, this contains the type of key (stored as a…",null,null],[3,"MemKeyStore","","",null,null],[12,"key_info","","",0,null],[3,"PersistentKeyStore","","KeyStore that persists data in KEYSTORE_LOCATION",null,null],[12,"key_info","","",1,null],[3,"Key","","A Key, this contains a key_info, address, and public_key…",null,null],[12,"key_info","","",2,null],[12,"public_key","","",2,null],[12,"address","","",2,null],[3,"Wallet","","This is a Wallet, it contains 2 HashMaps:",null,null],[4,"Error","","",null,null],[13,"KeyInfo","","info that corresponds to key does not exist",3,null],[13,"KeyExists","","Key already exists in keystore",3,null],[13,"KeyNotExists","","",3,null],[13,"NoKey","","",3,null],[13,"IO","","",3,null],[13,"Other","","",3,null],[13,"KeyInfoConversion","","",3,null],[5,"get_default","","Return the default Address for KeyStore",null,[[],[["address",3],["result",4],["error",4]]]],[5,"list_addrs","","Return Vec of Addresses sorted by their string…",null,[[],[["error",4],["result",4],["vec",3]]]],[5,"find_key","","Return Key corresponding to given Address in KeyStore",null,[[["address",3]],[["result",4],["key",3],["error",4]]]],[5,"export_key_info","","Return keyInfo for given Address in KeyStore",null,[[["address",3]],[["error",4],["result",4],["keyinfo",3]]]],[5,"generate_key","","Generate new Key of given SignatureType",null,[[["signaturetype",4]],[["result",4],["key",3],["error",4]]]],[5,"import","","Import KeyInfo into KeyStore",null,[[["keyinfo",3]],[["address",3],["result",4],["error",4]]]],[5,"to_public","","Return the public key for a given private_key and…",null,[[["signaturetype",4]],[["vec",3],["error",4],["result",4]]]],[5,"new_address","","Return a new Address that is of a given SignatureType and…",null,[[["signaturetype",4]],[["address",3],["result",4],["error",4]]]],[5,"sign","","Sign takes in SignatureType, private key and message.…",null,[[["signaturetype",4]],[["signature",3],["result",4],["error",4]]]],[5,"generate","","Generate a new private key",null,[[["signaturetype",4]],[["vec",3],["error",4],["result",4]]]],[11,"new","","Return a new KeyInfo given the key_type and private_key",4,[[["signaturetype",4],["vec",3]]]],[11,"key_type","","Return a clone of the key_type",4,[[],["signaturetype",4]]],[11,"private_key","","Return a clone of the private_key",4,[[],["vec",3]]],[11,"new","","Return a new empty KeyStore",0,[[]]],[11,"new","","",1,[[["string",3]],[["error",4],["result",4]]]],[11,"flush","","",1,[[],[["result",4],["error",4]]]],[11,"new","","Return a new Wallet with a given KeyStore",5,[[]]],[11,"new_from_keys","","Return a wallet from a given amount of keys. This wallet…",5,[[]]],[11,"find_key","","Return the Key that is resolved by a given Address, If…",5,[[["address",3]],[["result",4],["key",3],["error",4]]]],[11,"sign","","Return the resultant Signature after signing a given message",5,[[["address",3]],[["signature",3],["result",4],["error",4]]]],[11,"export","","Return the KeyInfo for a given Address",5,[[["address",3]],[["error",4],["result",4],["keyinfo",3]]]],[11,"import","","Add Key_Info to the Wallet, return the Address that…",5,[[["keyinfo",3]],[["address",3],["result",4],["error",4]]]],[11,"list_addrs","","Return a Vec that contains all of the Addresses in the…",5,[[],[["error",4],["result",4],["vec",3]]]],[11,"get_default","","Return the Address of the default KeyInfo in the Wallet",5,[[],[["address",3],["result",4],["error",4]]]],[11,"set_default","","Set a default KeyInfo to the Wallet",5,[[["address",3]],[["result",4],["error",4]]]],[11,"generate_addr","","Generate a new Address that fits the requirement of the…",5,[[["signaturetype",4]],[["address",3],["result",4],["error",4]]]],[11,"has_key","","Return whether or not the Wallet contains a Key that is…",5,[[["address",3]]]],[0,"json","","",null,null],[3,"KeyInfoJson","key_management::json","Wrapper for serializing and deserializing a SignedMessage…",null,null],[12,"0","","",6,null],[3,"KeyInfoJsonRef","","Wrapper for serializing a SignedMessage reference to JSON.",null,null],[12,"0","","",7,null],[5,"serialize","","",null,[[["keyinfo",3]],["result",4]]],[5,"deserialize","","",null,[[],[["result",4],["keyinfo",3]]]],[8,"KeyStore","key_management","KeyStore struct, this contains a HashMap that is a set of…",null,null],[10,"list","","Return all of the keys that are stored in the KeyStore",8,[[],[["vec",3],["string",3]]]],[10,"get","","Return Keyinfo that corresponds to a given key",8,[[],[["error",4],["result",4],["keyinfo",3]]]],[10,"put","","Save a key key_info pair to the KeyStore",8,[[["string",3],["keyinfo",3]],[["result",4],["error",4]]]],[10,"remove","","Remove the Key and corresponding key_info from the KeyStore",8,[[["string",3]],[["error",4],["result",4],["keyinfo",3]]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"vzip","","",5,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_string","","",3,[[],["string",3]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"from","key_management::json","",6,[[]]],[11,"into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"vzip","","",6,[[]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"vzip","","",7,[[]]],[11,"list","key_management","",0,[[],[["vec",3],["string",3]]]],[11,"get","","",0,[[],[["error",4],["result",4],["keyinfo",3]]]],[11,"put","","",0,[[["string",3],["keyinfo",3]],[["result",4],["error",4]]]],[11,"remove","","",0,[[["string",3]],[["error",4],["result",4],["keyinfo",3]]]],[11,"list","","",1,[[],[["vec",3],["string",3]]]],[11,"get","","",1,[[],[["error",4],["result",4],["keyinfo",3]]]],[11,"put","","",1,[[["string",3],["keyinfo",3]],[["result",4],["error",4]]]],[11,"remove","","",1,[[["string",3]],[["error",4],["result",4],["keyinfo",3]]]],[11,"from","","",3,[[["error",3]]]],[11,"clone","","",4,[[],["keyinfo",3]]],[11,"clone","","",0,[[],["memkeystore",3]]],[11,"clone","","",1,[[],["persistentkeystore",3]]],[11,"clone","","",2,[[],["key",3]]],[11,"clone","","",5,[[],["wallet",3]]],[11,"default","","",0,[[],["memkeystore",3]]],[11,"default","","",1,[[],["persistentkeystore",3]]],[11,"eq","","",3,[[["error",4]]]],[11,"ne","","",3,[[["error",4]]]],[11,"eq","","",4,[[["keyinfo",3]]]],[11,"ne","","",4,[[["keyinfo",3]]]],[11,"eq","","",0,[[["memkeystore",3]]]],[11,"ne","","",0,[[["memkeystore",3]]]],[11,"eq","","",1,[[["persistentkeystore",3]]]],[11,"ne","","",1,[[["persistentkeystore",3]]]],[11,"eq","","",2,[[["key",3]]]],[11,"ne","","",2,[[["key",3]]]],[11,"eq","","",5,[[["wallet",3]]]],[11,"ne","","",5,[[["wallet",3]]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"try_from","","",2,[[["keyinfo",3]],["result",4]]],[11,"serialize","","",4,[[],["result",4]]],[11,"serialize","key_management::json","",6,[[],["result",4]]],[11,"serialize","","",7,[[],["result",4]]],[11,"serialize","key_management","",2,[[],["result",4]]],[11,"deserialize","","",4,[[],["result",4]]],[11,"deserialize","key_management::json","",6,[[],["result",4]]],[11,"deserialize","key_management","",2,[[],["result",4]]]],"p":[[3,"MemKeyStore"],[3,"PersistentKeyStore"],[3,"Key"],[4,"Error"],[3,"KeyInfo"],[3,"Wallet"],[3,"KeyInfoJson"],[3,"KeyInfoJsonRef"],[8,"KeyStore"]]},\
"message_pool":{"doc":"","i":[[3,"MpoolConfig","message_pool","",null,null],[3,"MsgSet","","Simple struct that contains a hashmap of messages where k:…",null,null],[3,"MpoolRpcProvider","","This is the Provider implementation that will be used for…",null,null],[3,"MessagePool","","This is the main MessagePool struct",null,null],[12,"cur_tipset","","",0,null],[12,"min_gas_price","","",0,null],[12,"max_tx_pool_size","","",0,null],[12,"network_name","","",0,null],[4,"Error","","",null,null],[13,"MessageTooBig","","Error indicating message that\'s too large",1,null],[13,"GasPriceTooLow","","",1,null],[13,"GasFeeCapTooLow","","",1,null],[13,"MessageValueTooHigh","","",1,null],[13,"SequenceTooLow","","",1,null],[13,"NotEnoughFunds","","",1,null],[13,"InvalidToAddr","","",1,null],[13,"InvalidFromAddr","","",1,null],[13,"DuplicateSequence","","",1,null],[13,"TryAgain","","",1,null],[13,"SoftValidationFailure","","",1,null],[13,"Other","","",1,null],[5,"remove","","Remove a message from pending given the from address and…",null,[[["address",3],["rwlock",3]]]],[5,"head_change","","This function will revert and/or apply tipsets to the…",null,[[["tipset",3],["rwlock",3],["rwlock",3],["vec",3],["rwlock",3],["rwlock",3]]]],[11,"new","","",2,[[["vec",3],["address",3],["duration",3]],[["string",3],["result",4]]]],[11,"save_config","","",2,[[],[["result",4],["box",3]]]],[11,"load_config","","",2,[[],[["result",4],["box",3]]]],[11,"new","","Generate a new MsgSet with an empty hashmap and a default…",3,[[]]],[11,"add","","Add a signed message to the MsgSet. Increase next_sequence…",3,[[["signedmessage",3]],[["error",4],["result",4]]]],[11,"rm","","",3,[[]]],[11,"new","","",4,[[["subscriber",3],["headchange",4],["statemanager",3],["arc",3]]]],[11,"new","","Create a new message pool",0,[[["string",3],["mpoolconfig",3]]]],[11,"push","","Push a signed message to the MessagePool",0,[[["signedmessage",3]]]],[11,"add","","This is a helper to push that will help to make sure that…",0,[[["signedmessage",3]]]],[11,"add_skip_checks","","Add a SignedMessage without doing any of the checks",0,[[["signedmessage",3]]]],[11,"get_sequence","","Get the sequence for a given address, return Error if…",0,[[["address",3]]]],[11,"push_with_sequence","","Adds a local message returned from the call back function…",0,[[["address",3]]]],[11,"remove","","Remove a message given a sequence and address from the…",0,[[["address",3]]]],[11,"pending","","Return a tuple that contains a vector of all signed…",0,[[]]],[11,"pending_for","","Return a Vector of signed messages for a given from…",0,[[["address",3]]]],[11,"messages_for_blocks","","Return Vector of signed messages given a block header for…",0,[[]]],[11,"estimate_gas_premium","","Return gas price estimate this has been translated from…",0,[[["address",3],["tipsetkeys",3]],[["bigint",3],["error",4],["result",4]]]],[11,"load_local","","local_message field",0,[[]]],[11,"clear","","If `local = true`, the local messages will be removed as…",0,[[]]],[11,"get_config","","",0,[[],["mpoolconfig",3]]],[11,"set_config","","",0,[[["mpoolconfig",3]],[["error",4],["result",4]]]],[0,"test_provider","","",null,null],[3,"TestApi","message_pool::test_provider","Struct used for creating a provider when writing tests…",null,null],[5,"create_header","","",null,[[],["blockheader",3]]],[8,"Provider","message_pool","Provider Trait. This trait will be used by the messagepool…",null,null],[10,"subscribe_head_changes","","Update Mpool\'s cur_tipset whenever there is a chnge to the…",5,[[],[["box",3],["pin",3]]]],[10,"get_heaviest_tipset","","Get the heaviest Tipset in the provider",5,[[],[["pin",3],["box",3]]]],[10,"put_message","","Add a message to the MpoolProvider, return either Cid or…",5,[[["signedmessage",3]],[["cid",3],["result",4],["error",4]]]],[10,"get_actor_after","","Return state actor for given address given the tipset that…",5,[[["address",3],["tipset",3]],[["actorstate",3],["error",4],["result",4]]]],[10,"messages_for_block","","Return the signed messages for given blockheader",5,[[["blockheader",3]],[["result",4],["error",4]]]],[10,"state_account_key","","Resolves to the key address",5,[[["address",3],["tipset",3]],[["pin",3],["box",3]]]],[10,"messages_for_tipset","","Return all messages for a tipset",5,[[["tipset",3]],[["result",4],["error",4],["vec",3]]]],[10,"load_tipset","","Return a tipset given the tipset keys from the ChainStore",5,[[["tipsetkeys",3]],[["tipset",3],["result",4],["error",4]]]],[10,"chain_compute_base_fee","","Computes the base fee",5,[[["tipset",3]],[["bigint",3],["error",4],["result",4]]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_string","","",1,[[],["string",3]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"as_fail","","",1,[[],["fail",8]]],[11,"from","message_pool::test_provider","",6,[[]]],[11,"into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"vzip","","",6,[[]]],[11,"subscribe_head_changes","message_pool","",4,[[],[["box",3],["pin",3]]]],[11,"get_heaviest_tipset","","",4,[[],[["pin",3],["box",3]]]],[11,"put_message","","",4,[[["signedmessage",3]],[["cid",3],["result",4],["error",4]]]],[11,"get_actor_after","","",4,[[["address",3],["tipset",3]],[["actorstate",3],["error",4],["result",4]]]],[11,"messages_for_block","","",4,[[["blockheader",3]],[["result",4],["error",4]]]],[11,"messages_for_tipset","","",4,[[["tipset",3]],[["result",4],["error",4],["vec",3]]]],[11,"load_tipset","","",4,[[["tipsetkeys",3]],[["tipset",3],["result",4],["error",4]]]],[11,"chain_compute_base_fee","","",4,[[["tipset",3]],[["bigint",3],["error",4],["result",4]]]],[11,"state_account_key","","",4,[[["address",3],["tipset",3]],[["pin",3],["box",3]]]],[11,"subscribe_head_changes","message_pool::test_provider","",6,[[],[["box",3],["pin",3]]]],[11,"get_heaviest_tipset","","",6,[[],[["pin",3],["box",3]]]],[11,"put_message","","",6,[[["signedmessage",3]],[["cid",3],["result",4],["errors",4]]]],[11,"get_actor_after","","",6,[[["address",3],["tipset",3]],[["actorstate",3],["errors",4],["result",4]]]],[11,"messages_for_block","","",6,[[["blockheader",3]],[["result",4],["errors",4]]]],[11,"state_account_key","","",6,[[["address",3],["tipset",3]],[["pin",3],["box",3]]]],[11,"messages_for_tipset","","",6,[[["tipset",3]],[["errors",4],["result",4],["vec",3]]]],[11,"load_tipset","","",6,[[["tipsetkeys",3]],[["tipset",3],["errors",4],["result",4]]]],[11,"chain_compute_base_fee","","",6,[[["tipset",3]],[["bigint",3],["error",4],["result",4]]]],[11,"from","message_pool","",1,[[["chainerror",4]]]],[11,"from","","",1,[[["encodeerror",3]]]],[11,"clone","","",2,[[],["mpoolconfig",3]]],[11,"clone","","",3,[[],["msgset",3]]],[11,"default","","",2,[[]]],[11,"default","","",3,[[],["msgset",3]]],[11,"default","message_pool::test_provider","Create a new TestApi",6,[[]]],[11,"eq","message_pool","",1,[[["error",4]]]],[11,"ne","","",1,[[["error",4]]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"deserialize","","",2,[[],["result",4]]],[11,"serialize","","",2,[[],["result",4]]],[11,"set_state_sequence","message_pool::test_provider","Set the state sequence for an Address for TestApi",6,[[["address",3]]]],[11,"set_block_messages","","Set the block messages for TestApi",6,[[["blockheader",3],["vec",3],["signedmessage",3]]]],[11,"set_heaviest_tipset","","Set the heaviest tipset for TestApi",6,[[["tipset",3],["arc",3]]]]],"p":[[3,"MessagePool"],[4,"Error"],[3,"MpoolConfig"],[3,"MsgSet"],[3,"MpoolRpcProvider"],[8,"Provider"],[3,"TestApi"]]},\
"rpc":{"doc":"","i":[[3,"RpcState","rpc","This is where you store persistant data, or at least…",null,null],[12,"state_manager","","",0,null],[12,"keystore","","",0,null],[12,"events_pubsub","","",0,null],[12,"mpool","","",0,null],[12,"bad_blocks","","",0,null],[12,"sync_state","","",0,null],[12,"network_send","","",0,null],[12,"network_name","","",0,null],[12,"chain_store","","",0,null],[5,"start_rpc","","",null,[[["rpcstate",3]]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]]],"p":[[3,"RpcState"]]},\
"rpc_client":{"doc":"","i":[[4,"Filecoin","rpc_client","",null,null],[13,"ChainGetBlock","","",0,null],[12,"respond","rpc_client::Filecoin","",1,null],[12,"cid","","",1,null],[13,"ChainGetGenesis","rpc_client","",0,null],[12,"respond","rpc_client::Filecoin","",2,null],[13,"ChainGetHead","rpc_client","",0,null],[12,"respond","rpc_client::Filecoin","",3,null],[13,"ChainGetMessages","rpc_client","",0,null],[12,"respond","rpc_client::Filecoin","",4,null],[12,"cid","","",4,null],[13,"ChainReadObj","rpc_client","",0,null],[12,"respond","rpc_client::Filecoin","",5,null],[12,"cid","","",5,null],[5,"block","rpc_client","Returns a block with specified CID fom chain via RPC",null,[[["rawclient",3],["cid",3]]]],[5,"genesis","","Returns genesis tipset from chain via RPC",null,[[["rawclient",3]]]],[5,"head","","Returns canonical head of the chain via RPC",null,[[["rawclient",3]]]],[5,"messages","","Returns messages with specified CID from chain via RPC",null,[[["rawclient",3],["cid",3]]]],[5,"read_obj","","Returns IPLD node with specified CID from chain via RPC",null,[[["rawclient",3],["cid",3]]]],[5,"new_client","","",null,[[],[["httptransportclient",3],["rawclient",3]]]],[11,"next_request","","",0,[[["rawserver",3]]]],[11,"chain_get_block","","",0,[[["rawclient",3]]]],[11,"chain_get_genesis","","",0,[[["rawclient",3]]]],[11,"chain_get_head","","",0,[[["rawclient",3]]]],[11,"chain_get_messages","","",0,[[["rawclient",3]]]],[11,"chain_read_obj","","",0,[[["rawclient",3]]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]]],"p":[[4,"Filecoin"],[13,"ChainGetBlock"],[13,"ChainGetGenesis"],[13,"ChainGetHead"],[13,"ChainGetMessages"],[13,"ChainReadObj"]]},\
"runtime":{"doc":"","i":[[3,"ConsensusFault","runtime","Result of checking two headers for a consensus fault.",null,null],[12,"target","","Address of the miner at fault (always an ID address).",0,null],[12,"epoch","","Epoch of the fault, which is the higher epoch of the two…",0,null],[12,"fault_type","","Type of fault.",0,null],[4,"ConsensusFaultType","","Consensus fault types in VM.",null,null],[13,"DoubleForkMining","","",1,null],[13,"ParentGrinding","","",1,null],[13,"TimeOffsetMining","","",1,null],[8,"ActorCode","","Interface for invoking methods on an Actor",null,null],[10,"invoke_method","","Invokes method with runtime on the actor\'s code. Method…",2,[[["methodnum",6],["serialized",3]],[["result",4],["serialized",3],["actorerror",3]]]],[8,"Runtime","","Runtime is the VM\'s internal runtime object. this is…",null,null],[10,"message","","Information related to the current message being executed.",3,[[],["messageinfo",8]]],[10,"curr_epoch","","The current chain epoch number. The genesis block has…",3,[[],["chainepoch",6]]],[10,"validate_immediate_caller_accept_any","","Validates the caller against some predicate. Exported…",3,[[],[["result",4],["actorerror",3]]]],[10,"validate_immediate_caller_is","","",3,[[],[["result",4],["actorerror",3]]]],[10,"validate_immediate_caller_type","","",3,[[],[["result",4],["actorerror",3]]]],[10,"current_balance","","The balance of the receiver.",3,[[],[["tokenamount",6],["result",4],["actorerror",3]]]],[10,"resolve_address","","Resolves an address of any protocol to an ID address (via…",3,[[["address",3]],[["option",4],["result",4],["actorerror",3]]]],[10,"get_actor_code_cid","","Look up the code ID at an actor address.",3,[[["address",3]],[["actorerror",3],["result",4],["option",4]]]],[10,"get_randomness_from_tickets","","Randomness returns a (pseudo)random byte array drawing…",3,[[["chainepoch",6],["domainseparationtag",4]],[["randomness",3],["actorerror",3],["result",4]]]],[10,"get_randomness_from_beacon","","Randomness returns a (pseudo)random byte array drawing…",3,[[["chainepoch",6],["domainseparationtag",4]],[["randomness",3],["actorerror",3],["result",4]]]],[10,"create","","Initializes the state object. This is only valid in a…",3,[[],[["result",4],["actorerror",3]]]],[10,"state","","Loads a readonly copy of the state of the receiver into…",3,[[],[["actorerror",3],["cbor",8],["result",4]]]],[10,"transaction","","Loads a mutable version of the state into the `obj`…",3,[[],[["result",4],["actorerror",3]]]],[10,"store","","Returns reference to blockstore",3,[[]]],[10,"send","","Sends a message to another actor, returning the exit code…",3,[[["tokenamount",6],["address",3],["methodnum",6],["serialized",3]],[["result",4],["serialized",3],["actorerror",3]]]],[10,"new_actor_address","","Computes an address for a new actor. The returned address…",3,[[],[["address",3],["result",4],["actorerror",3]]]],[10,"create_actor","","Creates an actor with code `codeID` and address `address`,…",3,[[["cid",3],["address",3]],[["result",4],["actorerror",3]]]],[10,"delete_actor","","Deletes the executing actor from the state tree,…",3,[[["address",3]],[["result",4],["actorerror",3]]]],[10,"syscalls","","Provides the system call interface.",3,[[],["syscalls",8]]],[10,"total_fil_circ_supply","","Returns the total token supply in circulation at the…",3,[[],[["tokenamount",6],["result",4],["actorerror",3]]]],[10,"charge_gas","","ChargeGas charges specified amount of `gas` for execution.…",3,[[],[["result",4],["actorerror",3]]]],[8,"MessageInfo","","Message information available to the actor about executing…",null,null],[10,"caller","","The address of the immediate calling actor. Always an…",4,[[],["address",3]]],[10,"receiver","","The address of the actor receiving the message. Always an…",4,[[],["address",3]]],[10,"value_received","","The value attached to the message being processed,…",4,[[],["tokenamount",6]]],[8,"Syscalls","","Pure functions implemented as primitives by the runtime.",null,null],[11,"verify_signature","","Verifies that a signature is valid for an address and…",5,[[["address",3],["signature",3]],[["result",4],["box",3]]]],[11,"hash_blake2b","","Hashes input data using blake2b with 256 bit output.",5,[[],[["result",4],["box",3]]]],[11,"compute_unsealed_sector_cid","","Computes an unsealed sector CID (CommD) from its…",5,[[["registeredsealproof",4]],[["cid",3],["result",4],["box",3]]]],[10,"verify_seal","","Verifies a sector seal proof.",5,[[["sealverifyinfo",3]],[["result",4],["box",3]]]],[10,"verify_post","","Verifies a window proof of spacetime.",5,[[["windowpostverifyinfo",3]],[["result",4],["box",3]]]],[10,"verify_consensus_fault","","Verifies that two block headers provide proof of a…",5,[[],[["result",4],["box",3],["option",4]]]],[11,"batch_verify_seals","","",5,[[],[["result",4],["box",3],["hashmap",3]]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"clone","","",0,[[],["consensusfault",3]]],[11,"clone","","",1,[[],["consensusfaulttype",4]]]],"p":[[3,"ConsensusFault"],[4,"ConsensusFaultType"],[8,"ActorCode"],[8,"Runtime"],[8,"MessageInfo"],[8,"Syscalls"]]},\
"serialization_tests":{"doc":"","i":[],"p":[]},\
"state_manager":{"doc":"","i":[[3,"InvocResult","state_manager","Type to represent invocation of state call results",null,null],[12,"msg","","",0,null],[12,"msg_rct","","",0,null],[12,"error","","",0,null],[3,"MarketBalance","","",null,null],[3,"StateManager","","",null,null],[4,"Error","","State manager error",null,null],[13,"State","","Error orginating from state",1,null],[13,"VM","","Error from VM execution",1,null],[13,"ActorNotFound","","Actor for given address not found",1,null],[13,"ActorStateNotFound","","Actor state not found at given cid",1,null],[13,"DB","","Error originating from key-value store",1,null],[13,"Other","","Other state manager error",1,null],[0,"utils","","",null,null],[11,"get_sectors_for_winning_post","","Retrieves and generates a vector of sector info for the…",2,[[["address",3],["randomness",3],["cid",3]],[["result",4],["box",3],["vec",3]]]],[11,"get_miner_sector_set","","",2,[[["option",4],["address",3],["tipset",3]],[["result",4],["error",4],["vec",3]]]],[11,"miner_sector_info","","",2,[[["address",3],["sectornumber",6],["tipset",3]],[["option",4],["error",4],["result",4]]]],[11,"precommit_info","","",2,[[["address",3],["sectornumber",6],["tipset",3]],[["result",4],["sectorprecommitonchaininfo",3],["error",4]]]],[11,"get_miner_info","","",2,[[["address",3],["tipset",3]],[["result",4],["box",3],["minerinfo",3]]]],[11,"get_miner_deadlines","","",2,[[["address",3],["tipset",3]],[["deadlines",3],["result",4],["error",4]]]],[11,"get_miner_faults","","",2,[[["address",3],["tipset",3]],[["bitfield",3],["box",3],["result",4]]]],[11,"get_miner_recoveries","","",2,[[["address",3],["tipset",3]],[["bitfield",3],["box",3],["result",4]]]],[11,"list_miner_actors","","",2,[[["tipset",3]],[["result",4],["vec",3],["error",4]]]],[6,"CidPair","","Intermediary for retrieving state objects and updating…",null,null],[6,"StateCallResult","","",null,null],[11,"new","","",2,[[["arc",3]]]],[11,"new_with_subscribers","","",2,[[["headchange",4],["subscriber",3],["arc",3]]]],[11,"load_actor_state","","Loads actor state from IPLD Store",2,[[["address",3],["cid",3]],[["error",4],["result",4]]]],[11,"get_actor","","",2,[[["address",3],["cid",3]],[["result",4],["option",4],["error",4]]]],[11,"blockstore_cloned","","",2,[[],["arc",3]]],[11,"blockstore","","",2,[[]]],[11,"get_network_name","","Returns the network name from the init actor state",2,[[["cid",3]],[["result",4],["string",3],["error",4]]]],[11,"is_miner_slashed","","Returns true if miner has been slashed or is considered…",2,[[["address",3],["cid",3]],[["result",4],["error",4]]]],[11,"get_miner_work_addr","","Returns raw work address of a miner",2,[[["address",3],["cid",3]],[["address",3],["error",4],["result",4]]]],[11,"get_power","","Returns specified actor\'s claimed power and total network…",2,[[["address",3],["cid",3]],[["result",4],["error",4]]]],[11,"get_subscriber","","",2,[[],[["option",4],["subscriber",3]]]],[11,"apply_blocks","","Performs the state transition for the tipset and applies…",2,[[["bigint",3],["chainepoch",6],["option",4],["cid",3]],[["box",3],["result",4]]]],[11,"tipset_state","","",2,[[["tipset",3]]]],[11,"call","","runs the given message and returns its result without any…",2,[[["unsignedmessage",3],["option",4],["tipset",3]],["statecallresult",6]]],[11,"call_with_gas","","",2,[[["chainmessage",4],["option",4],["tipset",3]]]],[11,"replay","","returns the result of executing the indicated message,…",2,[[["cid",3],["tipset",3]],[["result",4],["error",4]]]],[11,"compute_tipset_state","","",2,[[["option",4]],[["box",3],["result",4]]]],[11,"get_receipt","","returns a message receipt from a given tipset and message…",2,[[["cid",3],["tipset",3]],[["result",4],["messagereceipt",3],["error",4]]]],[11,"wait_for_message","","WaitForMessage blocks until a message appears on chain. It…",2,[[["option",4],["subscriber",3],["arc",3],["cid",3]]]],[11,"get_bls_public_key","","Returns a bls public key from provided address",2,[[["address",3],["arc",3],["cid",3]],[["result",4],["error",4]]]],[11,"get_heaviest_balance","","Return the heaviest tipset\'s balance from self.db for a…",2,[[["address",3]],[["bigint",3],["result",4],["error",4]]]],[11,"get_balance","","Return the balance of a given address and state_cid",2,[[["address",3],["cid",3]],[["bigint",3],["result",4],["error",4]]]],[11,"lookup_id","","",2,[[["address",3],["tipset",3]],[["error",4],["result",4],["option",4]]]],[11,"market_balance","","",2,[[["address",3],["tipset",3]],[["marketbalance",3],["error",4],["result",4]]]],[11,"resolve_to_key_addr","","Similar to `resolve_to_key_addr` in the vm crate but does…",2,[[["address",3],["tipset",3]]]],[11,"miner_has_min_power","","Checks power actor state for if miner meets consensus…",2,[[["address",3],["tipset",3]],[["result",4],["string",3]]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_string","","",1,[[],["string",3]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"as_fail","","",1,[[],["fail",8]]],[11,"from","","",1,[[["dberr",4]]]],[11,"from","","",1,[[["string",3]]]],[11,"default","","",3,[[],["marketbalance",3]]],[11,"eq","","",1,[[["error",4]]]],[11,"ne","","",1,[[["error",4]]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"source","","",1,[[],[["error",8],["option",4]]]],[11,"serialize","","",0,[[],["result",4]]],[11,"serialize","","",3,[[],["result",4]]],[11,"deserialize","","",0,[[],["result",4]]],[11,"deserialize","","",3,[[],["result",4]]]],"p":[[3,"InvocResult"],[4,"Error"],[3,"StateManager"],[3,"MarketBalance"]]},\
"state_tree":{"doc":"","i":[[3,"StateTree","state_tree","State tree implementation using hamt",null,null],[11,"new","","",0,[[]]],[11,"new_from_root","","Constructor for a hamt state tree given an IPLD store",0,[[["cid",3]],[["result",4],["box",3]]]],[11,"store","","Retrieve store reference to modify db.",0,[[]]],[11,"get_actor","","Get actor state from an address. Will be resolved to ID…",0,[[["address",3]],[["box",3],["result",4],["option",4]]]],[11,"set_actor","","Set actor state for an address. Will set state at ID…",0,[[["actorstate",3],["address",3]],[["result",4],["box",3]]]],[11,"lookup_id","","Get an ID address from any Address",0,[[["address",3]],[["result",4],["option",4],["box",3]]]],[11,"delete_actor","","Delete actor for an address. Will resolve to ID address to…",0,[[["address",3]],[["result",4],["box",3]]]],[11,"mutate_actor","","Mutate and set actor state for an Address.",0,[[["address",3]],[["result",4],["box",3]]]],[11,"register_new_address","","Register a new address through the init actor.",0,[[["address",3]],[["address",3],["box",3],["result",4]]]],[11,"snapshot","","Add snapshot layer to stack.",0,[[],[["result",4],["string",3]]]],[11,"clear_snapshot","","Merges last two snap shot layers",0,[[],[["result",4],["string",3]]]],[11,"revert_to_snapshot","","Revert state cache by removing last snapshot",0,[[],[["result",4],["string",3]]]],[11,"flush","","Flush state tree and return Cid root.",0,[[],[["result",4],["cid",3],["box",3]]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]]],"p":[[3,"StateTree"]]},\
"test_utils":{"doc":"","i":[[5,"template_key","test_utils","Defines a TipsetKey used in testing",null,[[],["cid",3]]],[5,"construct_keys","","Returns a vec of 4 distinct CIDs",null,[[],[["cid",3],["vec",3]]]],[5,"construct_headers","","Returns a vec of block headers to be used for testing…",null,[[],[["blockheader",3],["vec",3]]]],[5,"construct_ticket","","Returns a Ticket to be used for testing",null,[[],["ticket",3]]],[5,"construct_epost_proof","","Returns a deterministic EPostProof to be used for testing",null,[[],["epostproof",3]]],[5,"construct_block","","Returns a full block used for testing",null,[[],["block",3]]],[5,"construct_tipset","","Returns a tipset used for testing",null,[[],["tipset",3]]],[5,"construct_full_tipset","","Returns a full tipset used for testing",null,[[],["fulltipset",3]]],[5,"construct_tipset_metadata","","Returns TipsetMetadata used for testing",null,[[],["tipsetmetadata",3]]],[5,"construct_messages","","Returns a tuple of unsigned and signed messages used for…",null,[[]]],[5,"construct_tipset_bundle","","Returns a TipsetBundle used for testing",null,[[],["tipsetbundle",3]]],[5,"construct_dummy_header","","",null,[[],["blockheader",3]]],[5,"construct_blocksync_response","","Returns a RPCResponse used for testing",null,[[],["blocksyncresponse",3]]]],"p":[]},\
"utils":{"doc":"","i":[[5,"write_to_file","utils","Writes a string to a specified file. Creates the desired…",null,[[],["result",6]]],[5,"read_file_to_vec","","Read file as a `Vec<u8>`",null,[[],[["vec",3],["result",6]]]],[5,"read_file_to_string","","Read file as a `String`.",null,[[],[["result",6],["string",3]]]],[5,"get_home_dir","","Gets the home directory of the current system. Will return…",null,[[],["string",3]]],[5,"read_toml","","Converts a toml file represented as a string to `S`",null,[[],["result",6]]]],"p":[]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);