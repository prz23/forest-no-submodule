initSidebarItems({"constant":[["BASE_FEE_MAX_CHANGE_DENOM",""],["BLOCK_GAS_TARGET",""],["INITIAL_BASE_FEE",""],["PACKING_EFFICIENCY_DENOM",""],["PACKING_EFFICIENCY_NUM",""]],"enum":[["Error","Chain error"],["EventsPayload",""],["HeadChange","Enum for pubsub channel that defines message type variant and data contained in message type."]],"fn":[["block_messages","Returns a Tuple of bls messages of type UnsignedMessage and secp messages of type SignedMessage"],["block_messages_from_cids","Returns a tuple of UnsignedMessage and SignedMessages from their Cid"],["chain_messages","Returns a vector of all chain messages, these messages contain all bls messages followed by all secp messages."],["compute_base_fee",""],["draw_randomness","Computes a pseudorandom 32 byte Vec"],["fill_tipsets","Constructs and returns a full tipset if messages from storage exists - non self version"],["genesis","Returns the genesis block"],["get_beacon_randomness","Gets 32 bytes of randomness for ChainRand paramaterized by the DomainSeparationTag, ChainEpoch, Entropy from the latest beacon entry."],["get_chain_message","Attempts to deserialize to unsigend message or signed message and then returns it at as a message trait object"],["get_chain_randomness","Gets 32 bytes of randomness for ChainRand paramaterized by the DomainSeparationTag, ChainEpoch, Entropy from the ticket chain."],["get_heaviest_tipset","Returns the heaviest tipset"],["get_parent_reciept","returns message receipt given block_header"],["latest_beacon_entry","Finds the latest beacon entry given a tipset up to 20 tipsets behind"],["messages_for_tipset","given a tipset this function will return all messages"],["persist_objects","Persists slice of serializable objects to blockstore."],["read_msg_cids","Returns a tuple of cids for both Unsigned and Signed messages"],["sub_head_changes",""],["tipset_by_height","Returns the tipset behind `tsk` at a given `height`. If the given height is a null round:"],["tipset_from_keys","Returns Tipset from key-value store from provided cids"],["unsigned_messages_for_tipset","Returns messages for a given tipset from db"],["weight","Returns the weight of provided tipset"]],"mod":[["base_fee",""],["headchange_json",""]],"struct":[["ChainStore","Stores chain data such as heaviest tipset and cached tipset info at each epoch. This structure is threadsafe, and all caches are wrapped in a mutex to allow a consistent `ChainStore` to be shared across tasks."],["IndexToHeadChange",""],["MINIMUM_BASE_FEE","Cbor bytes of an empty array serialized."],["TipIndex","Tracks tipsets and their states by TipsetKeys and ChainEpoch."],["TipsetMetadata","TipsetMetadata is the type stored as the value in the TipIndex hashmap.  It contains a tipset pointing to blocks, the root cid of the chain's state after applying the messages in this tipset to it's parent state, and the cid of the receipts for these messages."]],"trait":[["Index","Trait to allow metadata to be indexed by multiple types of structs"]]});